This is a generic INSTALL file for utilities distributions.
Some features specific to Gcal have been added to this file,
so *please READ IT*.



Table of Contents:
* Basic Installation
* Gcal Installation
* Compilers and Options
* Multiple Architectures
* Installation Names
* Optional Features
* Specifying the System Type
* Sharing Defaults
* Operation Controls
* Special Targets



Basic Installation
==================

   These are generic installation instructions.

   The `configure' shell script attempts to guess correct values for
various system-dependent variables used during compilation.  It uses
those values to create a `Makefile' in each directory of the package.
It may also create one or more `.h' files containing system-dependent
definitions.  Finally, it creates a shell script `config.status' that
you can run in the future to recreate the current configuration, a file
`config.cache' that saves the results of its tests to speed up
reconfiguring, and a file `config.log' containing compiler output
(useful mainly for debugging `configure').

   If you need to do unusual things to compile the package, please try
to figure out how `configure' could check whether to do them, and mail
diffs or instructions to the address given in the `README' so they can
be considered for the next release.  If at some point `config.cache'
contains results you don't want to keep, you may remove or edit it.

   The file `configure.in' is used to create `configure' by a program
called `autoconf'.  You only need `configure.in' if you want to change
it or regenerate `configure' using a newer version of `autoconf'.

The simplest way to compile this package is:

  1. `cd' to the directory containing the package's source code and type
     `./configure' to configure the package for your system.  If you're
     using `csh' on an old version of System V, you might need to type
     `sh ./configure' instead to prevent `csh' from trying to execute
     `configure' itself.

     Running `configure' takes awhile.  While running, it prints some
     messages telling which features it is checking for.

  2. Type `make' to compile the package.

  3. Optionally, type `make check' to run any self-tests that come with
     the package.

  4. Type `make install' to install the programs and any data files and
     documentation.

  5. You can remove the program binaries and object files from the
     source code directory by typing `make clean'.  To also remove the
     files that `configure' created (so you can compile the package for
     a different kind of computer), type `make distclean'.  There is
     also a `make maintainer-clean' target, but that is intended mainly
     for the package's developers.  If you use it, you may have to get
     all sorts of other programs in order to regenerate files that came
     with the distribution.

Gcal Installation
=================

   These are `gcal' specific installation instructions.

   You can set your private/local/site depending options in the `make'
variables `DEFINES' and `DEFINES2'.  Choose and set these options
*either* in the files `defines.h' and `tailor.h' *or* in the
appropriate template Makefile `src/Makefile.in' (of which the
`configure' shell script generates the site specific `src/Makefile')
before compiling `gcal'; *or* use the `--enable-FEATURE' respectively
`--disable-FEATURE' arguments of `configure'.  Type `configure --help'
for an overview of all `configure' options.  After the successful run of
`configure', type `make help' for an overview of all Makefile targets.

   Inspect the README files of the distribution and the enclosed
documentation for more information.  See the topics *Note Special
Targets::, and *Note Basic Installation::, in this file for more
details.

Compilers and Options
=====================

   Some systems require unusual options for compilation or linking that
the `configure' script does not know about.  You can give `configure'
initial values for variables by setting them in the environment.  Using
a Bourne-compatible shell, you can do that on the command line like
this:
     CC=c89 CFLAGS=-O2 LIBS=-lposix ./configure

Or on systems that have the `env' program, you can do it like this:
     env CPPFLAGS=-I/usr/local/include LDFLAGS=-s ./configure

Compiling For Multiple Architectures
====================================

   You can compile the package for more than one kind of computer at the
same time, by placing the object files for each architecture in their
own directory.  To do this, you must use a version of `make' that
supports the `VPATH' variable, such as GNU `make'.  `cd' to the
directory where you want the object files and executables to go and run
the `configure' script.  `configure' automatically checks for the
source code in the directory that `configure' is in and in `..'.

   If you have to use a `make' that does not supports the `VPATH'
variable, you have to compile the package for one architecture at a time
in the source code directory.  After you have installed the package for
one architecture, use `make distclean' before reconfiguring for another
architecture.

Installation Names
==================

   By default, `make install' will install the package's files in
`/usr/local/bin', `/usr/local/man', etc.  You can specify an
installation prefix other than `/usr/local' by giving `configure' the
option `--prefix=PATH'.

   You can specify separate installation prefixes for
architecture-specific files and architecture-independent files.  If you
give `configure' the option `--exec-prefix=PATH', the package will use
PATH as the prefix for installing programs and libraries.
Documentation and other data files will still use the regular prefix.

   In addition, if you use an unusual directory layout you can give
options like `--bindir=PATH' to specify different values for particular
kinds of files.  Run `configure --help' for a list of the directories
you can set and what kinds of files go in them.

   If the package supports it, you can cause programs to be installed
with an extra prefix or suffix on their names by giving `configure' the
option `--program-prefix=PREFIX' or `--program-suffix=SUFFIX'.

Optional Features
=================

   Some packages pay attention to `--enable-FEATURE' options to
`configure', where FEATURE indicates an optional part of the package.
They may also pay attention to `--with-PACKAGE' options, where PACKAGE
is something like `gnu-as' or `x' (for the X Window System).  The
`README' should mention any `--enable-' and `--with-' options that the
package recognizes.

   For packages that use the X Window System, `configure' can usually
find the X include and library files automatically, but if it doesn't,
you can use the `configure' options `--x-includes=DIR' and
`--x-libraries=DIR' to specify their locations.

Specifying the System Type
==========================

   There may be some features `configure' can not figure out
automatically, but needs to determine by the type of host the package
will run on.  Usually `configure' can figure that out, but if it prints
a message saying it can not guess the host type, give it the
`--host=TYPE' option.  TYPE can either be a short name for the system
type, such as `sun4', or a canonical name with three fields:
     CPU-COMPANY-SYSTEM

See the file `config.sub' for the possible values of each field.  If
`config.sub' isn't included in this package, then this package doesn't
need to know the host type.

   If you are building compiler tools for cross-compiling, you can also
use the `--target=TYPE' option to select the type of system they will
produce code for and the `--build=TYPE' option to select the type of
system on which you are compiling the package.

Sharing Defaults
================

   If you want to set default values for `configure' scripts to share,
you can create a site shell script called `config.site' that gives
default values for variables like `CC', `cache_file', and `prefix'.
`configure' looks for `PREFIX/share/config.site' if it exists, then
`PREFIX/etc/config.site' if it exists.  Or, you can set the
`CONFIG_SITE' environment variable to the location of the site script.
A warning: not all `configure' scripts look for a site script.

Operation Controls
==================

   `configure' recognizes the following options to control how it
operates.

`--cache-file=FILE'
     Use and save the results of the tests in FILE instead of
     `./config.cache'.  Set FILE to `/dev/null' to disable caching, for
     debugging `configure'.

`--help'
     Print a summary of the options to `configure', and exit.

`--quiet'
`--silent'
`-q'
     Do not print messages saying which checks are being made.

`--srcdir=DIR'
     Look for the package's source code in directory DIR.  Usually
     `configure' can determine that directory automatically.

`--version'
     Print the version of Autoconf used to generate the `configure'
     script, and exit.

`configure' also accepts some other, not widely useful, options.

Special Targets
===============

   * For MS-DOS, OS/2, Windows NT, VMS, Acorn, Atari, Amiga, Primos,
     use the Makefile(s) or command file(s) provided in the appropriate
     `systems/' subdirectory and edit the `LIB', `INCLUDE', `[]FLAGS'
     and `CC' entries to reflect your local system.

   * On MS-DOS, Zortech-C v2.14 is buggy in some cases.  Use a newer
     version.

   * On MS-DOS, Microsoft-C v5.0 is buggy in some cases and could die.
     Don't use that compiler version, use version 5.1 or newer.

   * On MS-DOS, the library function `qsort()' of Microsoft-C v5.1 and
     v6.0 seems to be realized with very poor performance.  If large
     numbers of fixed date texts are processed and these texts are
     internally presorted in the resource file(s) except some very few
     ones, this `qsort()' function becomes very busy and you have to
     wait a long time before all sorting is done.  Avoid to use these
     Microsoft compilers, use Borland-C++ 3.1 or newer instead!

   * On MS-DOS, the library function `malloc()' of Borlands Turbo-C++
     1.0 (and perhaps of Turbo-C 2.0 too) seems to have a serious bug.
     Avoid to use these compilers, use Borland-C++ 3.1 or newer instead!

   * If your system is a pure BSD system but incorrectly links
     `string.h' to `strings.h', you may get undefined `str*' symbols.
     Try recompiling with

          make clean
          make CFLAGS="-USTDC_HEADERS -UHAVE_STRING_H"

   * On Ultrix, `/bin/sh' is too buggy.  Use `sh5 configure' instead of
     `configure'.

   * On Xenix, some preprocessors do not define `M_XENIX'.  You may
     have to do:

          DEFS='-DM_XENIX' ./configure

   * On Xenix 2.3.2 for 286, do:

          make xenix_286

   * On Coherent, do:

          make coherent

   * On some versions of NeXT, either `cc -finline-functions' or `cc
     -O4' is broken.  Use `cc -O' instead.

   * On Solaris 2.1 for x86, the January 1993 "OEM" compiler release
     generates bad code.  This is fixed in the June 1993 "FCS" release.

   * On Solaris 2.x use `gawk' or `perl' instead of its standard `nawk'.

   * On Sparc with SunOS 4.1.1 and the SC1.0 compiler, the optimizer
     works up to `-O3' but `-O4' does not work.

   * Some systems could use `index()' and `rindex()' instead of
     `strchr()' and `strrch()'.  If the linker is unable to detect
     these objects in the standard libs, add `-lbsd' or `-lucb' to
     `LIBS' and recompile the source.

   * On dnix 5.3 2.2 `cc' version 2.37c is buggy.  Version 2.38d works.

   * On an Alliant running Concentrix, `cc' (even without optimization)
     generates incorrect code.  You have to use `gcc'.

   * On Cray running CSOS 1.0 with compiler version dev-125, you must
     compile with the flag `-hnoopt' to avoid an optimizer bug.

   * On HPUX, `configure' can't find a correct `install'.  Use:

          INSTALL=/usr/local/bin/bsdinst ./configure

   * On AIX 4.0 or newer, `configure' can't find a correct `install'.
     Use:

          INSTALL="install-sh -c" ./configure

   * On SCO Unix (ODT 2.0/3.2v4) and some other systems which use the
     SysV regular expressions, there is a name clash with the
     `libintl.a' library file!  The SysV regular expression functions
     are stored in a library file by this name, and the GNU `gettext'
     localization functions are also stored in a library file by this
     name.  But both files are not equal, each manages a very special
     task.  For using both concurrently, the SysV regexp functions and
     the GNU `gettext' message text translations, use:

          ./configure --with-included-gettext

     This should avoid problems, by reason the Gcal package-internal GNU
     `gettext' library file `./lib/libintl.a' is directly linked to the
     object code, and also the regular expression functions in the
     library file `libintl.a', which is accessed by using the standard
     link-path.  Otherwise, the `configure' script (or more concrete,
     the `aclocal.m4' macro `AM_GNU_GETTEXT') removes a `-lintl' entry
     in the `LIBS' environment variable when testing whether a
     `libintl.a' already found is *not* the GNU `gettext' library; and
     this always happens when `configure' is called without the
     `--with-included-gettext' option.

