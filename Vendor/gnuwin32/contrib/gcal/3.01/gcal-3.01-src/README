This is README for the Gcal distribution, version 3.01.

The Name of the Game
====================

This file briefly informs about the major features of Gcal, the GNU
Gregorian calendar program.  Gcal is a program for calculating and
printing calendars.  Gcal displays hybrid and proleptic Julian and
Gregorian calendar sheets, respectively, for one month, three months or
a whole year.  It also displays eternal holiday lists for many
countries around the globe, and features a very powerful creation of
fixed date lists that can be used for reminding purposes.  Gcal can
calculate various astronomical data and times of the Sun and the Moon
for at pleasure any location, precisely enough for most civil purposes.
Gcal supports some other calendar systems, for example the Chinese and
Japanese calendar, the Hebrew calendar and the civil Islamic calendar,
too.

The Advantages of `gcal'
========================

Its main advantages over BSD-`cal' and `calendar' are:

   * Some special calendar sheet formats.

   * Calendar sheets can be provided with week numbers.

   * Variable number of year calendar sheet blocks.

   * Adjustable ordering of displayed dates.

   * Adjustable period of Gregorian Reformation.

   * Proleptic Julian and Gregorian calendars.

   * Adjustable highlighting of holidays and actual day.

   * Variable starting day of week.

   * Output of day-of-year numbers and concatenated day and day-of-year
     numbers.

   * Allows user-defined ordering of the date elements.

   * Output of fiscal years.

   * Output of lists or ranges of months or years.

   * Sorted output of selectable country/territory specific eternal
     holiday lists (mostly complete) for nearly *all* countries around
     the globe, which are generated automatically.

   * Sorted output of Christian Western churches calendar holidays,
     Orthodox Christian Eastern churches old and new calendar holidays,
     Hebrew calendar holidays, Islamic civil calendar holidays (since
     AD 622), Persian "Jalaali" calendar holidays, Chinese and Japanese
     calendar holidays (since AD 1645), more "other" calendar system
     holidays, multicultural New Year's Days, and start of "other"
     calendar system months, which are also generated automatically.

   * Sorted output of fixed date lists which can be defined and created
     in a highly flexible manner.

   * Allows filtration of fixed dates by using regular expressions and
     other built-in methods.

   * Allows the use of date and text variables and basic operations on
     them.

   * Some gimmicks like solar and lunar eclipse time, sunrise/sunset
     plus a lot of other Sun based data and times, Moon phase, Full and
     New Moon time, moonrise/moonset plus a lot of other Moon based
     data and times, zodiacal markers, equinox and solstice, air line
     distance between two geographic point locations plus course
     angles, biorhythm et cetera...

   * Fixed dates can be stored in several files.

   * Nearly unlimited nesting level of include files.

   * Nearly unlimited internal text and table lengths.

   * Default options can be stored in the `GCAL' environment variable.

   * Options and commands stored in response files can be preloaded.

   * Uses either an external pager or a simple built-in pager.

   * Detailed Texinfo reference manual.

   * German, English and American program version by default.

   * Supports various computer platforms.

   * GNU `gettext' internationalization technology, which allows the
     use of message catalogs for most native languages.

   * GNU `autoconf'(iguration) installation technology.

   * Supports both UN*X short-style options and GNU long-style options.

System Requirements
===================

Computer:
     MS-DOS PC, OS/2 PC, Linux PC, Acorn, Atari ST, Amiga, Vax, most
     UN*X Workstations, perhaps some Mainframes

Compiler:
     Any? [ANSI] C compiler (GCC, TCC, BCC, MSC, ZTC, WCC, XLC, []CC...)

RAM:
     Depending on compilation flags, operating system and compiler used,
     either less than 480 KByte load size or more than this value.

Hard disk:
     None

Graphics adapter:
     None

Device driver:
     [n]`ansi.sys'/ansi-terminal recommended, but not essential

Files you might look into
=========================

   * Read the `ATTENTION' file!  It informs about all changed `%?'...
     special texts processed by Gcal in the text part of a Gcal
     resource file line and about other incompatibilities to previous
     Gcal versions.  Keep in mind that this Gcal is designed to
     (inter)act on the recent data base (resource, response and shell
     script files) as distributed here, and that it probably fails if it
     accesses such a data base of former versions that is still not
     updated.

   * Some planned features which are not supported yet are listed in the
     `TODO' file.  Here is a blurb from it:

          I'm looking for volunteers who create a graphical front end
          to the `gcal' back end.  If you are interested in working out
          such a front end or you have already created one (native X11
          and/or Tcl/Tk, Motif, DOZE-Win [NT], WIN 95 or 98 or 2000,
          OS/2 PM, Apple...), please contact me!

          Some extended ideas could be part of such a user surface,
          like formatting of output for different printers, output
          converted to Postscript/[La]TeX, better time management of
          fixed dates...

   * See `NEWS' for a summary of user-visible changes since version
     0.28.

   * See `HISTORY' for a complete summary of changes.

   * See `INSTALL' and `SYMBOLS' for compilation and installation
     instructions.  Some answers to frequently asked questions are
     given in the file `INSTALL', please read it!

   * And see the file `systems/README' for some hints how to compile
     Gcal on some special machines and operating systems.

   * A list of all known bugs can be found in the `BUGS' file.

   * And a list of internal limitations can be found in the
     `LIMITATIONS' file.

   * See the file `data/README' for some details to the enclosed
     reminder respectively appointment files and how to install them.

   * Inspect `MANIFEST' for a list of all files which are part of this
     distribution.

   * Many thanks to those who provided me with bug reports and feedback.
     See the `THANKS' and `HISTORY' files for more details.

   * See `ABOUT-NLS' for notes on the Free Translation Project.  Some
     parts of this file which are important for a proper installation
     of Gcal are cited in one of the next sections.

   * You can find some useful wrapper scripts in the `misc/'
     subdirectory, see `misc/README' for more details.  By the way, if
     you have designed useful wrapper scripts which solve tasks of your
     personal interest, and you think they could also be useful to
     others, feel free to share them with the rest of the world.
     Simply send your files to my eMail address and I will add them to
     the next release of Gcal.

   * The ISO 3166 country code table, the ISO 639 language code table
     and the ISO 6709 standard representation for geographic point
     locations can be found in the `doc/' subdirectory.

   * And see the `doc/GREG-REFORM' file, which shows a chronology of
     introduction of the Gregorian calendar (some selected countries
     only).

   * I also recommend to have a look into the `doc/calendar.faq' text
     worked out by Claus Tondering <claus@tondering.dk>, which is a
     very good summary of the most common calendar algorithms and
     principles.

   * You can find all example resource files from the Gcal Texinfo
     reference manual in the `doc/LL/examples/' subdirectories, where LL
     is the ISO 639 two-letter code of your native language.

Please read Gcal's Texinfo reference manual first for getting a deeper
impression of the defaults and modes of operation of Gcal before you
bomb me with questions which I have already answered there!  Your
native language Texinfo documentation (if already worked out) can be
found in the `doc/LL/' subdirectory, where LL is the ISO 639 two-letter
code of your native language.  Thank you!

How to get Termcap or Ncurses
=============================

This program does not require Termcap or Ncurses, but takes advantage
of it when it is available.  You may want to get and install GNU
`termcap' (still? `termcap-1.3.tar.gz') first from
<ftp://ftp.gnu.org/gnu/termcap/> -- respectively `ncurses' (still?
`ncurses-4.2.tar.gz') first from <ftp://ftp.gnu.org/gnu/ncurses/>.

Configuration Options
=====================

If you use the GNU `autoconf' technology, you can enable/disable some
Gcal specific package options.  Simply run the `configure' script with
one or more of these arguments:

    `--enable-easc'
          Use extended ASCII character set.

    `--disable-cc-holidays'
          Do not use all available country specific holidays, only use
          the top 20 countries instead.

    `--disable-hls'
          Do not use highlighting sequences respectively marking
          characters.

    `--disable-pager'
          Do not use external or simple internal pager feature.

    `--disable-rc'
          Do not use fixed date feature.

    `--disable-term'
          Do not use `libncurses.a', `libtermcap.a' respectively
          `libtermlib.a'.

    `--with-included-regexps'
          Use the V8 regular expression functions included here.

     IMPORTANT:

    `--enable-de'
          Generates and installs the German documentation files instead
          of their English equivalents.

Native Language Support
=======================

The `configure' script provides three more non-standard options.  These
will also be available in other packages if they use the functionality
of GNU `gettext'.  Use

     `--disable-nls'

if you absolutely don't want to have messages handling code.  You will
always get the original messages (mostly English).  You could consider
using NLS support even when you do not need other tongues.  If you do
not install any messages catalogs or do not specify to use another but
the C locale you will not get translations.

The set of languages for which catalogs should be installed can also be
specified while configuring.  Of course they must be available but the
intersection of these two sets are computed automatically.  You could
once and for all define in your `profile'/`cshrc' the variable
`LINGUAS':

     (Bourne Shell)          LINGUAS="de fr nl"; export LINGUAS
     
     (C Shell)               setenv LINGUAS "de fr nl"

or specify it directly while configuring

     env LINGUAS="de fr nl" ./configure

Consult the manual for more information on language names.

The second configure option is

     `--with-included-gettext'

This forces to use the GNU implementing the message handling library
regardless what the local C library provides.  This possibility is much
less error prone because possible unreliable effects of the local
message handling system are avoided.  And perhaps more important: many
useful features can only be exploited with this library.  The reason is
obvious: we cannot dig in the internals of other implementations.  It
is likely that the discrepancy between the GNU implementation and
others will get bigger in the time coming.  So better change now!

The third option is:

     `--with-catgets'

The X/Open catgets functions which might be found in the local C
library are not used by default.  The reason is already described
above: the GNU `gettext' library provides many useful extension which
cannot be emulated with `catgets()'.  Beside this the utility programs
for generating the catalog used by `catgets()' vary heavily between
different systems.  You should select this feature only if you really
don't want to use the GNU `gettext' library and do not want to extended
functionality (but I do not see any good reason for such a choice).

As a user, if your language has been installed for this package, you
only have to set the `LANG' environment variable to the appropriate ISO
639 LL two-letter code prior to using the programs in the package.  For
example, let's suppose that you speak German.  At the shell prompt,
merely execute `setenv LANG de' (in `csh'), `export LANG; LANG=de' (in
`sh') or `export LANG=de' (in `bash').  This can be done from your
`.login' or `.profile' file, once and for all.

An operating system might already offer message localization for many of
its programs, while other programs have been installed locally with the
full capabilities of GNU `gettext'.  Just using `gettext' extended
syntax for `LANG' would break proper localization of already available
operating system programs.  In this case, users should set both
`LANGUAGE' and `LANG' variables in their environment, as programs using
GNU `gettext' give preference to `LANGUAGE'.  For example, some Swedish
users would rather read translations in German than English for when
Swedish is not available.  This is easily accomplished by setting
`LANGUAGE' to `sv:de' while leaving `LANG' to `sv'.

By the way, if you want to support the author and the rest of the world
with translations of Gcal message catalogs into your native language,
please read, fill, print and sign the enclosed disclaimer file
`DISCLAIM' and snail-mail it to the Free Software Foundation.  Please
write to <translation@iro.umontreal.ca> to reach the coordinator for all
translator teams.  See `ABOUT-NLS' and/or the manual of GNU `gettext'
for more details.

Some Installation Hints
=======================

Some points you might be interested in before installing the package:

  1. If you run `make' with a distribution target, the Makefile rules
     will schedule a recompution of the `gcal.pot' file.  But this is
     not possible without the GNU `gettext' package already installed.
     If you don't have this package already installed and modified any
     of the files build the package first with

          `--disable-nls'

     When this is done you will get a runnable `xgettext' program which
     can be used to recompute `gcal.pot'.

  2. The package contains a file `misc/magic.add'.  This is intended to
     be added to your `/etc/magic' file.  After adding this the `file'
     command will recognize GNU message catalog files (`.mo' files).

  3. The locale name alias scheme implemented here is in a similar form
     implemented in the X Windows Systems.  Especially the alias data
     base file can be shared.  Normally this file is found at something
     like `/usr/lib/X11/locale/locale.alias'.

     If you have the X Windows System installed try to find this file
     and specify the path at the make run:

          make aliaspath='/usr/lib/X11/locale/locale.alias:/usr/local/lib/locale'

     (or whatever is appropriate for you).
     In the `misc/' subdirectory you find an example for a alias
     database file.

  4. On some systems it will not be possible to compile this package.
     It is not only this package but any other GNU package, too.  These
     systems do not provide the simplest functionality to run configure.
     Today are known the following systems:

                  configure name          description
                  --------------          -----------
                  mips-mips-riscos        2.1.1AC RISCos

Reporting Bugs
==============

Please send all comments and bug reports via electronic mail either to:

     Thomas Esken <esken@gmx.net>   (preferred and always available)

or

     Thomas Esken <esken@uni-muenster.de>

or

     Thomas Esken <esken@abacus.informatik.fh-dortmund.de>

Actually, I do not know for how long the last two eMail addresses will
remain valid.  At any case, you can contact me via <esken@gmx.net>.  If
you want to write and you want be on the `safe side', CC your eMail to
all above addresses.

If all above actions have failed, eMail to <bug-gcal@gnu.org>.

Bug reports should ideally include (if necessary in your opinion):

  1. A detailed description of the bug behavior, not just
     interpretations

  2. The complete output of `gcal --version' (or the contents of
     `defines.h' and the `src/Makefile' if you can't get `gcal' to
     compile)

  3. The hardware and operating system (try `uname -a')

  4. The compiler used to compile (if it is `gcc', use `gcc -v')

  5. All the system specific files which are automatically created
     during the configuration phase (`config.h', `config.cache',
     `config.log', `config.status') and if necessary also the
     temporarily created files used for building them (`confdefs.h',
     `confcache', `conftest.vals', `conftest.h'...)

  6. The shell environment (try `set')

  7. The complete `termcap' entry for your terminal if the bug occurs
     while highlighting of text

  8. The command line given to `gcal', that triggered the bug

Copyright
=========

Gcal Copyright (C) 1994, 95, 96, 1997, 2000 by Thomas Esken is free
software.  You can redistribute it and/or modify it under the terms of
the `GNU General Public License' as published by the `Free Software
Foundation'; either version 2, or (at your option) any later version.
A copy of this license is provided under the name `COPYING', see it for
more details.

How to get `gcal'
=================

The latest official version of Gcal is always available by anonymous
ftp from <ftp://ftp.gnu.org>, or from any of the `gnu' mirror sites:

   * gnu/gcal/gcal-*[.tar or .tar.Z or .tar.gz or .zip or .shar].

Some ftp servers can automatically make a `tar.Z' or a `tar.gz' from a
`tar' file.  If you are getting Gcal for the first time, you can ask
for a `tar.Z' or `tar.gz' file instead of the much larger `tar' file.

