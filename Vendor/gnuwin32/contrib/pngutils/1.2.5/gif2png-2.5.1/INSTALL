Quick Installation for Unix
===========================

On Unix systems, to build from sources it is usually only necessary to run:

	configure
	make

and then (as root) install with:

	make install

The rest of this file describes details and unusual circumstances.
Instructions for compiling under non-Unix operating systems can be
found at the end of the file.

If your libpng library and header files are in an unusual place, it may
be helpful to specify the --with-png option; type 

        configure --help

for details.

Installation Details
====================

   The `configure' shell script attempts to guess correct values for
various system-dependent variables used during compilation.  It uses
those values to create a `Makefile' and config.h.  Finally, it creates
a shell script `config.status' that you can run in the future to
recreate the current configuration, a file `config.cache' that saves
the results of its tests to speed up reconfiguring, and a file
`config.log' containing compiler output (useful mainly for debugging
`configure').

   If you need to do unusual things to compile the package, please try
to figure out how `configure' could check whether to do them, and mail
diffs or instructions to the address given in the `README' so they can
be considered for the next release.  If at some point `config.cache'
contains results you don't want to keep, you may remove or edit it.

   The file `configure.in' is used to create `configure' by a program
called `autoconf'.  You only need `configure.in' if you want to change
it or regenerate `configure' using a newer version of `autoconf'.

The simplest way to compile this package is:

  1. `cd' to the directory containing the package's source code and type
     `./configure' to configure the package for your system.  If you're
     using `csh' on an old version of System V, you might need to type
     `sh ./configure' instead to prevent `csh' from trying to execute
     `configure' itself.

     Running `configure' takes awhile.  While running, it prints some
     messages telling which features it is checking for.

  2. Type `make' to compile the package.

  3. Type `make install' to install the programs and any data files and
     documentation.

  4. You can remove the program binaries and object files from the
     source code directory by typing `make clean'.  To also remove the
     files that `configure' created (so you can compile the package for
     a different kind of computer), type `make distclean'.  There is
     also a `make maintainer-clean' target, but that is intended mainly
     for the package's developers.  If you use it, you may have to get
     all sorts of other programs in order to regenerate files that came
     with the distribution.

Compilers and Options
=====================

   Some systems require unusual options for compilation or linking that
the `configure' script does not know about.  You can give `configure'
initial values for variables by setting them in the environment.  Using
a Bourne-compatible shell, you can do that on the command line like
this:
     CC=c89 CFLAGS=-O2 LIBS=-lposix ./configure

Or on systems that have the `env' program, you can do it like this:
     env CPPFLAGS=-I/usr/local/include LDFLAGS=-s ./configure

SGI IRIX has a very old version of libpng that won't work with gif2png.
If you have installed a newer version of libpng and zlib in /usr/local,
use this:

CC="cc -n32 -L/usr/local/lib" CPPFLAGS="-I/usr/local/include" ./configure

Installation Names
==================

   By default, `make install' will install the package's files in
`/usr/local/bin', `/usr/local/man', etc.  You can specify an
installation prefix other than `/usr/local' by giving `configure' the
option `--prefix=PATH'.

   In addition, if you use an unusual directory layout you can give
options like `--bindir=PATH' to specify different values for particular
kinds of files.  Run `configure --help' for a list of the directories
you can set and what kinds of files go in them.

Optional Features
=================

   The gif2png package has exactly one optional feature.  Configuring
with --enable-TMPFILE builts a version that keeps intermediate results
of GIF versions in a tempfile rather than memory.  Use of this option
is not recommended, as it will hurt performance and is almost certainly
not appropriate on modern machines with lots of memory.

Operation Controls
==================

   `configure' recognizes the following options to control how it
operates.

`--cache-file=FILE'
     Use and save the results of the tests in FILE instead of
     `./config.cache'.  Set FILE to `/dev/null' to disable caching, for
     debugging `configure'.

`--help'
     Print a summary of the options to `configure', and exit.

`--quiet'
`--silent'
`-q'
     Do not print messages saying which checks are being made.

`--srcdir=DIR'
     Look for the package's source code in directory DIR.  Usually
     `configure' can determine that directory automatically.

`--version'
     Print the version of Autoconf used to generate the `configure'
     script, and exit.

`configure' also accepts some other, not widely useful, options.

Non-Unix builds
===============

		Compiling with dgpp

I'm told that these commands

bash
( tar xvzf gif2png-2.1.2.tar.gz
  cd gif2png-2.1.2
)
autoconf
./configure
make

will work under Windows.  This probably won't work without 
long file name support.

		Compiling with Borland C++ (for MS-DOS, Windows)

For MSDOS and similar systems, the file Makefile.bcc theoretically
makes a Borland version of gif2png available.  The following
instructions are copied verbatim from the author's original README
c. 1995; they may or may not reflect present reality.

These same instructions, using the file Makefile.dgjpp, may allow you
to compile under a bare DOS without LFN (long file name) support, which
the autoconf-based recipe needs.

gif2png.exe is compiled as a `normal' DOS executable without support for XMS
or EMS or anything and should be used if either you are using a 286 or the
386 version is not working correctly.

gif2png3.exe is compiled as go32 (386 protected mode) executable and works only
on machines with at least a 386sx. This version supports virtual memory
management provided by djgpp. For best performance, you should set the
enviroment variable GO32TMP to a local hard disk, e.g. GO32TMP=c:\tmp.

The program can run under either VCPI or DPMI memory management, if you have
both, you can disable DPMI by adding nodpmi to the GO32 variable (don't ask
me why, I think this a performance plus).

If you are running Windows and the program crashes the system, you might try
to disable screen saver programs, I had problems when After Dark was running.


If you are interested in djgpp and especially in the sources for go32.exe, you
can get the package from some SimTel mirrors in the directory vendors/djgpp,
e.g. on ftp://oak.oakland.edu/SimTel

If it is not working at all, you can always install Linux and compile
the program yourself -- then you shouldn't have problems with memory
management :-)

