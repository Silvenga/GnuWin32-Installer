2001-11-24  david ingamells  <david@mrbig>

	* Makefile.am: *** empty log message ***

2001-11-23  david ingamells  <david@mrbig>

	* Makefile.am: *** empty log message ***

2001-10-16  david ingamells  <david@mrbig>

	* Makefile.am, indent-cc.gperf, indent.c, indent.gperf, indent.h, io.c, io.h, lexi.c, lexi.h, parse.c, parse.h, sys.h, wildexp.c, args.c, args.h, backup.c, backup.h, comments.c, comments.h, globs.c, globs.h:
	Directory re-organise and adapt setup files.

2001-10-15  david ingamells  <david@mrbig>

	* lexi.c: multi-line strings.

	* indent.c: more cleanup

2001-10-09  david ingamells  <david@mrbig>

	* backup.c, comments.c, globs.c, io.c, lexi.c, parse.c: Code cleanup

2001-10-04  david ingamells  <david@mrbig>

	* args.c, backup.c: Code clean-up.

	* indent.c: Code clean-up. No (intended) functional changes.

2001-09-05  carlo  <carlo@mrbig>

	* parse.c: Added Taiwanese translation by Franklin W.

2001-09-03  carlo  <carlo@mrbig>

	* args.c, backup.c, globs.c, globs.h, indent.c, indent.h, io.c, lexi.c, parse.c, wildexp.c:
	Added support for i18n.

2001-07-11  carlo  <carlo@mrbig>

	* lexi.c: Bug fix for operator declarations.

2001-04-07  carlo  <carlo@mrbig>

	* backup.c, indent.c, io.c: Date: Thu, 7 Dec 2000 11:54:31 -0500
	From: "Town, Brad" <btown@ceddec.com>
	Subject: Compiling indent under Cygwin

	Cygwin defines _WIN32 by default, but it acts much more like Unix.  Thus,
	some Win32-specific things added to indent-2.2.6 are being enabled under
	Cygwin when they shouldn't be.

	The attached patches remedy the situation.  They simply all occurrences of
	#ifdef _WIN32
	to
	#if defined (_WIN32) && !defined (__CYGWIN__)

	Brad Town

2000-12-12  carlo  <carlo@mrbig>

	* args.c: Ugh, I fixed the wrong line last time (typo fix for no-tabs).

2000-11-30  carlo  <carlo@mrbig>

	* args.c: Correction of alphabetic ordering in args.c

2000-11-20  carlo  <carlo@mrbig>

	* sys.h: Date: Mon, 20 Nov 2000 12:50:14 +0100
	From: Martin Kraemer <Martin.Kraemer@Fujitsu-Siemens.com>
	Subject: [Suggest] EBCDIC auto-detection

	... With the following patch, even the OS-dependency on BS2000 (by way of
	the pre-defined symbol _OSD_POSX) can be eliminated. That means indent
	"should" compile correctly also on (IBM's) OS390 machines.

	* args.c: Typo fix for --no-tabs.

2000-11-17  carlo  <carlo@mrbig>

	* args.c, backup.c, backup.h, comments.c, globs.c, globs.h, indent.c, indent.h, io.c, lexi.c, parse.c, sys.h, wildexp.c:
	Ran indent through indent, using -gnu -nhnl -l120.
	Updated copyright info.

	* wildexp.c: Removed the carriage returns.

	* indent.c, comments.c: Date: Thu, 16 Nov 2000 10:28:34 +0100
	From: Robert Laufer <rlaufer1@lucent.com>

	I get a memory fault for the attached file foobar.c, if i execute the
	command indent -st --dont-break-procedure-type foobar.c
	If i write void bar (void) the error does not occur. Also the identing
	does not work correct for comments between the procedure declaration
	and the opening bracket, see procedure foo. This does only happen with
	the option --dont-break-procedure-type.

	* comments.c: Date: Wed, 15 Nov 2000 23:12:24 -0800 (PST)
	From: Michael Deutschmann <michael@talamasca.ocis.net>

	BTW, I have one other problem to report.  This one I've actually known
	about for awhile, but hadn't thought to report it as the workaround is
	easy:

	int
	main (int argc, char **argv)
	{
	  /* The mostly-blank line following:
	   *
	   * Can cause trouble with indent if -sc is not used.
	   */
	  return 0;
	}


	If "indent -sc" is used, this file is not changed.  But indent without
	"-sc" removes the star on the blank line.  Worse, if indent -sc is used on
	the damaged file, the star is restored but then extra stars are added to
	the remaining lines. (So a cycle of "indent foo.c; indent -sc foo.c;
	indent foo.c; indent -sc foo.c" and on does progressively worse damage to
	the file.

	---

	Actually, it only removed a star on a blank line when it was the second
	line of the comment (this line is used to determine if something is a
	block comment or not). --Carlo

	* indent.c:
	Give force_nl the meaning it really has.  Then actually force a newline
	when it is set at the last place where we didn't.  This fixes the bug
	that under certain cicumstances a line wasn't broken where it should.

2000-11-16  carlo  <carlo@mrbig>

	* io.c, indent.c:
	This fixes an old bug, reported by <igorlord@alum.mit.edu> at the
	beginning of 2000.  Possible break points were skipped under
	circumstances that did dependant on where a line was broken, resulting
	in an alternating output (after subsequent runs of indent).
	This was a hard one to find :/

	* args.c, indent.c, indent.h:
	Added new option --break-function-decl-args (-bfda).
	Initial patch provided by Robert Lipe <robertl@sco.com>.

	* indent.c: Date: Wed, 22 Mar 2000 16:00:18 -0500 (EST)
	From: Jim Rogers <jimrogers@writeme.com>

	I don't expect the -di option to apply to function declartions when -npsl is
	used. for example, if -npsl and -di16 is used:

	void            main()
	{
	}

	--

	I think he is right and I changed this behaviour.  However, it does not
	work for nested functions: those are still indented.

2000-11-15  carlo  <carlo@mrbig>

	* args.c: Date: Wed, 12 Apr 2000 15:07:58 +0200
	From: "Borkhuis, Johan" <Johan.Borkhuis@peektraffic.nl>

	The defaults are read from the struct pro. For boolean types there are 2
	entries in this table, the positive and the negative (with an n in front).
	One of the items in the struct is p_special. This items is used to indicate
	if a the value of a boolean should be inserted as a default or not. But this
	does not work. The code as it is now (in the current 2.2.5 release) in the
	function set_defaults:

	  for (p = pro; p->p_name; p++)
	    if (p->p_type == PRO_BOOL || p->p_type == PRO_INT)
	      *p->p_obj = p->p_default;

	To get this to work the code should be changed to:

	  for (p = pro; p->p_name; p++)
	    if ((p->p_type == PRO_BOOL) && (p->p_special == ON) || p->p_type == PRO_INT)
	      *p->p_obj = p->p_default;

	Here a check if p_special is set to ON is inserted to check if this value
	may be used as a default.

	* args.c, indent.c, indent.h:
	New options to suppress spaces after if, for and while respectively.

	* indent.c:
	Fixed indentation of nested function.  Bug report by Michael Deutsch.

	* indent.c, lexi.c:
	Treat return types of functions correctly even when they are not
	explicitely given with the -T option.

	* comments.c:
	Don't add blank lines after declarations when we're in the middle of
	a C-style comment that continues on the next line.  Reported by David Hui.

2000-11-12  carlo  <carlo@mrbig>

	* io.c: Fixed the -nlp bug (finally)

2000-11-10  carlo  <carlo@mrbig>

	* indent.c, wildexp.c:
	Wild card expansion for win32 by "John Bridges" <jbridges@netcom.com>

	* indent.c:
	Stop indent from core dumping on C++ code (it still won't indent correctly).

2000-11-08  carlo  <carlo@mrbig>

	* backup.c, indent.c, sys.h:
	Support for mingw32 by Sudhi Herle <sherle@sta.samsung.com>

2000-10-10  carlo  <carlo@mrbig>

	* lexi.c:
	Eat backslashes of backslash-newline when occuring outside a macro
	definition or literal string.  Bug report by Alex Cherepanov:
	Indent cannot handle trailing '\' outside of the macro
	or string. Don't ask me why some programs use it there.

2000-10-06  carlo  <carlo@mrbig>

	* args.c, args.h, indent.c, io.c:
	Set the max. comment column to the max. code column if no -lc option
	was given.  Fixes a compiler warning in io.c.
	Patch by John Bridges" <jbridges@netcom.com>

	* lexi.c:
	Move a piece of example code outside a table, otherwise indent gets
	confused (when running it on itself).

2000-09-11  carlo  <carlo@mrbig>

	* indent.c:
	Fix a type that caused types inside sizeof() as to be treated declarations.
	Bug reported by Daniel Diaz.

	* comments.c:
	Bug fix: do NOT collapse spaces in comments unless actually formatting them!

	* comments.c:
	Don't eat spaces that follow a '.'.  <-- Like those (allow two spaces).

2000-09-09  carlo  <carlo@mrbig>

	* comments.c:
	Ok... collapse all adjacent spaces in comments into one when formatting
	comments.

	* comments.c: Bug fix for previous change.

2000-09-08  carlo  <carlo@mrbig>

	* comments.c: bug fix for previous change

	* comments.c: Bug fixes for -fca, reported by John C. Oppenheimer.

2000-07-17  carlo  <carlo@mrbig>

	* args.c:
	Renamed --blank-lines-after-block-comments to --blank-lines-before-block-comments.

2000-07-06  carlo  <carlo@mrbig>

	* args.c, indent.c, indent.h:
	New option --cuddle-do-while.  Sorry, I forgot who wrote this patch...

2000-04-02  carlo  <carlo@mrbig>

	* args.c, indent.h, io.c:
	New options -ut and -nut (--use-tabs, --no-tabs).

	Fixed a few bugs and added documentation for these options, starting
	of with a patch from Sean Cavanaugh.

	From: "Sean Cavanaugh" <sean@dimensionalrift.com>
	To: <indent@alinoe.com>
	Subject: indent 2.2.5 patch
	Date: Sat, 1 Apr 2000 15:31:21 -0800

	I recently pulled down indent 2.2.5 and was surprised to find it didn't have
	an option to convert tabs to spaces.  I've added a command line switch
	'-no-tabs' or '-nt' which lets you alter the default behavior.
	It is a pretty simple change, and handy for those of us who hate tabs :)

	- Sean

2000-03-23  carlo  <carlo@mrbig>

	* comments.c: Fixed -dN again (bug report by Marc Herbert)

2000-03-03  carlo  <carlo@mrbig>

	* indent.c, lexi.c: Compiler warning bug fix for 64-bit machines.

2000-03-01  carlo  <carlo@mrbig>

	* lexi.c: Date: Sat, 19 Feb 2000 10:30:17 -0700 (MST)
	From: "Nelson H. F. Beebe" <beebe@math.utah.edu>
	Subject: indent-2.2.5: a bug, and some compiler warnings
	To: indent@alinoe.com

	indent-2.2.5 and earlier incorrectly converts

	        int x = 2LU;

	to
	        int n = 2L U;

	causing subsequent compilation failures.  Curiously, the equivalent
	form 2UL is handled correctly.  However, Section 3.1.3.2 of ANSI
	X3.159-1989 clearly permits either order of the modifier letters.

	* io.c: Fixed a bug reported by David Hull <hull@paracel.com>.

2000-02-25  carlo  <carlo@mrbig>

	* io.c: From: "Sayre, Alan N" <Alan.N.Sayre@mcdermott.com>
	Subject: indent mods
	Date: Tue, 25 Jan 2000 07:36:00 -0600

	...
	I believe that the tests originated in MSDOS living in a 16-bit world.
	Ints are now 32-bit. (The code ran fine with this conditional
	removed). A more portable check would be to test the sizeof ints.
	...

	* backup.c: Date: Fri, 17 Dec 1999 17:52:32 -0500 (EST)
	From: Pavel Roskin <pavel_roskin@geocities.com>
	Subject: Yet two patches
	To: indent@runaway.xs4all.nl

	Hello!

	Since I'm hacking GNU Indent anyway...

	1) Using low-level I/O for backup files is not justified, decreases
	portability (especially create() and 0666) and may affect execution speed
	(since it's not buffered).
	backup.diff fixes it.

	2) Since GNU Indent has good chances to be portable across all platforms
	(especially after the above fix), it is a good idea to use AC_EXEEXT and
	AC_OBJEXT. Those macros are not very robust now, but they still simplify
	the life on DOS-derived OS'es.
	configure.diff adds them.

	Best wishes,
	Pavel Roskin

	* indent.c, io.c: Bug fix per suggestion by Igor Lyubashevskiy

	* comments.c:
	Bug reported by Wayne Green (-npls switch and c++ style comments)

2000-02-14  carlo  <carlo@mrbig>

	* comments.c: Date: Wed, 9 Feb 2000 17:55:55 -0600
	From: Robert Lipe <robertl@sco.com>
	Subject: patch for --cdb
	To: indent@alinoe.com

	Here is a patch to "fix" -cdb.   According to comments.c

	   `comment_delimiter_on_blankline' ("cdb"):  If set, place the comment
	       delimiters on lines by themselves.  This only affects comments
	       which are not to the right of code.

	Unfortunately, the code doesn't seem to successfully take the presence
	or absence of preceeding code into account.
	$ cat /tmp/x.c
	int foo; /* This is a single line comment */
	/* this is a column zero real single line comment */
	   /* this is elgible for cdb.  */
	$  ./indent -st -cdb /tmp/x.c
	int foo;                        /*
	                                   This is a single line comment
	                                 */
	/* this is a column zero real single line comment */
	   /*
	      this is elgible for cdb.
	    */


	With this patch installed, it returns:

	$  ./indent -st -cdb /tmp/x.c
	int foo;                        /* This is a single line comment */
	/* this is a column zero real single line comment */
	   /*
	      this is elgible for cdb.
	    */

	Though this specific example might look silly, it's very useful for
	cases where you're closing up a chain of loops and have

	                                        } /* loop of l */
	                                } /* loop of k */
	                        } /* loop of j */
	                } /* loop of i */

	* indent.c, io.c, lexi.h, parse.c:
	Hm, the DEBUG code should probably be removed, but until then: I fixed it.

2000-01-16  carlo  <carlo@mrbig>

	* io.c: Date: Thu, 16 Dec 1999 10:43:45 -0500 (EST)
	From: Pavel Roskin <pavel_roskin@geocities.com>
	Subject: Strange declaration alignment in C++

	...
	I have noticed that indent formats variable declarations quite differently
	in C functions and C++ methods. If the function name doesn't contain two
	colons, the variable names are placed on the same line and their types.
	...

	int
	qs ()
	{
	  int i;
	}

	int
	q::s ()
	{
	  int
	    i;
	}

	Date: Fri, 17 Dec 1999 12:33:34 -0500 (EST)
	From: Pavel Roskin <pavel_roskin@geocities.com>
	Subject: Strange declaration alignment in C++ - solved!

	The attached patch fixes the problem with variables in C++ methods.
	dumpline() used to compare "s_code_corresponds_to" with
	"parser_state_tos->procname"

1999-12-31  carlo  <carlo@mrbig>

	* indent.c: Don't join procedure declaration lines that ends on a '('
	when followed by a comment when --dont-break-procedure-type is used.
	Ie: int func( //    became  int func( // char* c)
	      char* c)              { }
	    { }

	* io.c, sys.h: Date: Mon, 29 Nov 1999 09:43:01 -0600
	From: forrest.cahoon@merrillcorp.com
	Support for VMS/DECC.

1999-11-17  carlo  <carlo@mrbig>

	* io.c: Date: Tue, 16 Nov 1999 22:59:44 -0000
	From: "ALAN BORER" <alan_borer@lineone.net>

	Because I am now using DJGPP to compile the code, I now get a 32 bit DPMI
	protected executable which is capable of processing files exceeding 64kByte.
	Would you please consider incorporating in file IO.C the following patch :-
	    replace each of two instances of    "#ifdef __MSDOS__"    with
	    "#if defined (__MSDOS__) && ! defined (__DJGPP__)".

	Regards
	    Alan Borer.

1999-11-12  carlo  <carlo@mrbig>

	* io.c:
	Prefer to break before __attribute__ over after a comma (which might
	be one paren level deeper even).

	* args.c, parse.c: Accept negative values for indent options.

	* parse.c: Date: Thu, 11 Nov 1999 00:23:59 -0000
	From: "ALAN BORER" <alan_borer@lineone.net>
	Subject: Indent Bug

	The code subject to a "case :" is indented relative to the case label UNLESS
	the option "-br" is asserted, in which case the code is indented relative to
	the "switch " instruction.
	I show below a screen dump illustrating this :-

	C:\t>indent t.c -st -npro -cli8
	switch (x)
	  {
	          case 1:
	            ++x;
	            break;
	  }

	C:\t>indent t.c -st -npro -cli8 -br
	switch (x) {
	        case 1:
	  ++x;
	  break;
	}

	* indent.c:
	Allow non-ANSI `switch(i) { /*...*/ default: }' (no statement after last
	case label).

1999-11-09  carlo  <carlo@mrbig>

	* indent.h, args.c, indent.c:
	New option --space-after-parentheses (-prs) by Emil LAURENTIU
	<emil@la.mine.nu>. Bug fixes in args.c and documentation update by me.

1999-11-04  carlo  <carlo@mrbig>

	* io.c:
	Bug fix: When the s_code buffer needed to be realloc-ed, bufbreak `ptr'
	were pointing into cyber space.  Now using an offset relative to the
	start of the buffer for the break points.

	* backup.c: Date: Sun, 24 Oct 1999 23:03:30 -0400
	From: "Chris F.A. Johnson" <bq933@torfree.net>
	Subject: "GNU indent"

	I have made a modification (included as the output of "diff -c" which
	allows zero padding of numbered backup suffixes, controled by an
	environment variable, VERSION_WIDTH.

	If the variable is set to a positive integer, that width will be used to
	zero-pad the backup suffix, e.g. if VERSION_WIDTH=2 the suffix would be
	~01~ instead of ~1~.

	This improves alphabetical listing (with ls or a file requestor) when
	there are more than 10 backup versions. It may sound like overkill, but
	I have my text editor set to create a numbered backup with every save,
	and often there are more than 10 (even 20 or 30).

	--

	two bug fixes and update of documentation by Carlo Wood

1999-10-30  carlo  <carlo@mrbig>

	* indent.c:
	Ignore requests for (extra) blank lines prior to #else, #elif and #endif.

1999-10-26  carlo  <carlo@mrbig>

	* comments.c, indent.c, parse.c:
	Removed a few compiler warnings (mostly unused variables) reported to me
	by Nelson H. F. Beebe.

	* indent.c:
	Fixed bug causing --braces-on-if-line not to put a '{' brace on the same
	line as a '}' automatically on the next line.  Bug reported by David Luyer.

1999-10-11  carlo  <carlo@mrbig>

	* indent.c:
	Treat #elif correctly. Thanks to Stuart Kemp for the bug report.

1999-10-10  carlo  <carlo@mrbig>

	* indent.c:
	indent didn't recognize "# else" and "# endif" for what they are due
	to the space(s). Thanks to Stuart Kemp for the bug report.

1999-09-30  carlo  <carlo@mrbig>

	* indent.c:
	Fixed bit fields - the "support" for public:/private:/protected: broke
	bits fields when another type then `int' was used.  Thanks to Simon Munton
	for the bug report!
	Also fixed public:/private:/protected: labels really now.

1999-09-28  carlo  <carlo@mrbig>

	* io.c, parse.c:
	Fixed a problem when indenting multiple files: the second and subsequent
	files specified on the command line had a blank line inserted at the top
	of the file when the previous file ended on a function definition.
	Thanks to Simon Munton for reporting this.

1999-09-03  carlo  <carlo@mrbig>

	* indent.c, lexi.c:
	The '(' in constructs like char a[(1)] = { ... }; caused block_init not
	to be set.

1999-08-27  carlo  <carlo@mrbig>

	* lexi.c, sys.h:
	EBCDIC charset support for BS2000/POSIX (Siemens mainframe OS).
	Contributed by <Martin.Kraemer@MchP.Siemens.De>.

	* args.c, indent.c, io.c, lexi.c: From: malekith@ikar.mps.com.pl
	Date: Thu, 26 Aug 1999 15:06:10 +0200 (CEST)
	To: indent@runaway.xs4all.nl
	Subject: Additional C++ support in indent (diff)

	What have I done?

	1. I removed -c++ arg check from indent.c, since it didn't work anyway (try)
	and put into args.c. I think you put it in indent.c because you wanted
	different set of options for C++, an I right? But for now ...

	2. In io.c I changed compute_label_target() func. Now if in_decl and
	c_plus_plus it returns one indent level back for labels, e.g.
	[...deleted...  this is still broken --Carlo ]

	3. I've added second set of keywords and hash func. This is in lexi.c.
	Lack of ``try'' keyword is intended. It caused errors (nested stmts or
	something). I couldn't handle this.

	4. Added recognizing GNU C++ >? and <? operators (and not documented >?= and
	<?=). It won't harm anyone since in normal C++ there can't be such
	combination of characters.

	5. I don't know why, but if colon is in_decl it is treated strange way.
	If c_plus_plus is set I changed this to handle ``public:'' and so on.

	Note from Carlo Wood:

	That is because in declarations you can have:

	  int foo:4;

	etc. In order to distinguish this from 'public:' etc, I am now
	testing for the 'i' (of the 'int') before treating the colon special.

1999-08-25  carlo  <carlo@mrbig>

	* io.c:
	Bug report by Darius Powell: When the parser sees a left brace it clears
	the procedure name out but not the classname ...

1999-08-07  carlo  <carlo@mrbig>

	* args.c, backup.c, backup.h, indent.c, indent.h, io.c, io.h, sys.h:
	New option --preserve-mtime: Preserve modification times on output files.
	Preserve modification times on backup files.  Thanks to Ian P. Springer
	for the idea.

1999-08-05  carlo  <carlo@mrbig>

	* lexi.c:
	enum bug also occurs with enum as function parameter.  Again, thanks
	to Simon Munton for the report.

1999-08-04  carlo  <carlo@mrbig>

	* lexi.c:
	Function returning enum bug fix.  Thanks to Simon Munton for the report.

	* globs.c: Don't include malloc.h if we don't have it.

1999-07-29  carlo  <carlo@mrbig>

	* indent.c: Make -bap work again.  Reported by Andy Cowling.

	* parse.c:
	Fixes a bug reported by George Kiewicz: struct X x = { M(int) };

	* args.c:
	Static is already zero. These zeros aren't even initialisation values anyway.

1999-07-22  carlo  <carlo@mrbig>

	* indent.c:
	Don't put a space after the "gettext" macro's '_' and 'N_', thanks to
	Akim Demaille for reporting this.

	* io.c, io.h, indent.c:
	Don't indent a broken line to the ind_dec column.

	* io.c, io.h: More bug fixes by Kaveh R. Ghazi

	* comments.c, indent.c, indent.h:
	Comments counting bug fix by Santiago Vila.
	Removed unused variable out_coms.

1999-07-17  carlo  <carlo@mrbig>

	* args.c, args.h, backup.c, backup.h, comments.c, comments.h, globs.c, globs.h, indent.c, indent.h, io.c, io.h, lexi.c, lexi.h, parse.c, parse.h, sys.h:
	Code formatting (run it through indent as well).

	* args.c, args.h, backup.c, backup.h, comments.c, comments.h, globs.c, globs.h, indent.c, indent.h, io.c, io.h, lexi.c, lexi.h, parse.c, parse.h, sys.h:
	Put a semicolon after the RCS macros: indent doesn't like when the semicolon
	is missing in the source file :/.

	* args.c, args.h, backup.c, backup.h, comments.c, comments.h, globs.c, globs.h, indent.c, indent.h, io.c, io.h, lexi.c, lexi.h, memcpy.c, parse.c, parse.h, sys.h:
	Added prototypes.
	De-ANSI-fied some inconsistent places.
	Removed memcpy.c.
	Should compile with a K&R compiler again now.

	Thanks to Kaveh R. Ghazi for report:

	        The following are some patches I needed to get indent-2.1.1
	working on SunOS4 using cc.  A couple of notes:

	1.  You may wish to use the AM_C_PROTOTYPES macro from automake-1.4.
	It'll define PROTOTYPES in config.h if they are available.  I had the
	test in sys.h check for it assuming you would use it when I defined
	the PARAMS macro to handle prototypes.

	2.  The way memcpy is handled seems like overkill.  You do
	AC_CHECK_FUNCS and define it to bcopy if not there.  You also call
	AC_REPLACE_FUNCS.  You also hard code including memcpy.c in the
	sources.  It seems to me that doing just the first check and defining
	it in sys.h is enough.  Get rid of the REPLACE check and the file
	memcpy.c file.

	3.  If you insist on prototyping free() for some reason, at least
	check whether the system already defines it for you.  I ran into
	conflicts with SunOS defining it to "extern int free()" and your
	source did "extern void free()" which bombed.  You can find various
	ways of doing this, egcs-1.1.2 has a NEED_DECLARATIONS check which
	works well.

	4.  If you insist on using ANSI style function definitions, you should
	do it everywhere and use automake's ansi2knr option for older systems.
	Until then, I un-ANSI-fied the inconsistent places where it appeared.

	* indent.c, indent.h, parse.c:
	Detect the `const' qualifier more reliable.
	Thanks to bug report by Lars Hecking.

1999-07-16  carlo  <carlo@mrbig>

	* sys.h:
	Don't combine memmove and memcpy detection: SunOS 4.1.4 doesn't have
	memmove, according to Nico Kadel-Garcia.

1999-07-09  carlo  <carlo@mrbig>

	* globs.c: Need to include <errno.h>, some OS define errno as macro.

	* io.c, sys.h:
	Renamed SYS_READ to INDENT_SYS_READ because of a name collision on HPUX.

1999-07-04  carlo  <carlo@mrbig>

	* indent.h, io.c, lexi.c, parse.c, indent.c:
	Added break points at non-spaces (after scope resolution operator,
	the global operator, member selection operators, and before subscripting,
	function calls and value constructions (all left brackets thus)).
	Also assigned a rough priority to them to keep the members of higher
	prioritized binary operators together.

1999-07-02  carlo  <carlo@mrbig>

	* indent.c:
	There is something very wrong with `flushed_nl' and how new-lines are
	handled.  Can't put my finger on it, so I wrote this kludge to fix one
	particular bug related to `else' and comments.

	* indent.c, indent.h, lexi.c, parse.c, args.c: Removed old option -ei.
	Fixed indentation problem broken `else if' lines.

1999-07-01  carlo  <carlo@mrbig>

	* io.c:
	set_next_buf_break(): Corrected errornous calculation of bb->col, which
	caused certain possible break points to be missed.

	* io.c:
	Break lines, that can not be broken before max_col, at the first possible
	break point.

	* indent.c, indent.h, io.c: Bug fix of initializer indentation.

1999-06-30  carlo  <carlo@mrbig>

	* indent.c: Bug fix.  Not sure why I added this in the first place :/.

	* indent.c, io.c:
	Don't output a blank line after an else when a comment follows.
	Don't break after a boolean operator if we just broke before it.

1999-06-26  carlo  <carlo@mrbig>

	* indent.c, io.c:
	Break long lines that are still too long after breaking the first time
	but caused dump_line to be called only after being read complete already:
	Don't reset `break_line' in `dump_line()' when a line is still too long.

1999-06-25  carlo  <carlo@mrbig>

	* args.c, indent.h, parse.c:
	Do not indent braces of struct, union and enum.
	New option --struct-brace-indentN to specify indentation.

	* args.c, comments.c, indent.c, indent.h, io.c, lexi.c, parse.c:
	Fixed breaking long lines.
	New options: --honour-newlines/--ignore-newlines and
	             --break-before-boolean-operators/--break-after-boolean-operators

1999-06-06  carlo  <carlo@mrbig>

	* comments.c:
	Let comments inside code always start in the column where code would start.

	* args.c, indent.c, indent.h, io.c:
	Removed every trace of '-troff' nonsense.

1999-06-05  carlo  <carlo@mrbig>

	* indent.c:
	Don't join a list list of comma seperated declarations that are on
	different lines in the input file when there is a comment following
	the comma.

	* comments.c, io.c: Fix indentation of comments in declarations.

	* backup.c: Bug fixes for VERSION_CONTROL=never|none.

	* indent.c:
	Always call dumpline() when we read a new-line and we already have a label
	or a preprocessor directive.

	* indent.c: Bug fix for __attribute__.

	* lexi.c: Bug fix for elipsis.

1999-06-04  carlo  <carlo@mrbig>

	* lexi.c: Bug fix: lexi() can be called with buf_ptr == buf_end!

	* comments.c:
	Increment input file line count for new-lines in comments too (Thanks to
	Simon Munton for reporting it).

1999-06-03  carlo  <carlo@mrbig>

	* backup.c, sys.h: USG is not used anymore.
	Handle AC_HEADER_DIRENT by the book (the autoconf manual).

	* comments.c, indent.c: Improved GDB_HOOK stuff.

1999-06-02  carlo  <carlo@mrbig>

	* indent.c:
	Regression/bug fix: Don't do a continuation indent after already indenting
	to column `dec_ind'.

	* args.c:
	Reordered the pro[] table(s) reverse alphabetically (and fixed a few
	bugs in it that didn't have any effect before this re-ordering).

1999-06-01  carlo  <carlo@mrbig>

	* indent.c, indent.h, io.c: Patch of indent.c revision 1.5 redone.
	Regression fix try two: Don't indent a procname when at start of a line.

	* indent.c, parse.c: Semi-automated generation of .gdbinit.
	Added WATCH hooks for the local variables of indent()
	and for parser_state_tos.

	* args.c: Ok, that was ONLY -nlps versus -nlp, AND two options of 1.10
	(-brs and -bls). And the way I fixed it broke the -T option.

	* args.c:
	Allow K&R compilers to compile indent, and allow to build in a different
	directory than the source directory. (Thanks to Kaveh R. Ghazi).

	* indent.c, indent.h, lexi.c, parse.c:
	Regression fix: Treat enum block as initialization block, but still DO
	the line breaks when braces_on_struct_decl_line not set.

1999-05-31  carlo  <carlo@mrbig>

	* args.c:
	Version 2.0 bug fix : Recognize options that start with the same sequence
	as other, shorter options (ie, -nlps <--> -nlp).

	* indent.c:
	Regression fix: Don't indent a procname when at start of a line.

1999-05-30  carlo  <carlo@mrbig>

	* io.c:
	Regression fix: Don't indent a procname when at start of a line.

	* indent.c, lexi.c:
	Regression fix related to indentation in enums and in struct initializers.

1999-05-29  carlo  <carlo@mrbig>

	* lexi.c, parse.c:
	Indent braced block on enum too (equiv. to a struct).

	* indent.h: Typo in comment.

	* io.c, lexi.c, memcpy.c, parse.c, args.c, backup.c, comments.c, globs.c, indent.c:
	Merged in all source changes from version 2.0.

	* sys.h: Added definitions of RCSTAG_CC and RCSTAG_H.

	* backup.h, indent.h, sys.h: Merged in the changes from version 2.0.

1999-05-26  carlo  <carlo@mrbig>

	* lexi.c, parse.c, args.c, comments.c, indent.c, indent.h, io.c:
	Applied my "old" patch (the 'beta1' patch):
	New options: --braces-after-struct-decl-line, --braces-on-struct-decl-line,
	             --case-brace-indentationN and --paren-indentationN.
	LOTS of bug fixes - unfortunately I forgot what all not.  But I bet that
	if you had indentation problems, chances are it WILL be fixed now.

1999-05-22  carlo  <carlo@mrbig>

	* lexi.c: Removed source code generated by gperf from repository.

1999-05-21  carlo  <carlo@mrbig>

	* args.c, sys.h, version.h:
	Added the rest of the automake/makeproto build environment.

1999-05-20  carlo  <carlo@mrbig>

	* args.c, backup.c, backup.h, comments.c, globs.c, indent.h, lexi.c, memcpy.c, parse.c, sys.h, version.h:
	Initial import of version 1.9.1

	* args.c, backup.c, backup.h, comments.c, globs.c, indent.h, lexi.c, memcpy.c, parse.c, sys.h, version.h:
	New file.

	* indent.c, io.c: Initial import of version 1.9.1

	* indent.c, io.c: New file.

