This is tar.info, produced by makeinfo version 4.2 from tar.texi.

START-INFO-DIR-ENTRY
* tar: (tar).			Making tape (or disk) archives.
END-INFO-DIR-ENTRY

   This file documents GNU `tar', a utility used to store, backup, and
transport files.

   Copyright (C) 1992, 1994, 1995, 1996, 1997, 1999 Free Software
Foundation, Inc.

   Permission is granted to make and distribute verbatim copies of this
manual provided the copyright notice and this permission notice are
preserved on all copies.

   Permission is granted to copy and distribute modified versions of
this manual under the conditions for verbatim copying, provided that
the entire resulting derived work is distributed under the terms of a
permission notice identical to this one.

   Permission is granted to copy and distribute translations of this
manual into another language, under the above conditions for modified
versions, except that this permission notice may be stated in a
translation approved by the Foundation.

   This file documents GNU `tar', which is a utility used to store,
backup, and transport files.  `tar' is a tape (or disk) archiver.  This
manual documents the release 1.13.


File: tar.info,  Node: extract dir,  Next: failing commands,  Prev: extracting files,  Up: extract

Extracting Files that are Directories
-------------------------------------

   Extracting directories which are members of an archive is similar to
extracting other files.  The main difference to be aware of is that if
the extracted directory has the same name as any directory already in
the working directory, then files in the extracted directory will be
placed into the directory of the same name.  Likewise, if there are
files in the pre-existing directory with the same names as the members
which you extract, the files from the extracted archive will overwrite
the files already in the working directory (and possible
subdirectories).  This will happen regardless of whether or not the
files in the working directory were more recent than those extracted.

   However, if a file was stored with a directory name as part of its
file name, and that directory does not exist under the working
directory when the file is extracted, `tar' will create the directory.

   We can demonstrate how to use `--extract' to extract a directory
file with an example.  Change to the `practice' directory if you
weren't there, and remove the files `folk' and `jazz'.  Then, go back
to the parent directory and extract the archive `music.tar'.  You may
either extract the entire archive, or you may extract only the files
you just deleted.  To extract the entire archive, don't give any file
names as arguments after the archive name `music.tar'.  To extract only
the files you deleted, use the following command:

     $ tar -xvf music.tar practice/folk practice/jazz

Because you created the directory with `practice' as part of the file
names of each of the files by archiving the `practice' directory as
`practice', you must give `practice' as part of the file names when you
extract those files from the archive.


File: tar.info,  Node: failing commands,  Prev: extract dir,  Up: extract

Commands That Will Fail
-----------------------

   Here are some sample commands you might try which will not work, and
why they won't work.

   If you try to use this command,

     $ tar -xvf music.tar folk jazz

you will get the following response:

     tar: folk: Not found in archive
     tar: jazz: Not found in archive
     $

This is because these files were not originally _in_ the parent
directory `..', where the archive is located; they were in the
`practice' directory, and their file names reflect this:

     $ tar -tvf music.tar
     practice/folk
     practice/jazz
     practice/rock

Likewise, if you try to use this command,

     $ tar -tvf music.tar folk jazz

you would get a similar response.  Members with those names are not in
the archive.  You must use the correct member names in order to extract
the files from the archive.

   If you have forgotten the correct names of the files in the archive,
use `tar --list --verbose' to list them correctly.


File: tar.info,  Node: going further,  Prev: extract,  Up: Tutorial

Going Further Ahead in this Manual
==================================


File: tar.info,  Node: tar invocation,  Next: operations,  Prev: Tutorial,  Up: Top

Invoking GNU `tar'
******************

     _(This message will disappear, once this node revised.)_

   This chapter is about how one invokes the GNU `tar' command, from
the command synopsis (*note Synopsis::).  There are numerous options,
and many styles for writing them.  One mandatory option specifies the
operation `tar' should perform (*note Operation Summary::), other
options are meant to detail how this operation should be performed
(*note Option Summary::).  Non-option arguments are not always
interpreted the same way, depending on what the operation is.

   You will find in this chapter everything about option styles and
rules for writing them (*note Styles::).  On the other hand, operations
and options are fully described elsewhere, in other chapters.  Here,
you will find only synthetic descriptions for operations and options,
together with pointers to other parts of the `tar' manual.

   Some options are so special they are fully described right in this
chapter.  They have the effect of inhibiting the normal operation of
`tar' or else, they globally alter the amount of feedback the user
receives about what is going on.  These are the `--help' and
`--version' (*note help::), `--verbose' (`-v') (*note verbose::) and
`--interactive' (`-w') options (*note interactive::).

* Menu:

* Synopsis::
* using tar options::
* Styles::
* All Options::
* help::
* verbose::
* interactive::


File: tar.info,  Node: Synopsis,  Next: using tar options,  Prev: tar invocation,  Up: tar invocation

General Synopsis of `tar'
=========================

   The GNU `tar' program is invoked as either one of:

     tar OPTION... [NAME]...
     tar LETTER... [ARGUMENT]... [OPTION]... [NAME]...

   The second form is for when old options are being used.

   You can use `tar' to store files in an archive, to extract them from
an archive, and to do other types of archive manipulation.  The primary
argument to `tar', which is called the "operation", specifies which
action to take.  The other arguments to `tar' are either "options",
which change the way `tar' performs an operation, or file names or
archive members, which specify the files or members `tar' is to act on.

   You can actually type in arguments in any order, even if in this
manual the options always precede the other arguments, to make examples
easier to understand.  Further, the option stating the main operation
mode (the `tar' main command) is usually given first.

   Each NAME in the synopsis above is interpreted as an archive member
name when the main command is one of `--compare' (`--diff', `-d'),
`--delete', `--extract' (`--get', `-x'), `--list' (`-t') or `--update'
(`-u').  When naming archive members, you must give the exact name of
the member in the archive, as it is printed by `--list' (`-t').  For
`--append' (`-r') and `--create' (`-c'), these NAME arguments specify
the names of either files or directory hierarchies to place in the
archive.  These files or hierarchies should already exist in the file
system, prior to the execution of the `tar' command.

   `tar' interprets relative file names as being relative to the
working directory.  `tar' will make all file names relative (by
removing leading slashes when archiving or restoring files), unless you
specify otherwise (using the `--absolute-names' (`-P') option).
*Note absolute::, for more information about `--absolute-names' (`-P').

   If you give the name of a directory as either a file name or a member
name, then `tar' acts recursively on all the files and directories
beneath that directory.  For example, the name `/' identifies all the
files in the filesystem to `tar'.

   The distinction between file names and archive member names is
especially important when shell globbing is used, and sometimes a
source of confusion for newcomers.  *Note Wildcards::, for more
information about globbing.  The problem is that shells may only glob
using existing files in the file system.  Only `tar' itself may glob on
archive members, so when needed, you must ensure that wildcard
characters reach `tar' without being interpreted by the shell first.
Using a backslash before `*' or `?', or putting the whole argument
between quotes, is usually sufficient for this.

   Even if NAMEs are often specified on the command line, they can also
be read from a text file in the file system, using the
`--files-from=FILE-OF-NAMES' (`-T FILE-OF-NAMES') option.

   If you don't use any file name arguments, `--append' (`-r'),
`--delete' and `--concatenate' (`--catenate', `-A') will do nothing,
while `--create' (`-c') will usually yield a diagnostic and inhibit
`tar' execution.  The other operations of `tar' (`--list' (`-t'),
`--extract' (`--get', `-x'), `--compare' (`--diff', `-d'), and
`--update' (`-u')) will act on the entire contents of the archive.

   Besides successful exits, GNU `tar' may fail for many reasons.  Some
reasons correspond to bad usage, that is, when the `tar' command is
improperly written.  Errors may be encountered later, while
encountering an error processing the archive or the files.  Some errors
are recoverable, in which case the failure is delayed until `tar' has
completed all its work.  Some errors are such that it would not
meaningful, or at least risky, to continue processing: `tar' then aborts
processing immediately.  All abnormal exits, whether immediate or
delayed, should always be clearly diagnosed on `stderr', after a line
stating the nature of the error.

   GNU `tar' returns only a few exit statuses.  I'm really aiming
simplicity in that area, for now.  If you are not using the `--compare'
(`--diff', `-d') option, zero means that everything went well, besides
maybe innocuous warnings.  Nonzero means that something went wrong.
Right now, as of today, "nonzero" is almost always 2, except for remote
operations, where it may be 128.


File: tar.info,  Node: using tar options,  Next: Styles,  Prev: Synopsis,  Up: tar invocation

Using `tar' Options
===================

   GNU `tar' has a total of eight operating modes which allow you to
perform a variety of tasks.  You are required to choose one operating
mode each time you employ the `tar' program by specifying one, and only
one operation as an argument to the `tar' command (two lists of four
operations each may be found at *Note frequent operations:: and *Note
Operations::).  Depending on circumstances, you may also wish to
customize how the chosen operating mode behaves.  For example, you may
wish to change the way the output looks, or the format of the files that
you wish to archive may require you to do something special in order to
make the archive look right.

   You can customize and control `tar''s performance by running `tar'
with one or more options (such as `--verbose' (`-v'), which we used in
the tutorial).  As we said in the tutorial, "options" are arguments to
`tar' which are (as their name suggests) optional.  Depending on the
operating mode, you may specify one or more options.  Different options
will have different effects, but in general they all change details of
the operation, such as archive format, archive name, or level of user
interaction.  Some options make sense with all operating modes, while
others are meaningful only with particular modes.  You will likely use
some options frequently, while you will only use others infrequently,
or not at all.  (A full list of options is available in *note All
Options::.)

   Note that `tar' options are case sensitive.  For example, the
options `-T' and `-t' are different; the first requires an argument for
stating the name of a file providing a list of NAMEs, while the second
does not require an argument and is another way to write `--list'
(`-t').

   In addition to the eight operations, there are many options to
`tar', and three different styles for writing both: long (mnemonic)
form, short form, and old style.  These styles are discussed below.
Both the options and the operations can be written in any of these three
styles.


File: tar.info,  Node: Styles,  Next: All Options,  Prev: using tar options,  Up: tar invocation

The Three Option Styles
=======================

   There are three styles for writing operations and options to the
command line invoking `tar'.  The different styles were developed at
different times during the history of `tar'.  These styles will be
presented below, from the most recent to the oldest.

   Some options must take an argument.  (For example,
`--file=ARCHIVE-NAME' (`-f ARCHIVE-NAME') takes the name of an archive
file as an argument.  If you do not supply an archive file name, `tar'
will use a default, but this can be confusing; thus, we recommend that
you always supply a specific archive file name.)  Where you _place_ the
arguments generally depends on which style of options you choose.  We
will detail specific information relevant to each option style in the
sections on the different option styles, below.  The differences are
subtle, yet can often be very important; incorrect option placement can
cause you to overwrite a number of important files.  We urge you to
note these differences, and only use the option style(s) which makes
the most sense to you until you feel comfortable with the others.

* Menu:

* Mnemonic Options::            Mnemonic Option Style
* Short Options::               Short Option Style
* Old Options::                 Old Option Style
* Mixing::                      Mixing Option Styles


File: tar.info,  Node: Mnemonic Options,  Next: Short Options,  Prev: Styles,  Up: Styles

Mnemonic Option Style
---------------------

   Each option has at least one long (or mnemonic) name starting with
two dashes in a row, e.g. `list'.  The long names are more clear than
their corresponding short or old names.  It sometimes happens that a
single mnemonic option has many different different names which are
synonymous, such as `--compare' and `--diff'.  In addition, long option
names can be given unique abbreviations.  For example, `--cre' can be
used in place of `--create' because there is no other mnemonic option
which begins with `cre'.  (One way to find this out is by trying it and
seeing what happens; if a particular abbreviation could represent more
than one option, `tar' will tell you that that abbreviation is
ambiguous and you'll know that that abbreviation won't work.  You may
also choose to run `tar --help' to see a list of options.  Be aware
that if you run `tar' with a unique abbreviation for the long name of
an option you didn't want to use, you are stuck; `tar' will perform the
command as ordered.)

   Mnemonic options are meant to be obvious and easy to remember, and
their meanings are generally easier to discern than those of their
corresponding short options (see below).  For example:

     $ tar --create --verbose --blocking-factor=20 --file=/dev/rmt0

gives a fairly good set of hints about what the command does, even for
those not fully acquainted with `tar'.

   Mnemonic options which require arguments take those arguments
immediately following the option name; they are introduced by an equal
sign.  For example, the `--file' option (which tells the name of the
`tar' archive) is given a file such as `archive.tar' as argument by
using the notation `--file=archive.tar' for the mnemonic option.


File: tar.info,  Node: Short Options,  Next: Old Options,  Prev: Mnemonic Options,  Up: Styles

Short Option Style
------------------

   Most options also have a short option name.  Short options start with
a single dash, and are followed by a single character, e.g. `-t' (which
is equivalent to `--list').  The forms are absolutely identical in
function; they are interchangeable.

   The short option names are faster to type than long option names.

   Short options which require arguments take their arguments
immediately following the option, usually separated by white space.  It
is also possible to stick the argument right after the short option
name, using no intervening space.  For example, you might write
`-f archive.tar' or `-farchive.tar' instead of using
`--file=archive.tar'.  Both `--file=ARCHIVE-NAME' and `-f ARCHIVE-NAME'
denote the option which indicates a specific archive, here named
`archive.tar'.

   Short options' letters may be clumped together, but you are not
required to do this (as compared to old options; see below).  When short
options are clumped as a set, use one (single) dash for them all, e.g.
``tar' -cvf'.  Only the last option in such a set is allowed to have an
argument(1).

   When the options are separated, the argument for each option which
requires an argument directly follows that option, as is usual for Unix
programs.  For example:

     $ tar -c -v -b 20 -f /dev/rmt0

   If you reorder short options' locations, be sure to move any
arguments that belong to them.  If you do not move the arguments
properly, you may end up overwriting files.

   ---------- Footnotes ----------

   (1) Clustering many options, the last of which has an argument, is a
rather opaque way to write options.  Some wonder if GNU `getopt' should
not even be made helpful enough for considering such usages as invalid.


File: tar.info,  Node: Old Options,  Next: Mixing,  Prev: Short Options,  Up: Styles

Old Option Style
----------------

     _(This message will disappear, once this node revised.)_

   Like short options, old options are single letters.  However, old
options must be written together as a single clumped set, without
spaces separating them or dashes preceding them(1).  This set of
letters must be the first to appear on the command line, after the
`tar' program name and some whitespace; old options cannot appear
anywhere else.  The letter of an old option is exactly the same letter
as the corresponding short option.  For example, the old option `t' is
the same as the short option `-t', and consequently, the same as the
mnemonic option `--list'.  So for example, the command `tar cv'
specifies the option `-v' in addition to the operation `-c'.

   When options that need arguments are given together with the command,
all the associated arguments follow, in the same order as the options.
Thus, the example given previously could also be written in the old
style as follows:

     $ tar cvbf 20 /dev/rmt0

Here, `20' is the argument of `-b' and `/dev/rmt0' is the argument of
`-f'.

   On the other hand, this old style syntax makes it difficult to match
option letters with their corresponding arguments, and is often
confusing.  In the command `tar cvbf 20 /dev/rmt0', for example, `20'
is the argument for `-b', `/dev/rmt0' is the argument for `-f', and
`-v' does not have a corresponding argument.  Even using short options
like in `tar -c -v -b 20 -f /dev/rmt0' is clearer, putting all
arguments next to the option they pertain to.

   If you want to reorder the letters in the old option argument, be
sure to reorder any corresponding argument appropriately.

   This old way of writing `tar' options can surprise even experienced
users.  For example, the two commands:

     tar cfz archive.tar.gz file
     tar -cfz archive.tar.gz file

are quite different.  The first example uses `archive.tar.gz' as the
value for option `f' and recognizes the option `z'.  The second
example, however, uses `z' as the value for option `f'--probably not
what was intended.

   Old options are kept for compatibility with old versions of `tar'.

   This second example could be corrected in many ways, among which the
following are equivalent:

     tar -czf archive.tar.gz file
     tar -cf archive.tar.gz -z file
     tar cf archive.tar.gz -z file

   As far as we know, all `tar' programs, GNU and non-GNU, support old
options.  GNU `tar' supports them not only for historical reasons, but
also because many people are used to them.  For compatibility with Unix
`tar', the first argument is always treated as containing command and
option letters even if it doesn't start with `-'.  Thus, `tar c' is
equivalent to `tar -c': both of them specify the `--create' (`-c')
command to create an archive.

   ---------- Footnotes ----------

   (1) Beware that if you precede options with a dash, you are
announcing the short option style instead of the old option style;
short options are decoded differently.


File: tar.info,  Node: Mixing,  Prev: Old Options,  Up: Styles

Mixing Option Styles
--------------------

   All three styles may be intermixed in a single `tar' command, so
long as the rules for each style are fully respected(1).  Old style
options and either of the modern styles of options may be mixed within
a single `tar' command.  However, old style options must be introduced
as the first arguments only, following the rule for old options (old
options must appear directly after the `tar' command and some
whitespace).  Modern options may be given only after all arguments to
the old options have been collected.  If this rule is not respected, a
modern option might be falsely interpreted as the value of the argument
to one of the old style options.

   For example, all the following commands are wholly equivalent, and
illustrate the many combinations and orderings of option styles.

     tar --create --file=archive.tar
     tar --create -f archive.tar
     tar --create -farchive.tar
     tar --file=archive.tar --create
     tar --file=archive.tar -c
     tar -c --file=archive.tar
     tar -c -f archive.tar
     tar -c -farchive.tar
     tar -cf archive.tar
     tar -cfarchive.tar
     tar -f archive.tar --create
     tar -f archive.tar -c
     tar -farchive.tar --create
     tar -farchive.tar -c
     tar c --file=archive.tar
     tar c -f archive.tar
     tar c -farchive.tar
     tar cf archive.tar
     tar f archive.tar --create
     tar f archive.tar -c
     tar fc archive.tar

   On the other hand, the following commands are _not_ equivalent to
the previous set:

     tar -f -c archive.tar
     tar -fc archive.tar
     tar -fcarchive.tar
     tar -farchive.tarc
     tar cfarchive.tar

These last examples mean something completely different from what the
user intended (judging based on the example in the previous set which
uses long options, whose intent is therefore very clear).  The first
four specify that the `tar' archive would be a file named `-c', `c',
`carchive.tar' or `archive.tarc', respectively.  The first two examples
also specify a single non-option, NAME argument having the value
`archive.tar'.  The last example contains only old style option letters
(repeating option `c' twice), not all of which are meaningful (eg., `.',
`h', or `i'), with no argument value.

   ---------- Footnotes ----------

   (1) Before GNU `tar' version 1.11.6, a bug prevented intermixing old
style options with mnemonic options in some cases.


File: tar.info,  Node: All Options,  Next: help,  Prev: Styles,  Up: tar invocation

All `tar' Options
=================

   The coming manual sections contain an alphabetical listing of all
`tar' operations and options, with brief descriptions and cross
references to more in-depth explanations in the body of the manual.
They also contain an alphabetically arranged table of the short option
forms with their corresponding long option.  You can use this table as
a reference for deciphering `tar' commands in scripts.

* Menu:

* Operation Summary::
* Option Summary::
* Short Option Summary::


File: tar.info,  Node: Operation Summary,  Next: Option Summary,  Prev: All Options,  Up: All Options

Operations
----------

`--append'
`-r'
     Appends files to the end of the archive.  *Note append::.

`--catenate'
`-A'
     Same as `--concatenate'.  *Note concatenate::.

`--compare'
`-d'
     Compares archive members with their counterparts in the file
     system, and reports differences in file size, mode, owner,
     modification date and contents.  *Note compare::.

`--concatenate'
`-A'
     Appends other `tar' archives to the end of the archive.  *Note
     concatenate::.

`--create'
`-c'
     Creates a new `tar' archive.  *Note create::.

`--delete'
     Deletes members from the archive.  Don't try this on a archive on a
     tape!  *Note delete::.

`--diff'
`-d'
     Same `--compare'.  *Note compare::.

`--extract'
`-x'
     Extracts members from the archive into the file system.  *Note
     extract::.

`--get'
`-x'
     Same as `--extract'.   *Note extract::.

`--list'
`-t'
     Lists the members in an archive.  *Note list::.

`--update'
`-u'
     Adds files to the end of the archive, but only if they are newer
     than their counterparts already in the archive, or if they do not
     already exist in the archive.  *Note update::.


File: tar.info,  Node: Option Summary,  Next: Short Option Summary,  Prev: Operation Summary,  Up: All Options

`tar' Options
-------------

`--absolute-names'
`-P'
     Normally when creating an archive, `tar' strips an initial `/' from
     member names.  This option disables that behavior.  .

`--after-date'
     (See `--newer'; .)

`--atime-preserve'
     Tells `tar' to preserve the access time field in a file's inode
     when dumping it.  .

`--backup=BACKUP-TYPE'
     Rather than deleting files from the file system, `tar' will back
     them up using simple or numbered backups, depending upon
     BACKUP-TYPE.  .

`--block-number'
`-R'
     With this option present, `tar' prints error messages for read
     errors with the block number in the archive file.  .

`--blocking-factor=BLOCKING'
`-b BLOCKING'
     Sets the blocking factor `tar' uses to BLOCKING x 512 bytes per
     record.  .

`--checkpoint'
     This option directs `tar' to print periodic checkpoint messages as
     it reads through the archive.  Its intended for when you want a
     visual indication that `tar' is still running, but don't want to
     see `--verbose' output.  .

`--compress'
`--uncompress'
`-Z'
     `tar' will use the `compress' program when reading or writing the
     archive.  This allows you to directly act on archives while saving
     space.  .

`--confirmation'
     (See `--interactive';  .)

`--dereference'
`-h'
     When creating a `tar' archive, `tar' will archive the file that a
     symbolic link points to, rather than archiving the symlink.  .

`--directory=DIR'
`-C DIR'
     When this option is specified, `tar' will change its current
     directory to DIR before performing any operations.  When this
     option is used during archive creation, it is order sensitive.  .

`--exclude=PATTERN'
     When performing operations, `tar' will skip files that match
     PATTERN.  .

`--exclude-from=FILE'
`-X FILE'
     Similar to `--exclude', except `tar' will use the list of patterns
     in the file FILE.  .

`--file=ARCHIVE'
`-f ARCHIVE'
     `tar' will use the file ARCHIVE as the `tar' archive it performs
     operations on, rather than `tar''s compilation dependent default.
     .

`--files-from=FILE'
`-T FILE'
     `tar' will use the contents of FILE as a list of archive members
     or files to operate on, in addition to those specified on the
     command-line.  .

`--force-local'
     Forces `tar' to interpret the filename given to `--file' as a local
     file, even if it looks like a remote tape drive name.  .

`--group=GROUP'
     Files added to the `tar' archive will have a group id of GROUP,
     rather than the group from the source file.  GROUP is first decoded
     as a group symbolic name, but if this interpretation fails, it has
     to be a decimal numeric group ID.  .

     Also see the comments for the `--owner=USER' option.

`--gunzip'
     (See `--gzip'; .)

`--gzip'
`--gunzip'
`--ungzip'
`-z'
     This option tells `tar' to read or write archives through `gzip',
     allowing `tar' to directly operate on several kinds of compressed
     archives transparently.  .

`--help'
     `tar' will print out a short message summarizing the operations and
     options to `tar' and exit.  .

`--ignore-failed-read'
     Instructs `tar' to exit successfully if it encounters an
     unreadable file.  *Note Reading::.

`--ignore-umask'
     (See `--preserve-permissions'; *note Writing::.)

`--ignore-zeros'
`-i'
     With this option, `tar' will ignore zeroed blocks in the archive,
     which normally signals EOF.  *Note Reading::.

`--incremental'
`-G'
     Used to inform `tar' that it is working with an  old GNU-format
     incremental backup archive.  It is intended primarily for backwards
     compatibility only.  .

`--info-script=SCRIPT-FILE'
`--new-volume-script=SCRIPT-FILE'
`-F SCRIPT-FILE'
     When `tar' is performing multi-tape backups, SCRIPT-FILE is run at
     the end of each tape.  .

`--interactive'
`--confirmation'
`-w'
     Specifies that `tar' should ask the user for confirmation before
     performing potentially destructive options, such as overwriting
     files.  .

`--keep-old-files'
`-k'
     When extracting files from an archive, `tar' will not overwrite
     existing files if this option is present.  *Note Writing::.

`--label=NAME'
`-V NAME'
     When creating an archive, instructs `tar' to write NAME as a name
     record in the archive.  When extracting or listing archives, `tar'
     will only operate on archives that have a label matching the
     pattern specified in NAME.  .

`--listed-incremental=SNAPSHOT-FILE'
`-g SNAPSHOT-FILE'
     During a `--create' operation, specifies that the archive that
     `tar' creates is a new GNU-format incremental backup, using
     SNAPSHOT-FILE to determine which files to backup.  With other
     operations, informs `tar' that the archive is in incremental
     format.  .

`--mode=PERMISSIONS'
     When adding files to an archive, `tar' will use PERMISSIONS for
     the archive members, rather than the permissions from the files.
     The program `chmod' and this `tar' option share the same syntax
     for what PERMISSIONS might be.  *Note Permissions:
     (filetutils)File permissions.  This reference also has useful
     information for those not being overly familiar with the Unix
     permission system.

     Of course, PERMISSIONS might be plainly specified as an octal
     number.  However, by using generic symbolic modifications to mode
     bits, this allows more flexibility.  For example, the value `a+rw'
     adds read and write permissions for everybody, while retaining
     executable bits on directories or on any other file already marked
     as executable.

`--multi-volume'
`-M'
     Informs `tar' that it should create or otherwise operate on a
     multi-volume `tar' archive.  .

`--new-volume-script'
     (see -info-script)

`--newer=DATE'
`--after-date=DATE'
`-N'
     When creating an archive, `tar' will only add files that have
     changed since DATE.  .

`--newer-mtime'
     In conjunction with `--newer', `tar' will only add files whose
     contents have changed (as opposed to just `--newer', which will
     also back up files for which any status information has changed).

`--no-recursion'
     With this option, `tar' will not recurse into directories unless a
     directory is explicitly named as an argument to `tar'.  .

`--null'
     When `tar' is using the `--files-from' option, this option
     instructs `tar' to expect filenames terminated with `NUL', so
     `tar' can correctly work with file names that contain newlines.  .

`--numeric-owner'
     This option will notify `tar' that it should use numeric user and
     group IDs when creating a `tar' file, rather than names.  .

`--old-archive'
     (See `--portability'; .)

`--one-file-system'
`-l'
     Used when creating an archive.  Prevents `tar' from recursing into
     directories that are on different file systems from the current
     directory.  .

`--owner=USER'
     Specifies that `tar' should use USER as the owner of members when
     creating archives, instead of the user associated with the source
     file.  USER is first decoded as a user symbolic name, but if this
     interpretation fails, it has to be a decimal numeric user ID.  .

     There is no value indicating a missing number, and `0' usually
     means `root'.  Some people like to force `0' as the value to offer
     in their distributions for the owner of files, because the `root'
     user is anonymous anyway, so that might as well be the owner of
     anonymous archives.

`--portability'
`--old-archive'
`-o'
     Tells `tar' to create an archive that is compatible with Unix V7
     `tar'.  .

`--posix'
     Instructs `tar' to create a POSIX compliant `tar' archive.  .

`--preserve'
     Synonymous with specifying both `--preserve-permissions' and
     `--same-order'.  .

`--preserve-order'
     (See `--same-order'; *note Reading::.)

`--preserve-permissions'
`--same-permissions'
`-p'
     When `tar' is extracting an archive, it normally subtracts the
     users' umask from the permissions specified in the archive and
     uses that number as the permissions to create the destination
     file.  Specifying this option instructs `tar' that it should use
     the permissions directly from the archive.  *Note Writing::.

`--read-full-records'
`-B'
     Specifies that `tar' should reblock its input, for reading from
     pipes on systems with buggy implementations.  *Note Reading::.

`--record-size=SIZE'
     Instructs `tar' to use SIZE bytes per record when accessing the
     archive.  .

`--recursive-unlink'
     Similar to the `--unlink-first' option, removing existing
     directory hierarchies before extracting directories of the same
     name from the archive.  *Note Writing::.

`--remove-files'
     Directs `tar' to remove the source file from the file system after
     appending it to an archive.  .

`--rsh-command=CMD'
     Notifies `tar' that is should use CMD to communicate with remote
     devices.  .

`--same-order'
`--preserve-order'
`-s'
     This option is an optimization for `tar' when running on machines
     with small amounts of memory.  It informs `tar' that the list of
     file arguments has already been sorted to match the order of files
     in the archive.  *Note Reading::.

`--same-owner'
     When extracting an archive, `tar' will attempt to preserve the
     owner specified in the `tar' archive with this option present.  .

`--same-permissions'
     (See `--preserve-permissions'; *note Writing::.)

`--show-omitted-dirs'
     Instructs `tar' to mention directories its skipping over when
     operating on a `tar' archive.  .

`--sparse'
`-S'
     Invokes a GNU extension when adding files to an archive that
     handles sparse files efficiently.  .

`--starting-file=NAME'
`-K NAME'
     This option affects extraction only; `tar' will skip extracting
     files in the archive until it finds one that matches NAME.  *Note
     Scarce::.

`--suffix=SUFFIX'
     Alters the suffix `tar' uses when backing up files from the default
     `~'.  .

`--tape-length=NUM'
`-L NUM'
     Specifies the length of tapes that `tar' is writing as being
     NUM x 1024 bytes long.  .

`--to-stdout'
`-O'
     During extraction, `tar' will extract files to stdout rather than
     to the file system.  *Note Writing::.

`--totals'
     Displays the total number of bytes written after creating an
     archive.  .

`--touch'
`-m'
     Sets the modification time of extracted files to the extraction
     time, rather than the modification time stored in the archive.
     *Note Writing::.

`--uncompress'
     (See `--compress'; .)

`--ungzip'
     (See `--gzip'; .)

`--unlink-first'
`-U'
     Directs `tar' to remove the corresponding file from the file system
     before extracting it from the archive.  *Note Writing::.

`--use-compress-program=PROG'
     Instructs `tar' to access the archive through PROG, which is
     presumed to be a compression program of some sort.  .

`--verbose'
`-v'
     Specifies that `tar' should be more verbose about the operations
     its performing.  This option can be specified multiple times for
     some operations to increase the amount of information displayed.  .

`--verify'
`-W'
     Verifies that the archive was correctly written when creating an
     archive.  .

`--version'
     `tar' will print an informational message about what version it is
     and a copyright message, some credits, and then exit.  .

`--volno-file=FILE'
     Used in conjunction with `--multi-volume'.  `tar' will keep track
     of which volume of a multi-volume archive its working in FILE.  .


File: tar.info,  Node: Short Option Summary,  Prev: Option Summary,  Up: All Options

Short Options Cross Reference
-----------------------------

   Here is an alphabetized list of all of the short option forms,
matching them with the equivalent long option.

`-A'
     `--concatenate'

`-B'
     `--read-full-records'

`-C'
     `--directory'

`-F'
     `--info-script'

`-G'
     `--incremental'

`-K'
     `--starting-file'

`-L'
     `--tape-length'

`-M'
     `--multi-volume'

`-N'
     `--newer'

`-O'
     `--to-stdout'

`-P'
     `--absolute-names'

`-R'
     `--block-number'

`-S'
     `--sparse'

`-T'
     `--files-from'

`-U'
     `--unlink-first'

`-V'
     `--label'

`-W'
     `--verify'

`-X'
     `--exclude-from'

`-Z'
     `--compress'

`-b'
     `--blocking-factor'

`-c'
     `--create'

`-d'
     `--compare'

`-f'
     `--file'

`-g'
     `--listed-incremental'

`-h'
     `--dereference'

`-i'
     `--ignore-zeros'

`-k'
     `--keep-old-files'

`-l'
     `--one-file-system'

`-m'
     `--touch'

`-o'
     `--portability'

`-p'
     `--preserve-permissions'

`-r'
     `--append'

`-s'
     `--same-order'

`-t'
     `--list'

`-u'
     `--update'

`-v'
     `--verbose'

`-w'
     `--interactive'

`-x'
     `--extract'

`-z'
     `--gzip'


File: tar.info,  Node: help,  Next: verbose,  Prev: All Options,  Up: tar invocation

GNU `tar' documentation
=======================

   Being careful, the first thing is really checking that you are using
GNU `tar', indeed.  The `--version' option will generate a message
giving confirmation that you are using GNU `tar', with the precise
version of GNU `tar' you are using.  `tar' identifies itself and prints
the version number to the standard output, then immediately exits
successfully, without doing anything else, ignoring all other options.
For example, `tar --version' might return:

     tar (GNU tar) 1.13

The first occurrence of `tar' in the result above is the program name
in the package (for example, `rmt' is another program), while the
second occurrence of `tar' is the name of the package itself,
containing possibly many programs.  The package is currently named
`tar', after the name of the main program it contains(1).

   Another thing you might want to do is checking the spelling or
meaning of some particular `tar' option, without resorting to this
manual, for once you have carefully read it.  GNU `tar' has a short help
feature, triggerable through the `--help' option.  By using this
option, `tar' will print a usage message listing all available options
on standard output, then exit successfully, without doing anything else
and ignoring all other options.  Even if this is only a brief summary,
it may be several screens long.  So, if you are not using some kind of
scrollable window, you might prefer to use something like:

     $ tar --help | less

presuming, here, that you like using `less' for a pager.  Other popular
pagers are `more' and `pg'.  If you know about some KEYWORD which
interests you and do not want to read all the `--help' output, another
common idiom is doing:

     tar --help | grep KEYWORD

for getting only the pertinent lines.

   The perceptive reader would have noticed some contradiction in the
previous paragraphs.  It is written that both `--version' and `--help'
print something, and have all other options ignored.  In fact, they
cannot ignore each other, and one of them has to win.  We do not
specify which is stronger, here; experiment if you really wonder!

   The short help output is quite succint, and you might have to get
back to the full documentation for precise points.  If you are reading
this paragraph, you already have the `tar' manual in some form.  This
manual is available in printed form, as a kind of small book.  It may
printed out of the GNU `tar' distribution, provided you have TeX
already installed somewhere, and a laser printer around.  Just configure
the distribution, execute the command `make dvi', then print
`doc/tar.dvi' the usual way (contact your local guru to know how).  If
GNU `tar' has been conveniently installed at your place, this manual is
also available in interactive, hypertextual form as an Info file.  Just
call `info tar' or, if you do not have the `info' program handy, use
the Info reader provided within GNU Emacs, calling `tar' from the main
Info menu.

   There is currently no `man' page for GNU `tar'.  If you observe such
a `man' page on the system you are running, either it does not long to
GNU `tar', or it has not been produced by GNU.  Currently, GNU `tar'
documentation is provided in Texinfo format only, if we except, of
course, the short result of `tar --help'.

   ---------- Footnotes ----------

   (1) There are plans to merge the `cpio' and `tar' packages into a
single one which would be called `paxutils'.  So, who knows if, one of
this days, the `--version' would not yield `tar (GNU paxutils) 3.2'


File: tar.info,  Node: verbose,  Next: interactive,  Prev: help,  Up: tar invocation

Checking `tar' progress
=======================

   Typically, `tar' performs most operations without reporting any
information to the user except error messages.  When using `tar' with
many options, particularly ones with complicated or
difficult-to-predict behavior, it is possible to make serious mistakes.
`tar' provides several options that make observing `tar' easier.  These
options cause `tar' to print information as it progresses in its job,
and you might want to use them just for being more careful about what
is going on, or merely for entertaining yourself.  If you have
encountered a problem when operating on an archive, however, you may
need more information than just an error message in order to solve the
problem.  The following options can be helpful diagnostic tools.

   Normally, the `--list' (`-t') command to list an archive prints just
the file names (one per line) and the other commands are silent.  When
used with most operations, the `--verbose' (`-v') option causes `tar'
to print the name of each file or archive member as it is processed.
This and the other options which make `tar' print status information
can be useful in monitoring `tar'.

   With `--create' (`-c') or `--extract' (`--get', `-x'), `--verbose'
(`-v') used once just prints the names of the files or members as they
are processed.  Using it twice causes `tar' to print a longer listing
(reminiscent of `ls -l') for each member.  Since `--list' (`-t')
already prints the names of the members, `--verbose' (`-v') used once
with `--list' (`-t') causes `tar' to print an `ls -l' type listing of
the files in the archive.  The following examples both extract members
with long list output:

     $ tar --extract --file=archive.tar --verbose --verbose
     $ tar xvv archive.tar

   Verbose output appears on the standard output except when an archive
is being written to the standard output, as with `tar --create --file=-
--verbose' (`tar cfv -', or even `tar cv'--if the installer let
standard output be the default archive).  In that case `tar' writes
verbose output to the standard error stream.

   The `--totals' option--which is only meaningful when used with
`--create' (`-c')--causes `tar' to print the total amount written to
the archive, after it has been fully created.

   The `--checkpoint' option prints an occasional message as `tar'
reads or writes the archive.  In fact, it print directory names while
reading the archive.  It is designed for those who don't need the more
detailed (and voluminous) output of `--block-number' (`-R'), but do
want visual confirmation that `tar' is actually making forward progress.

   The `--show-omitted-dirs' option, when reading an archive--with
`--list' (`-t') or `--extract' (`--get', `-x'), for example--causes a
message to be printed for each directory in the archive which is
skipped.  This happens regardless of the reason for skipping: the
directory might not have been named on the command line (implicitly or
explicitly), it might be excluded by the use of the `--exclude=PATTERN'
option, or some other reason.

   If `--block-number' (`-R') is used, `tar' prints, along with every
message it would normally produce, the block number within the archive
where the message was triggered.  Also, supplementary messages are
triggered when reading blocks full of NULs, or when hitting end of file
on the archive.  As of now, if the archive if properly terminated with
a NUL block, the reading of the file may stop before end of file is
met, so the position of end of file will not usually show when
`--block-number' (`-R') is used.  Note that GNU `tar' drains the
archive before exiting when reading the archive from a pipe.

   This option is especially useful when reading damaged archives, since
it helps pinpoint the damaged sections.  It can also be used with
`--list' (`-t') when listing a file-system backup tape, allowing you to
choose among several backup tapes when retrieving a file later, in
favor of the tape where the file appears earliest (closest to the front
of the tape).  .


File: tar.info,  Node: interactive,  Prev: verbose,  Up: tar invocation

Asking for Confirmation During Operations
=========================================

   Typically, `tar' carries out a command without stopping for further
instructions.  In some situations however, you may want to exclude some
files and archive members from the operation (for instance if disk or
storage space is tight).  You can do this by excluding certain files
automatically (*note Choosing::), or by performing an operation
interactively, using the `--interactive' (`-w') option.  `tar' also
accepts `--confirmation' for this option.

   When the `--interactive' (`-w') option is specified, before reading,
writing, or deleting files, `tar' first prints a message for each such
file, telling what operation it intends to take, then asks for
confirmation on the terminal.  The actions which require confirmation
include adding a file to the archive, extracting a file from the
archive, deleting a file from the archive, and deleting a file from
disk.  To confirm the action, you must type a line of input beginning
with `y'.  If your input line begins with anything other than `y',
`tar' skips that file.

   If `tar' is reading the archive from the standard input, `tar' opens
the file `/dev/tty' to support the interactive communications.

   Verbose output is normally sent to standard output, separate from
other error messages.  However, if the archive is produced directly on
standard output, then verbose output is mixed with errors on `stderr'.
Producing the archive on standard output may be used as a way to avoid
using disk space, when the archive is soon to be consumed by another
process reading it, say.  Some people felt the need of producing an
archive on stdout, still willing to segregate between verbose output
and error output.  A possible approach would be using a named pipe to
receive the archive, and having the consumer process to read from that
named pipe.  This has the advantage of letting standard output free to
receive verbose output, all separate from errors.


File: tar.info,  Node: operations,  Next: Backups,  Prev: tar invocation,  Up: Top

GNU `tar' Operations
********************

* Menu:

* Basic tar::
* Advanced tar::
* extract options::
* backup::
* Applications::
* looking ahead::

