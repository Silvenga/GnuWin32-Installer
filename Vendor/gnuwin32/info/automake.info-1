This is automake.info, produced by makeinfo version 4.7 from
automake.texi.

   This manual is for GNU Automake (version 1.9.4, 18 December 2004), a
program which creates GNU standards-compliant Makefiles from template
files.

   Copyright (C) 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003,
2004 Free Software Foundation, Inc.

     Permission is granted to copy, distribute and/or modify this
     document under the terms of the GNU Free Documentation License,
     Version 1.2 or any later version published by the Free Software
     Foundation; with no Invariant Sections, with the Front-Cover texts
     being "A GNU Manual," and with the Back-Cover Texts as in (a)
     below.  A copy of the license is included in the section entitled
     "GNU Free Documentation License."

     (a) The FSF's Back-Cover Text is: "You have freedom to copy and
     modify this GNU Manual, like GNU software.  Copies published by
     the Free Software Foundation raise funds for GNU development."

INFO-DIR-SECTION Software development
START-INFO-DIR-ENTRY
* automake: (automake).         Making Makefile.in's.
END-INFO-DIR-ENTRY

INFO-DIR-SECTION Individual utilities
START-INFO-DIR-ENTRY
* aclocal: (automake)Invoking aclocal.          Generating aclocal.m4.
END-INFO-DIR-ENTRY


File: automake.info,  Node: Top,  Next: Introduction,  Up: (dir)

GNU Automake
************

This manual is for GNU Automake (version 1.9.4, 18 December 2004), a
program which creates GNU standards-compliant Makefiles from template
files.

   Copyright (C) 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003,
2004 Free Software Foundation, Inc.

     Permission is granted to copy, distribute and/or modify this
     document under the terms of the GNU Free Documentation License,
     Version 1.2 or any later version published by the Free Software
     Foundation; with no Invariant Sections, with the Front-Cover texts
     being "A GNU Manual," and with the Back-Cover Texts as in (a)
     below.  A copy of the license is included in the section entitled
     "GNU Free Documentation License."

     (a) The FSF's Back-Cover Text is: "You have freedom to copy and
     modify this GNU Manual, like GNU software.  Copies published by
     the Free Software Foundation raise funds for GNU development."

* Menu:

* Introduction::                Automake's purpose
* Generalities::                General ideas
* Examples::                    Some example packages
* Invoking Automake::           Creating a Makefile.in
* configure::                   Scanning configure.ac or configure.in
* Directories::                 Declaring subdirectories
* Programs::                    Building programs and libraries
* Other objects::               Other derived objects
* Other GNU Tools::             Other GNU Tools
* Documentation::               Building documentation
* Install::                     What gets installed
* Clean::                       What gets cleaned
* Dist::                        What goes in a distribution
* Tests::                       Support for test suites
* Rebuilding::                  Automatic rebuilding of Makefile
* Options::                     Changing Automake's behavior
* Miscellaneous::               Miscellaneous rules
* Include::                     Including extra files in an Automake template.
* Conditionals::                Conditionals
* Gnits::                       The effect of `--gnu' and `--gnits'
* Cygnus::                      The effect of `--cygnus'
* Not Enough::                  When Automake is not Enough
* Distributing::                Distributing the Makefile.in
* API versioning::              About compatibility between Automake versions
* Upgrading::                   Upgrading to a Newer Automake Version
* FAQ::                         Frequently Asked Questions
* History::                     Notes about the history of Automake
* Copying This Manual::         How to make copies of this manual
* Indices::                     Indices of variables, macros, and concepts

 --- The Detailed Node Listing ---

General ideas

* General Operation::           General operation of Automake
* Strictness::                  Standards conformance checking
* Uniform::                     The Uniform Naming Scheme
* Canonicalization::            How derived variables are named
* User Variables::              Variables reserved for the user
* Auxiliary Programs::          Programs automake might require

Some example packages

* Complete::                    A simple example, start to finish
* Hello::                       A classic program
* true::                        Building true and false

Scanning `configure.ac'

* Requirements::                Configuration requirements
* Optional::                    Other things Automake recognizes
* Invoking aclocal::            Auto-generating aclocal.m4
* aclocal options::             aclocal command line arguments
* Macro search path::           Modifying aclocal's search path
* Macros::                      Autoconf macros supplied with Automake
* Extending aclocal::           Writing your own aclocal macros
* Local Macros::                Organizing local macros
* Future of aclocal::           aclocal's scheduled death

Auto-generating aclocal.m4

* aclocal options::             Options supported by aclocal
* Macro search path::           How aclocal finds .m4 files

Autoconf macros supplied with Automake

* Public macros::               Macros that you can use.
* Private macros::              Macros that you should not use.

Directories

* Subdirectories::              Building subdirectories recursively
* Conditional Subdirectories::  Conditionally not building directories
* Alternative::                 Subdirectories without recursion
* Subpackages::                 Nesting packages

Building Programs and Libraries

* A Program::                   Building a program
* A Library::                   Building a library
* A Shared Library::            Building a Libtool library
* Program and Library Variables::  Variables controlling program and
                                library builds
* Default _SOURCES::            Default source files
* LIBOBJS::                     Special handling for LIBOBJS and ALLOCA
* Program variables::           Variables used when building a program
* Yacc and Lex::                Yacc and Lex support
* C++ Support::                 Compiling C++ sources
* Assembly Support::            Compiling assembly sources
* Fortran 77 Support::          Compiling Fortran 77 sources
* Fortran 9x Support::          Compiling Fortran 9x sources
* Java Support::                Compiling Java sources
* Support for Other Languages::  Compiling other languages
* ANSI::                        Automatic de-ANSI-fication
* Dependencies::                Automatic dependency tracking
* EXEEXT::                      Support for executable extensions

Building a program

* Program Sources::             Defining program sources
* Linking::                     Linking with libraries or extra objects
* Conditional Sources::         Handling conditional sources
* Conditional Programs::        Building program conditionally

Building a Shared Library

* Libtool Concept::             Introducing Libtool
* Libtool Libraries::           Declaring Libtool Libraries
* Conditional Libtool Libraries::  Building Libtool Libraries Conditionally
* Conditional Libtool Sources::  Choosing Library Sources Conditionally
* Libtool Convenience Libraries::  Building Convenience Libtool Libraries
* Libtool Modules::             Building Libtool Modules
* Libtool Flags::               Using _LIBADD and _LDFLAGS
* LTLIBOBJS::                   Using $(LTLIBOBJS) and $(LTALLOCA)
* Libtool Issues::              Common Issues Related to Libtool's Use

Fortran 77 Support

* Preprocessing Fortran 77::    Preprocessing Fortran 77 sources
* Compiling Fortran 77 Files::  Compiling Fortran 77 sources
* Mixing Fortran 77 With C and C++::  Mixing Fortran 77 With C and C++

Mixing Fortran 77 With C and C++

* How the Linker is Chosen::    Automatic linker selection

Fortran 9x Support

* Compiling Fortran 9x Files::  Compiling Fortran 9x sources

Other Derived Objects

* Scripts::                     Executable scripts
* Headers::                     Header files
* Data::                        Architecture-independent data files
* Sources::                     Derived sources

Built sources

* Built sources example::       Several ways to handle built sources.

Other GNU Tools

* Emacs Lisp::                  Emacs Lisp
* gettext::                     Gettext
* Libtool::                     Libtool
* Java::                        Java
* Python::                      Python

Building documentation

* Texinfo::                     Texinfo
* Man pages::                   Man pages

Miscellaneous Rules

* Tags::                        Interfacing to etags and mkid
* Suffixes::                    Handling new file extensions
* Multilibs::                   Support for multilibs.

When Automake Isn't Enough

* Extending::                   Adding new rules or overriding existing ones.
* Third-Party Makefiles::       Integrating Non-Automake `Makefile's.

Frequently Asked Questions about Automake

* CVS::                         CVS and generated files
* maintainer-mode::             missing and AM_MAINTAINER_MODE
* wildcards::                   Why doesn't Automake support wildcards?
* distcleancheck::              Files left in build directory after distclean
* Flag Variables Ordering::     CFLAGS vs. AM_CFLAGS vs. mumble_CFLAGS
* renamed objects::             Why are object files sometimes renamed?
* Per-Object Flags::            How to simulate per-object flags?
* Multiple Outputs::            Writing rules for tools with many output files

History of Automake

* Timeline::                    The Automake story.
* Dependency Tracking Evolution::  Evolution of Automatic Dependency Tracking
* Releases::                    Statistics about Automake Releases

Copying This Manual

* GNU Free Documentation License::  License for copying this manual

Indices

* Macro Index::                 Index of Autoconf macros
* Variable Index::              Index of Makefile variables
* General Index::               General index


File: automake.info,  Node: Introduction,  Next: Generalities,  Prev: Top,  Up: Top

1 Introduction
**************

Automake is a tool for automatically generating `Makefile.in's from
files called `Makefile.am'.  Each `Makefile.am' is basically a series
of `make' variable definitions(1), with rules being thrown in
occasionally.  The generated `Makefile.in's are compliant with the GNU
Makefile standards.

   The GNU Makefile Standards Document (*note Makefile Conventions:
(standards)Makefile Conventions.)  is long, complicated, and subject to
change.  The goal of Automake is to remove the burden of Makefile
maintenance from the back of the individual GNU maintainer (and put it
on the back of the Automake maintainer).

   The typical Automake input file is simply a series of variable
definitions.  Each such file is processed to create a `Makefile.in'.
There should generally be one `Makefile.am' per directory of a project.

   Automake does constrain a project in certain ways; for instance it
assumes that the project uses Autoconf (*note Introduction:
(autoconf)Top.), and enforces certain restrictions on the
`configure.ac' contents(2).

   Automake requires `perl' in order to generate the `Makefile.in's.
However, the distributions created by Automake are fully GNU
standards-compliant, and do not require `perl' in order to be built.

   Mail suggestions and bug reports for Automake to
<bug-automake@gnu.org>.

   ---------- Footnotes ----------

   (1) These variables are also called "make macros" in Make
terminology, however in this manual we reserve the term "macro" for
Autoconf's macros.

   (2) Older Autoconf versions used `configure.in'.  Autoconf 2.50 and
greater promotes `configure.ac' over `configure.in'.  The rest of this
documentation will refer to `configure.ac', but Automake also supports
`configure.in' for backward compatibility.


File: automake.info,  Node: Generalities,  Next: Examples,  Prev: Introduction,  Up: Top

2 General ideas
***************

The following sections cover a few basic ideas that will help you
understand how Automake works.

* Menu:

* General Operation::           General operation of Automake
* Strictness::                  Standards conformance checking
* Uniform::                     The Uniform Naming Scheme
* Canonicalization::            How derived variables are named
* User Variables::              Variables reserved for the user
* Auxiliary Programs::          Programs automake might require


File: automake.info,  Node: General Operation,  Next: Strictness,  Up: Generalities

2.1 General Operation
=====================

Automake works by reading a `Makefile.am' and generating a
`Makefile.in'.  Certain variables and rules defined in the
`Makefile.am' instruct Automake to generate more specialized code; for
instance, a `bin_PROGRAMS' variable definition will cause rules for
compiling and linking programs to be generated.

   The variable definitions and rules in the `Makefile.am' are copied
verbatim into the generated file.  This allows you to add arbitrary
code into the generated `Makefile.in'.  For instance the Automake
distribution includes a non-standard rule for the `cvs-dist' target,
which the Automake maintainer uses to make distributions from his
source control system.

   Note that most GNU make extensions are not recognized by Automake.
Using such extensions in a `Makefile.am' will lead to errors or
confusing behavior.

   A special exception is that the GNU make append operator, `+=', is
supported.  This operator appends its right hand argument to the
variable specified on the left.  Automake will translate the operator
into an ordinary `=' operator; `+=' will thus work with any make
program.

   Automake tries to keep comments grouped with any adjoining rules or
variable definitions.

   A rule defined in `Makefile.am' generally overrides any such rule of
a similar name that would be automatically generated by `automake'.
Although this is a supported feature, it is generally best to avoid
making use of it, as sometimes the generated rules are very particular.

   Similarly, a variable defined in `Makefile.am' or `AC_SUBST''ed from
`configure.ac' will override any definition of the variable that
`automake' would ordinarily create.  This feature is more often useful
than the ability to override a rule.  Be warned that many of the
variables generated by `automake' are considered to be for internal use
only, and their names might change in future releases.

   When examining a variable definition, Automake will recursively
examine variables referenced in the definition.  For example, if
Automake is looking at the content of `foo_SOURCES' in this snippet

     xs = a.c b.c
     foo_SOURCES = c.c $(xs)

   it would use the files `a.c', `b.c', and `c.c' as the contents of
`foo_SOURCES'.

   Automake also allows a form of comment which is _not_ copied into
the output; all lines beginning with `##' (leading spaces allowed) are
completely ignored by Automake.

   It is customary to make the first line of `Makefile.am' read:

     ## Process this file with automake to produce Makefile.in


File: automake.info,  Node: Strictness,  Next: Uniform,  Prev: General Operation,  Up: Generalities

2.2 Strictness
==============

While Automake is intended to be used by maintainers of GNU packages, it
does make some effort to accommodate those who wish to use it, but do
not want to use all the GNU conventions.

   To this end, Automake supports three levels of "strictness"--the
strictness indicating how stringently Automake should check standards
conformance.

   The valid strictness levels are:

`foreign'
     Automake will check for only those things which are absolutely
     required for proper operations.  For instance, whereas GNU
     standards dictate the existence of a `NEWS' file, it will not be
     required in this mode.  The name comes from the fact that Automake
     is intended to be used for GNU programs; these relaxed rules are
     not the standard mode of operation.

`gnu'
     Automake will check--as much as possible--for compliance to the GNU
     standards for packages.  This is the default.

`gnits'
     Automake will check for compliance to the as-yet-unwritten "Gnits
     standards".  These are based on the GNU standards, but are even
     more detailed.  Unless you are a Gnits standards contributor, it is
     recommended that you avoid this option until such time as the Gnits
     standard is actually published (which may never happen).

   For more information on the precise implications of the strictness
level, see *Note Gnits::.

   Automake also has a special "cygnus" mode which is similar to
strictness but handled differently.  This mode is useful for packages
which are put into a "Cygnus" style tree (e.g., the GCC tree).  For
more information on this mode, see *Note Cygnus::.


File: automake.info,  Node: Uniform,  Next: Canonicalization,  Prev: Strictness,  Up: Generalities

2.3 The Uniform Naming Scheme
=============================

Automake variables generally follow a "uniform naming scheme" that
makes it easy to decide how programs (and other derived objects) are
built, and how they are installed.  This scheme also supports
`configure' time determination of what should be built.

   At `make' time, certain variables are used to determine which
objects are to be built.  The variable names are made of several pieces
which are concatenated together.

   The piece which tells automake what is being built is commonly called
the "primary".  For instance, the primary `PROGRAMS' holds a list of
programs which are to be compiled and linked.  

   A different set of names is used to decide where the built objects
should be installed.  These names are prefixes to the primary which
indicate which standard directory should be used as the installation
directory.  The standard directory names are given in the GNU standards
(*note Directory Variables: (standards)Directory Variables.).  Automake
extends this list with `pkglibdir', `pkgincludedir', and `pkgdatadir';
these are the same as the non-`pkg' versions, but with `$(PACKAGE)'
appended.  For instance, `pkglibdir' is defined as
`$(libdir)/$(PACKAGE)'.

   For each primary, there is one additional variable named by
prepending `EXTRA_' to the primary name.  This variable is used to list
objects which may or may not be built, depending on what `configure'
decides.  This variable is required because Automake must statically
know the entire list of objects that may be built in order to generate
a `Makefile.in' that will work in all cases.

   For instance, `cpio' decides at configure time which programs are
built.  Some of the programs are installed in `bindir', and some are
installed in `sbindir':

     EXTRA_PROGRAMS = mt rmt
     bin_PROGRAMS = cpio pax
     sbin_PROGRAMS = $(MORE_PROGRAMS)

   Defining a primary without a prefix as a variable, e.g., `PROGRAMS',
is an error.

   Note that the common `dir' suffix is left off when constructing the
variable names; thus one writes `bin_PROGRAMS' and not
`bindir_PROGRAMS'.

   Not every sort of object can be installed in every directory.
Automake will flag those attempts it finds in error.  Automake will
also diagnose obvious misspellings in directory names.

   Sometimes the standard directories--even as augmented by Automake--
are not enough.  In particular it is sometimes useful, for clarity, to
install objects in a subdirectory of some predefined directory.  To this
end, Automake allows you to extend the list of possible installation
directories.  A given prefix (e.g. `zar') is valid if a variable of the
same name with `dir' appended is defined (e.g. `zardir').

   For instance, installation of HTML files is part of Automake, you
could use this to install raw HTML documentation:

     htmldir = $(prefix)/html
     html_DATA = automake.html

   The special prefix `noinst' indicates that the objects in question
should be built but not installed at all.  This is usually used for
objects required to build the rest of your package, for instance static
libraries (*note A Library::), or helper scripts.

   The special prefix `check' indicates that the objects in question
should not be built until the `make check' command is run.  Those
objects are not installed either.

   The current primary names are `PROGRAMS', `LIBRARIES', `LISP',
`PYTHON', `JAVA', `SCRIPTS', `DATA', `HEADERS', `MANS', and `TEXINFOS'.  

   Some primaries also allow additional prefixes which control other
aspects of `automake''s behavior.  The currently defined prefixes are
`dist_', `nodist_', and `nobase_'.  These prefixes are explained later
(*note Program and Library Variables::).


File: automake.info,  Node: Canonicalization,  Next: User Variables,  Prev: Uniform,  Up: Generalities

2.4 How derived variables are named
===================================

Sometimes a Makefile variable name is derived from some text the
maintainer supplies.  For instance, a program name listed in
`_PROGRAMS' is rewritten into the name of a `_SOURCES' variable.  In
cases like this, Automake canonicalizes the text, so that program names
and the like do not have to follow Makefile variable naming rules.  All
characters in the name except for letters, numbers, the strudel (@),
and the underscore are turned into underscores when making variable
references.

   For example, if your program is named `sniff-glue', the derived
variable name would be `sniff_glue_SOURCES', not `sniff-glue_SOURCES'.
Similarly the sources for a library named `libmumble++.a' should be
listed in the `libmumble___a_SOURCES' variable.

   The strudel is an addition, to make the use of Autoconf
substitutions in variable names less obfuscating.


File: automake.info,  Node: User Variables,  Next: Auxiliary Programs,  Prev: Canonicalization,  Up: Generalities

2.5 Variables reserved for the user
===================================

Some `Makefile' variables are reserved by the GNU Coding Standards for
the use of the "user" - the person building the package.  For instance,
`CFLAGS' is one such variable.

   Sometimes package developers are tempted to set user variables such
as `CFLAGS' because it appears to make their job easier.  However, the
package itself should never set a user variable, particularly not to
include switches which are required for proper compilation of the
package.  Since these variables are documented as being for the package
builder, that person rightfully expects to be able to override any of
these variables at build time.

   To get around this problem, automake introduces an automake-specific
shadow variable for each user flag variable.  (Shadow variables are not
introduced for variables like `CC', where they would make no sense.)
The shadow variable is named by prepending `AM_' to the user variable's
name.  For instance, the shadow variable for `YFLAGS' is `AM_YFLAGS'.

   *Note Flag Variables Ordering::, for more discussion about these
variables and how they interact with per-target variables.


File: automake.info,  Node: Auxiliary Programs,  Prev: User Variables,  Up: Generalities

2.6 Programs automake might require
===================================

Automake sometimes requires helper programs so that the generated
`Makefile' can do its work properly.  There are a fairly large number
of them, and we list them here.

`ansi2knr.c'
`ansi2knr.1'
     These two files are used by the automatic de-ANSI-fication support
     (*note ANSI::).

`compile'
     This is a wrapper for compilers which don't accept both `-c' and
     `-o' at the same time.  It is only used when absolutely required.
     Such compilers are rare.

`config.guess'
`config.sub'
     These programs compute the canonical triplets for the given build,
     host, or target architecture.  These programs are updated
     regularly to support new architectures and fix probes broken by
     changes in new kernel versions.  You are encouraged to fetch the
     latest versions of these files from
     `ftp://ftp.gnu.org/gnu/config/' before making a release.

`depcomp'
     This program understands how to run a compiler so that it will
     generate not only the desired output but also dependency
     information which is then used by the automatic dependency
     tracking feature.

`elisp-comp'
     This program is used to byte-compile Emacs Lisp code.

`install-sh'
     This is a replacement for the `install' program which works on
     platforms where `install' is unavailable or unusable.

`mdate-sh'
     This script is used to generate a `version.texi' file.  It examines
     a file and prints some date information about it.

`missing'
     This wraps a number of programs which are typically only required
     by maintainers.  If the program in question doesn't exist,
     `missing' prints an informative warning and attempts to fix things
     so that the build can continue.

`mkinstalldirs'
     This script used to be a wrapper around `mkdir -p', which is not
     portable.  Now we use prefer to use `install-sh -d' when configure
     finds that `mkdir -p' does not work, this makes one less script to
     distribute.

     For backward compatibility `mkinstalldirs' is still used and
     distributed when `automake' finds it in a package.  But it is no
     longer installed automatically, and it should be safe to remove it.

`py-compile'
     This is used to byte-compile Python scripts.

`texinfo.tex'
     Not a program, this file is required for `make dvi', `make ps' and
     `make pdf' to work when Texinfo sources are in the package.

`ylwrap'
     This program wraps `lex' and `yacc' and ensures that, for
     instance, multiple `yacc' instances can be invoked in a single
     directory in parallel.



File: automake.info,  Node: Examples,  Next: Invoking Automake,  Prev: Generalities,  Up: Top

3 Some example packages
***********************

* Menu:

* Complete::                    A simple example, start to finish
* Hello::                       A classic program
* true::                        Building true and false


File: automake.info,  Node: Complete,  Next: Hello,  Up: Examples

3.1 A simple example, start to finish
=====================================

Let's suppose you just finished writing `zardoz', a program to make
your head float from vortex to vortex.  You've been using Autoconf to
provide a portability framework, but your `Makefile.in's have been
ad-hoc.  You want to make them bulletproof, so you turn to Automake.

   The first step is to update your `configure.ac' to include the
commands that `automake' needs.  The way to do this is to add an
`AM_INIT_AUTOMAKE' call just after `AC_INIT':

     AC_INIT(zardoz, 1.0)
     AM_INIT_AUTOMAKE
     ...

   Since your program doesn't have any complicating factors (e.g., it
doesn't use `gettext', it doesn't want to build a shared library),
you're done with this part.  That was easy!

   Now you must regenerate `configure'.  But to do that, you'll need to
tell `autoconf' how to find the new macro you've used.  The easiest way
to do this is to use the `aclocal' program to generate your
`aclocal.m4' for you.  But wait... maybe you already have an
`aclocal.m4', because you had to write some hairy macros for your
program.  The `aclocal' program lets you put your own macros into
`acinclude.m4', so simply rename and then run:

     mv aclocal.m4 acinclude.m4
     aclocal
     autoconf

   Now it is time to write your `Makefile.am' for `zardoz'.  Since
`zardoz' is a user program, you want to install it where the rest of
the user programs go: `bindir'.  Additionally, `zardoz' has some
Texinfo documentation.  Your `configure.ac' script uses
`AC_REPLACE_FUNCS', so you need to link against `$(LIBOBJS)'.  So
here's what you'd write:

     bin_PROGRAMS = zardoz
     zardoz_SOURCES = main.c head.c float.c vortex9.c gun.c
     zardoz_LDADD = $(LIBOBJS)

     info_TEXINFOS = zardoz.texi

   Now you can run `automake --add-missing' to generate your
`Makefile.in' and grab any auxiliary files you might need, and you're
done!


File: automake.info,  Node: Hello,  Next: true,  Prev: Complete,  Up: Examples

3.2 A classic program
=====================

GNU hello (ftp://prep.ai.mit.edu/pub/gnu/hello-1.3.tar.gz) is renowned
for its classic simplicity and versatility.  This section shows how
Automake could be used with the GNU Hello package.  The examples below
are from the latest beta version of GNU Hello, but with all of the
maintainer-only code stripped out, as well as all copyright comments.

   Of course, GNU Hello is somewhat more featureful than your
traditional two-liner.  GNU Hello is internationalized, does option
processing, and has a manual and a test suite.

   Here is the `configure.ac' from GNU Hello.  *Please note:* The calls
to `AC_INIT' and `AM_INIT_AUTOMAKE' in this example use a deprecated
syntax.  For the current approach, see the description of
`AM_INIT_AUTOMAKE' in *Note Public macros::.

     dnl Process this file with autoconf to produce a configure script.
     AC_INIT(src/hello.c)
     AM_INIT_AUTOMAKE(hello, 1.3.11)
     AM_CONFIG_HEADER(config.h)

     dnl Set of available languages.
     ALL_LINGUAS="de fr es ko nl no pl pt sl sv"

     dnl Checks for programs.
     AC_PROG_CC
     AC_ISC_POSIX

     dnl Checks for libraries.

     dnl Checks for header files.
     AC_STDC_HEADERS
     AC_HAVE_HEADERS(string.h fcntl.h sys/file.h sys/param.h)

     dnl Checks for library functions.
     AC_FUNC_ALLOCA

     dnl Check for st_blksize in struct stat
     AC_ST_BLKSIZE

     dnl internationalization macros
     AM_GNU_GETTEXT
     AC_OUTPUT([Makefile doc/Makefile intl/Makefile po/Makefile.in \
                src/Makefile tests/Makefile tests/hello],
        [chmod +x tests/hello])

   The `AM_' macros are provided by Automake (or the Gettext library);
the rest are standard Autoconf macros.

   The top-level `Makefile.am':

     EXTRA_DIST = BUGS ChangeLog.O
     SUBDIRS = doc intl po src tests

   As you can see, all the work here is really done in subdirectories.

   The `po' and `intl' directories are automatically generated using
`gettextize'; they will not be discussed here.

   In `doc/Makefile.am' we see:

     info_TEXINFOS = hello.texi
     hello_TEXINFOS = gpl.texi

   This is sufficient to build, install, and distribute the GNU Hello
manual.

   Here is `tests/Makefile.am':

     TESTS = hello
     EXTRA_DIST = hello.in testdata

   The script `hello' is generated by `configure', and is the only test
case.  `make check' will run this test.

   Last we have `src/Makefile.am', where all the real work is done:

     bin_PROGRAMS = hello
     hello_SOURCES = hello.c version.c getopt.c getopt1.c getopt.h system.h
     hello_LDADD = $(INTLLIBS) $(ALLOCA)
     localedir = $(datadir)/locale
     INCLUDES = -I../intl -DLOCALEDIR=\"$(localedir)\"


File: automake.info,  Node: true,  Prev: Hello,  Up: Examples

3.3 Building true and false
===========================

Here is another, trickier example.  It shows how to generate two
programs (`true' and `false') from the same source file (`true.c').
The difficult part is that each compilation of `true.c' requires
different `cpp' flags.

     bin_PROGRAMS = true false
     false_SOURCES =
     false_LDADD = false.o

     true.o: true.c
             $(COMPILE) -DEXIT_CODE=0 -c true.c

     false.o: true.c
             $(COMPILE) -DEXIT_CODE=1 -o false.o -c true.c

   Note that there is no `true_SOURCES' definition.  Automake will
implicitly assume that there is a source file named `true.c', and
define rules to compile `true.o' and link `true'.  The `true.o: true.c'
rule supplied by the above `Makefile.am', will override the Automake
generated rule to build `true.o'.

   `false_SOURCES' is defined to be empty--that way no implicit value
is substituted.  Because we have not listed the source of `false', we
have to tell Automake how to link the program.  This is the purpose of
the `false_LDADD' line.  A `false_DEPENDENCIES' variable, holding the
dependencies of the `false' target will be automatically generated by
Automake from the content of `false_LDADD'.

   The above rules won't work if your compiler doesn't accept both `-c'
and `-o'.  The simplest fix for this is to introduce a bogus dependency
(to avoid problems with a parallel `make'):

     true.o: true.c false.o
             $(COMPILE) -DEXIT_CODE=0 -c true.c

     false.o: true.c
             $(COMPILE) -DEXIT_CODE=1 -c true.c && mv true.o false.o

   Also, these explicit rules do not work if the de-ANSI-fication
feature is used (*note ANSI::).  Supporting de-ANSI-fication requires a
little more work:

     true_.o: true_.c false_.o
             $(COMPILE) -DEXIT_CODE=0 -c true_.c

     false_.o: true_.c
             $(COMPILE) -DEXIT_CODE=1 -c true_.c && mv true_.o false_.o

   As it turns out, there is also a much easier way to do this same
task.  Some of the above techniques are useful enough that we've kept
the example in the manual.  However if you were to build `true' and
`false' in real life, you would probably use per-program compilation
flags, like so:

     bin_PROGRAMS = false true

     false_SOURCES = true.c
     false_CPPFLAGS = -DEXIT_CODE=1

     true_SOURCES = true.c
     true_CPPFLAGS = -DEXIT_CODE=0

   In this case Automake will cause `true.c' to be compiled twice, with
different flags.  De-ANSI-fication will work automatically.  In this
instance, the names of the object files would be chosen by automake;
they would be `false-true.o' and `true-true.o'.  (The name of the
object files rarely matters.)


File: automake.info,  Node: Invoking Automake,  Next: configure,  Prev: Examples,  Up: Top

4 Creating a `Makefile.in'
**************************

To create all the `Makefile.in's for a package, run the `automake'
program in the top level directory, with no arguments.  `automake' will
automatically find each appropriate `Makefile.am' (by scanning
`configure.ac'; *note configure::) and generate the corresponding
`Makefile.in'.  Note that `automake' has a rather simplistic view of
what constitutes a package; it assumes that a package has only one
`configure.ac', at the top.  If your package has multiple
`configure.ac's, then you must run `automake' in each directory holding
a `configure.ac'.  (Alternatively, you may rely on Autoconf's
`autoreconf', which is able to recurse your package tree and run
`automake' where appropriate.)

   You can optionally give `automake' an argument; `.am' is appended to
the argument and the result is used as the name of the input file.
This feature is generally only used to automatically rebuild an
out-of-date `Makefile.in'.  Note that `automake' must always be run
from the topmost directory of a project, even if being used to
regenerate the `Makefile.in' in some subdirectory.  This is necessary
because `automake' must scan `configure.ac', and because `automake'
uses the knowledge that a `Makefile.in' is in a subdirectory to change
its behavior in some cases.

   Automake will run `autoconf' to scan `configure.ac' and its
dependencies (`aclocal.m4'), therefore `autoconf' must be in your
`PATH'.  If there is an `AUTOCONF' variable in your environment it will
be used instead of `autoconf', this allows you to select a particular
version of Autoconf.  By the way, don't misunderstand this paragraph:
Automake runs `autoconf' to *scan* your `configure.ac', this won't build
`configure' and you still have to run `autoconf' yourself for this
purpose.

   `automake' accepts the following options:

`-a'
`--add-missing'
     Automake requires certain common files to exist in certain
     situations; for instance `config.guess' is required if
     `configure.ac' runs `AC_CANONICAL_HOST'.  Automake is distributed
     with several of these files (*note Auxiliary Programs::); this
     option will cause the missing ones to be automatically added to
     the package, whenever possible.  In general if Automake tells you
     a file is missing, try using this option.  By default Automake
     tries to make a symbolic link pointing to its own copy of the
     missing file; this can be changed with `--copy'.

     Many of the potentially-missing files are common scripts whose
     location may be specified via the `AC_CONFIG_AUX_DIR' macro.
     Therefore, `AC_CONFIG_AUX_DIR''s setting affects whether a file is
     considered missing, and where the missing file is added (*note
     Optional::).

`--libdir=DIR'
     Look for Automake data files in directory DIR instead of in the
     installation directory.  This is typically used for debugging.

`-c'
`--copy'
     When used with `--add-missing', causes installed files to be
     copied.  The default is to make a symbolic link.

`--cygnus'
     Causes the generated `Makefile.in's to follow Cygnus rules, instead
     of GNU or Gnits rules.  For more information, see *Note Cygnus::.

`-f'
`--force-missing'
     When used with `--add-missing', causes standard files to be
     reinstalled even if they already exist in the source tree.  This
     involves removing the file from the source tree before creating
     the new symlink (or, with `--copy', copying the new file).

`--foreign'
     Set the global strictness to `foreign'.  For more information, see
     *Note Strictness::.

`--gnits'
     Set the global strictness to `gnits'.  For more information, see
     *Note Gnits::.

`--gnu'
     Set the global strictness to `gnu'.  For more information, see
     *Note Gnits::.  This is the default strictness.

`--help'
     Print a summary of the command line options and exit.

`-i'
`--ignore-deps'
     This disables the dependency tracking feature in generated
     `Makefile's; see *Note Dependencies::.

`--include-deps'
     This enables the dependency tracking feature.  This feature is
     enabled by default.  This option is provided for historical
     reasons only and probably should not be used.

`--no-force'
     Ordinarily `automake' creates all `Makefile.in's mentioned in
     `configure.ac'.  This option causes it to only update those
     `Makefile.in's which are out of date with respect to one of their
     dependents.

`-o DIR'
`--output-dir=DIR'
     Put the generated `Makefile.in' in the directory DIR.  Ordinarily
     each `Makefile.in' is created in the directory of the
     corresponding `Makefile.am'.  This option is deprecated and will be
     removed in a future release.

`-v'
`--verbose'
     Cause Automake to print information about which files are being
     read or created.

`--version'
     Print the version number of Automake and exit.

`-W CATEGORY'

`--warnings=CATEGORY'
     Output warnings falling in CATEGORY.  CATEGORY can be one of:
    `gnu'
          warnings related to the GNU Coding Standards (*note Top:
          (standards)Top.).

    `obsolete'
          obsolete features or constructions

    `override'
          user redefinitions of Automake rules or variables

    `portability'
          portability issues (e.g., use of Make features which are
          known not portable)

    `syntax'
          weird syntax, unused variables, typos

    `unsupported'
          unsupported or incomplete features

    `all'
          all the warnings

    `none'
          turn off all the warnings

    `error'
          treat warnings as errors

     A category can be turned off by prefixing its name with `no-'.  For
     instance `-Wno-syntax' will hide the warnings about unused
     variables.

     The categories output by default are `syntax' and `unsupported'.
     Additionally, `gnu' is enabled in `--gnu' and `--gnits' strictness.

     `portability' warnings are currently disabled by default, but they
     will be enabled in `--gnu' and `--gnits' strictness in a future
     release.

     The environment variable `WARNINGS' can contain a comma separated
     list of categories to enable.  It will be taken into account
     before the command-line switches, this way `-Wnone' will also
     ignore any warning category enabled by `WARNINGS'.  This variable
     is also used by other tools like `autoconf'; unknown categories
     are ignored for this reason.



File: automake.info,  Node: configure,  Next: Directories,  Prev: Invoking Automake,  Up: Top

5 Scanning `configure.ac'
*************************

Automake scans the package's `configure.ac' to determine certain
information about the package.  Some `autoconf' macros are required and
some variables must be defined in `configure.ac'.  Automake will also
use information from `configure.ac' to further tailor its output.

   Automake also supplies some Autoconf macros to make the maintenance
easier.  These macros can automatically be put into your `aclocal.m4'
using the `aclocal' program.

* Menu:

* Requirements::                Configuration requirements
* Optional::                    Other things Automake recognizes
* Invoking aclocal::            Auto-generating aclocal.m4
* aclocal options::             aclocal command line arguments
* Macro search path::           Modifying aclocal's search path
* Macros::                      Autoconf macros supplied with Automake
* Extending aclocal::           Writing your own aclocal macros
* Local Macros::                Organizing local macros
* Future of aclocal::           aclocal's scheduled death


File: automake.info,  Node: Requirements,  Next: Optional,  Up: configure

5.1 Configuration requirements
==============================

The one real requirement of Automake is that your `configure.ac' call
`AM_INIT_AUTOMAKE'.  This macro does several things which are required
for proper Automake operation (*note Macros::).

   Here are the other macros which Automake requires but which are not
run by `AM_INIT_AUTOMAKE':

`AC_CONFIG_FILES'
`AC_OUTPUT'
     Automake uses these to determine which files to create (*note
     Creating Output Files: (autoconf)Output.).  A listed file is
     considered to be an Automake generated `Makefile' if there exists
     a file with the same name and the `.am' extension appended.
     Typically, `AC_CONFIG_FILES([foo/Makefile])' will cause Automake to
     generate `foo/Makefile.in' if `foo/Makefile.am' exists.

     When using `AC_CONFIG_FILES' with multiple input files, as in
     `AC_CONFIG_FILES([Makefile:top.in:Makefile.in:bot.in])', Automake
     will generate the first `.in' input file for which a `.am' file
     exists.  If no such file exists the output file is not considered
     to be Automake generated.

     Files created by `AC_CONFIG_FILES' are removed by `make distclean'.


File: automake.info,  Node: Optional,  Next: Invoking aclocal,  Prev: Requirements,  Up: configure

5.2 Other things Automake recognizes
====================================

Every time Automake is run it calls Autoconf to trace `configure.ac'.
This way it can recognize the use of certain macros and tailor the
generated `Makefile.in' appropriately.  Currently recognized macros and
their effects are:

`AC_CONFIG_HEADERS'
     Automake will generate rules to rebuild these headers.  Older
     versions of Automake required the use of `AM_CONFIG_HEADER' (*note
     Macros::); this is no longer the case today.

`AC_CONFIG_LINKS'
     Automake will generate rules to remove `configure' generated links
     on `make distclean' and to distribute named source files as part of
     `make dist'.

`AC_CONFIG_AUX_DIR'
     Automake will look for various helper scripts, such as
     `install-sh', in the directory named in this macro invocation.
     (The full list of scripts is: `config.guess', `config.sub',
     `depcomp', `elisp-comp', `compile', `install-sh', `ltmain.sh',
     `mdate-sh', `missing', `mkinstalldirs', `py-compile',
     `texinfo.tex', and `ylwrap'.)  Not all scripts are always searched
     for; some scripts will only be sought if the generated
     `Makefile.in' requires them.

     If `AC_CONFIG_AUX_DIR' is not given, the scripts are looked for in
     their standard locations.  For `mdate-sh', `texinfo.tex', and
     `ylwrap', the standard location is the source directory
     corresponding to the current `Makefile.am'.  For the rest, the
     standard location is the first one of `.', `..', or `../..'
     (relative to the top source directory) that provides any one of
     the helper scripts.  *Note Finding `configure' Input:
     (autoconf)Input.

     Required files from `AC_CONFIG_AUX_DIR' are automatically
     distributed, even if there is no `Makefile.am' in this directory.

`AC_CANONICAL_BUILD'
`AC_CANONICAL_HOST'
`AC_CANONICAL_TARGET'
     Automake will ensure that `config.guess' and `config.sub' exist.
     Also, the `Makefile' variables `build_triplet', `host_triplet' and
     `target_triplet' are introduced.  See *Note Getting the Canonical
     System Type: (autoconf)Canonicalizing.

`AC_LIBSOURCE'
`AC_LIBSOURCES'
`AC_LIBOBJ'
     Automake will automatically distribute any file listed in
     `AC_LIBSOURCE' or `AC_LIBSOURCES'.

     Note that the `AC_LIBOBJ' macro calls `AC_LIBSOURCE'.  So if an
     Autoconf macro is documented to call `AC_LIBOBJ([file])', then
     `file.c' will be distributed automatically by Automake.  This
     encompasses many macros like `AC_FUNC_ALLOCA', `AC_FUNC_MEMCMP',
     `AC_REPLACE_FUNCS', and others.

     By the way, direct assignments to `LIBOBJS' are no longer
     supported.  You should always use `AC_LIBOBJ' for this purpose.
     *Note `AC_LIBOBJ' vs. `LIBOBJS': (autoconf)AC_LIBOBJ vs LIBOBJS.

`AC_PROG_RANLIB'
     This is required if any libraries are built in the package.  *Note
     Particular Program Checks: (autoconf)Particular Programs.

`AC_PROG_CXX'
     This is required if any C++ source is included.  *Note Particular
     Program Checks: (autoconf)Particular Programs.

`AC_PROG_F77'
     This is required if any Fortran 77 source is included.  This macro
     is distributed with Autoconf version 2.13 and later.  *Note
     Particular Program Checks: (autoconf)Particular Programs.

`AC_F77_LIBRARY_LDFLAGS'
     This is required for programs and shared libraries that are a
     mixture of languages that include Fortran 77 (*note Mixing Fortran
     77 With C and C++::).  *Note Autoconf macros supplied with
     Automake: Macros.

`AC_PROG_FC'
     This is required if any Fortran 90/95 source is included.  This
     macro is distributed with Autoconf version 2.58 and later.  *Note
     Particular Program Checks: (autoconf)Particular Programs.

`AC_PROG_LIBTOOL'
     Automake will turn on processing for `libtool' (*note
     Introduction: (libtool)Top.).

`AC_PROG_YACC'
     If a Yacc source file is seen, then you must either use this macro
     or define the variable `YACC' in `configure.ac'.  The former is
     preferred (*note Particular Program Checks: (autoconf)Particular
     Programs.).

`AC_PROG_LEX'
     If a Lex source file is seen, then this macro must be used.  *Note
     Particular Program Checks: (autoconf)Particular Programs.

`AC_SUBST'
     The first argument is automatically defined as a variable in each
     generated `Makefile.in'.  *Note Setting Output Variables:
     (autoconf)Setting Output Variables.

     If the Autoconf manual says that a macro calls `AC_SUBST' for VAR,
     or defines the output variable VAR then VAR will be defined in
     each `Makefile.in' generated by Automake.  E.g. `AC_PATH_XTRA'
     defines `X_CFLAGS' and `X_LIBS', so you can use these variables in
     any `Makefile.am' if `AC_PATH_XTRA' is called.

`AM_C_PROTOTYPES'
     This is required when using automatic de-ANSI-fication; see *Note
     ANSI::.

`AM_GNU_GETTEXT'
     This macro is required for packages which use GNU gettext (*note
     gettext::).  It is distributed with gettext.  If Automake sees
     this macro it ensures that the package meets some of gettext's
     requirements.

`AM_MAINTAINER_MODE'
     This macro adds a `--enable-maintainer-mode' option to
     `configure'.  If this is used, `automake' will cause
     `maintainer-only' rules to be turned off by default in the
     generated `Makefile.in's.  This macro defines the
     `MAINTAINER_MODE' conditional, which you can use in your own
     `Makefile.am'.  *Note maintainer-mode::.

`m4_include'
     Files included by `configure.ac' using this macro will be detected
     by Automake and automatically distributed.  They will also appear
     as dependencies in `Makefile' rules.

     `m4_include' is seldom used by `configure.ac' authors, but can
     appear in `aclocal.m4' when `aclocal' detects that some required
     macros come from files local to your package (as opposed to macros
     installed in a system-wide directory, *note Invoking aclocal::).



File: automake.info,  Node: Invoking aclocal,  Next: aclocal options,  Prev: Optional,  Up: configure

5.3 Auto-generating aclocal.m4
==============================

Automake includes a number of Autoconf macros which can be used in your
package (*note Macros::); some of them are actually required by
Automake in certain situations.  These macros must be defined in your
`aclocal.m4'; otherwise they will not be seen by `autoconf'.

   The `aclocal' program will automatically generate `aclocal.m4' files
based on the contents of `configure.ac'.  This provides a convenient
way to get Automake-provided macros, without having to search around.
The `aclocal' mechanism allows other packages to supply their own
macros (*note Extending aclocal::).  You can also use it to maintain
your own set of custom macros (*note Local Macros::).

   At startup, `aclocal' scans all the `.m4' files it can find, looking
for macro definitions (*note Macro search path::).  Then it scans
`configure.ac'.  Any mention of one of the macros found in the first
step causes that macro, and any macros it in turn requires, to be put
into `aclocal.m4'.

   _Putting_ the file that contains the macro definition into
`aclocal.m4' is usually done by copying the entire text of this file,
including unused macro definitions as well as both `#' and `dnl'
comments.  If you want to make a comment which will be completely
ignored by `aclocal', use `##' as the comment leader.

   When a file selected by `aclocal' is located in a subdirectory
specified as a relative search path with `aclocal''s `-I' argument,
`aclocal' assumes the file belongs to the package and uses `m4_include'
instead of copying it into `aclocal.m4'.  This makes the package
smaller, eases dependency tracking, and cause the file to be
distributed automatically.  (*Note Local Macros::, for an example.)
Any macro which is found in a system-wide directory, or via an absolute
search path will be copied.  So use `-I `pwd`/reldir' instead of `-I
reldir' whenever some relative directory need to be considered outside
the package.

   The contents of `acinclude.m4', if this file exists, are also
automatically included in `aclocal.m4'.  We recommend against using
`acinclude.m4' in new packages (*note Local Macros::).

   While computing `aclocal.m4', `aclocal' runs `autom4te' (*note Using
`Autom4te': (autoconf)Using autom4te.) in order to trace the macros
which are really used, and omit from `aclocal.m4' all macros which are
mentioned but otherwise unexpanded (this can happen when a macro is
called conditionally).  `autom4te' is expected to be in the `PATH',
just as `autoconf'.  Its location can be overridden using the
`AUTOM4TE' environment variable.

* Menu:

* aclocal options::             Options supported by aclocal
* Macro search path::           How aclocal finds .m4 files


File: automake.info,  Node: aclocal options,  Next: Macro search path,  Prev: Invoking aclocal,  Up: configure

5.4 aclocal options
===================

`aclocal' accepts the following options:

`--acdir=DIR'
     Look for the macro files in DIR instead of the installation
     directory.  This is typically used for debugging.

`--help'
     Print a summary of the command line options and exit.

`-I DIR'
     Add the directory DIR to the list of directories searched for
     `.m4' files.

`--force'
     Always overwrite the output file.  The default is to overwrite the
     output file only when really needed, i.e., when its contents
     changes or if one of its dependencies is younger.

`--output=FILE'
     Cause the output to be put into FILE instead of `aclocal.m4'.

`--print-ac-dir'
     Prints the name of the directory which `aclocal' will search to
     find third-party `.m4' files.  When this option is given, normal
     processing is suppressed.  This option can be used by a package to
     determine where to install a macro file.

`--verbose'
     Print the names of the files it examines.

`--version'
     Print the version number of Automake and exit.


File: automake.info,  Node: Macro search path,  Next: Macros,  Prev: aclocal options,  Up: configure

5.5 Macro search path
=====================

By default, `aclocal' searches for `.m4' files in the following
directories, in this order:

`ACDIR-APIVERSION'
     This is where the `.m4' macros distributed with automake itself
     are stored.  APIVERSION depends on the automake release used; for
     automake 1.6.x, APIVERSION = `1.6'.

`ACDIR'
     This directory is intended for third party `.m4' files, and is
     configured when `automake' itself is built.  This is
     `@datadir@/aclocal/', which typically expands to
     `${prefix}/share/aclocal/'.  To find the compiled-in value of
     ACDIR, use the `--print-ac-dir' option (*note aclocal options::).

   As an example, suppose that automake-1.6.2 was configured with
`--prefix=/usr/local'.  Then, the search path would be:

  1. `/usr/local/share/aclocal-1.6/'

  2. `/usr/local/share/aclocal/'

   As explained in (*note aclocal options::), there are several options
that can be used to change or extend this search path.

5.5.1 Modifying the macro search path: `--acdir'
------------------------------------------------

The most obvious option to modify the search path is `--acdir=DIR',
which changes default directory and drops the APIVERSION directory.
For example, if one specifies `--acdir=/opt/private/', then the search
path becomes:

  1. `/opt/private/'

   Note that this option, `--acdir', is intended for use by the
internal automake test suite only; it is not ordinarily needed by
end-users.

5.5.2 Modifying the macro search path: `-I DIR'
-----------------------------------------------

Any extra directories specified using `-I' options (*note aclocal
options::) are _prepended_ to this search list.  Thus, `aclocal -I /foo
-I /bar' results in the following search path:

  1. `/foo'

  2. `/bar'

  3. ACDIR-APIVERSION

  4. ACDIR

5.5.3 Modifying the macro search path: `dirlist'
------------------------------------------------

There is a third mechanism for customizing the search path.  If a
`dirlist' file exists in ACDIR, then that file is assumed to contain a
list of directories, one per line, to be added to the search list.
These directories are searched _after_ all other directories.

   For example, suppose `ACDIR/dirlist' contains the following:

     /test1
     /test2

and that `aclocal' was called with the `-I /foo -I /bar' options.
Then, the search path would be

  1. `/foo'

  2. `/bar'

  3. ACDIR-APIVERSION

  4. ACDIR

  5. `/test1'

  6. `/test2'

   If the `--acdir=DIR' option is used, then `aclocal' will search for
the `dirlist' file in DIR.  In the `--acdir=/opt/private/' example
above, `aclocal' would look for `/opt/private/dirlist'.  Again,
however, the `--acdir' option is intended for use by the internal
automake test suite only; `--acdir' is not ordinarily needed by
end-users.

   `dirlist' is useful in the following situation: suppose that
`automake' version `1.6.2' is installed with $prefix=/usr by the system
vendor. Thus, the default search directories are

  1. `/usr/share/aclocal-1.6/'

  2. `/usr/share/aclocal/'

   However, suppose further that many packages have been manually
installed on the system, with $prefix=/usr/local, as is typical.  In
that case, many of these "extra" `.m4' files are in
`/usr/local/share/aclocal'.  The only way to force `/usr/bin/aclocal'
to find these "extra" `.m4' files is to always call `aclocal -I
/usr/local/share/aclocal'.  This is inconvenient.  With `dirlist', one
may create the file

   `/usr/share/aclocal/dirlist'

which contains only the single line

   `/usr/local/share/aclocal'

   Now, the "default" search path on the affected system is

  1. `/usr/share/aclocal-1.6/'

  2. `/usr/share/aclocal/'

  3. `/usr/local/share/aclocal/'

   without the need for `-I' options; `-I' options can be reserved for
project-specific needs (`my-source-dir/m4/'), rather than using it to
work around local system-dependent tool installation directories.

   Similarly, `dirlist' can be handy if you have installed a local copy
Automake on your account and want `aclocal' to look for macros
installed at other places on the system.


File: automake.info,  Node: Macros,  Next: Extending aclocal,  Prev: Macro search path,  Up: configure

5.6 Autoconf macros supplied with Automake
==========================================

Automake ships with several Autoconf macros that you can use from your
`configure.ac'.  When you use one of them it will be included by
`aclocal' in `aclocal.m4'.

* Menu:

* Public macros::               Macros that you can use.
* Private macros::              Macros that you should not use.


File: automake.info,  Node: Public macros,  Next: Private macros,  Up: Macros

5.6.1 Public macros
-------------------

`AM_CONFIG_HEADER'
     Automake will generate rules to automatically regenerate the config
     header.  This obsolete macro is a synonym of `AC_CONFIG_HEADERS'
     today (*note Optional::).

`AM_ENABLE_MULTILIB'
     This is used when a "multilib" library is being built.  The first
     optional argument is the name of the `Makefile' being generated; it
     defaults to `Makefile'.  The second option argument is used to find
     the top source directory; it defaults to the empty string
     (generally this should not be used unless you are familiar with
     the internals).  *Note Multilibs::.

`AM_C_PROTOTYPES'
     Check to see if function prototypes are understood by the
     compiler.  If so, define `PROTOTYPES' and set the output variables
     `U' and `ANSI2KNR' to the empty string.  Otherwise, set `U' to `_'
     and `ANSI2KNR' to `./ansi2knr'.  Automake uses these values to
     implement automatic de-ANSI-fication.

`AM_HEADER_TIOCGWINSZ_NEEDS_SYS_IOCTL'
     If the use of `TIOCGWINSZ' requires `<sys/ioctl.h>', then define
     `GWINSZ_IN_SYS_IOCTL'.  Otherwise `TIOCGWINSZ' can be found in
     `<termios.h>'.  This macro is obsolete, you should use Autoconf's
     `AC_HEADER_TIOCGWINSZ' instead.

`AM_INIT_AUTOMAKE([OPTIONS])'
`AM_INIT_AUTOMAKE(PACKAGE, VERSION, [NO-DEFINE])'
     Runs many macros required for proper operation of the generated
     Makefiles.

     This macro has two forms, the first of which is preferred.  In
     this form, `AM_INIT_AUTOMAKE' is called with a single argument --
     a space-separated list of Automake options which should be applied
     to every `Makefile.am' in the tree.  The effect is as if each
     option were listed in `AUTOMAKE_OPTIONS' (*note Options::).

     The second, deprecated, form of `AM_INIT_AUTOMAKE' has two required
     arguments: the package and the version number.  This form is
     obsolete because the PACKAGE and VERSION can be obtained from
     Autoconf's `AC_INIT' macro (which itself has an old and a new
     form).

     If your `configure.ac' has:

          AC_INIT(src/foo.c)
          AM_INIT_AUTOMAKE(mumble, 1.5)

     you can modernize it as follows:

          AC_INIT(mumble, 1.5)
          AC_CONFIG_SRCDIR(src/foo.c)
          AM_INIT_AUTOMAKE

     Note that if you're upgrading your `configure.ac' from an earlier
     version of Automake, it is not always correct to simply move the
     package and version arguments from `AM_INIT_AUTOMAKE' directly to
     `AC_INIT', as in the example above.  The first argument to
     `AC_INIT' should be the name of your package (e.g. `GNU Automake'),
     not the tarball name (e.g. `automake') that you used to pass to
     `AM_INIT_AUTOMAKE'.  Autoconf tries to derive a tarball name from
     the package name, which should work for most but not all package
     names.  (If it doesn't work for yours, you can use the
     four-argument form of `AC_INIT' -- supported in Autoconf versions
     greater than 2.52g -- to provide the tarball name explicitly).

     By default this macro `AC_DEFINE''s `PACKAGE' and `VERSION'.  This
     can be avoided by passing the `no-define' option, as in:
          AM_INIT_AUTOMAKE([gnits 1.5 no-define dist-bzip2])
     or by passing a third non-empty argument to the obsolete form.

`AM_PATH_LISPDIR'
     Searches for the program `emacs', and, if found, sets the output
     variable `lispdir' to the full path to Emacs' site-lisp directory.

     Note that this test assumes the `emacs' found to be a version that
     supports Emacs Lisp (such as GNU Emacs or XEmacs).  Other emacsen
     can cause this test to hang (some, like old versions of MicroEmacs,
     start up in interactive mode, requiring `C-x C-c' to exit, which
     is hardly obvious for a non-emacs user).  In most cases, however,
     you should be able to use `C-c' to kill the test.  In order to
     avoid problems, you can set `EMACS' to "no" in the environment, or
     use the `--with-lispdir' option to `configure' to explicitly set
     the correct path (if you're sure you have an `emacs' that supports
     Emacs Lisp.

`AM_PROG_AS'
     Use this macro when you have assembly code in your project.  This
     will choose the assembler for you (by default the C compiler) and
     set `CCAS', and will also set `CCASFLAGS' if required.

`AM_PROG_CC_C_O'
     This is like `AC_PROG_CC_C_O', but it generates its results in the
     manner required by automake.  You must use this instead of
     `AC_PROG_CC_C_O' when you need this functionality.

`AM_PROG_LEX'
     Like `AC_PROG_LEX' (*note Particular Program Checks:
     (autoconf)Particular Programs.), but uses the `missing' script on
     systems that do not have `lex'.  `HP-UX 10' is one such system.

`AM_PROG_GCJ'
     This macro finds the `gcj' program or causes an error.  It sets
     `GCJ' and `GCJFLAGS'.  `gcj' is the Java front-end to the GNU
     Compiler Collection.

`AM_SYS_POSIX_TERMIOS'
     Check to see if POSIX termios headers and functions are available
     on the system.  If so, set the shell variable
     `am_cv_sys_posix_termios' to `yes'.  If not, set the variable to
     `no'.  This macro is obsolete, you should use Autoconf's
     `AC_SYS_POSIX_TERMIOS' instead.

`AM_WITH_DMALLOC'
     Add support for the dmalloc
     (ftp://ftp.letters.com/src/dmalloc/dmalloc.tar.gz) package.  If
     the user configures with `--with-dmalloc', then define
     `WITH_DMALLOC' and add `-ldmalloc' to `LIBS'.

`AM_WITH_REGEX'
     Adds `--with-regex' to the `configure' command line.  If specified
     (the default), then the `regex' regular expression library is
     used, `regex.o' is put into `LIBOBJS', and `WITH_REGEX' is
     defined.  If `--without-regex' is given, then the `rx' regular
     expression library is used, and `rx.o' is put into `LIBOBJS'.



File: automake.info,  Node: Private macros,  Prev: Public macros,  Up: Macros

5.6.2 Private macros
--------------------

The following macros are private macros you should not call directly.
They are called by the other public macros when appropriate.  Do not
rely on them, as they might be changed in a future version.  Consider
them as implementation details; or better, do not consider them at all:
skip this section!

`_AM_DEPENDENCIES'
`AM_SET_DEPDIR'
`AM_DEP_TRACK'
`AM_OUTPUT_DEPENDENCY_COMMANDS'
     These macros are used to implement Automake's automatic dependency
     tracking scheme.  They are called automatically by automake when
     required, and there should be no need to invoke them manually.

`AM_MAKE_INCLUDE'
     This macro is used to discover how the user's `make' handles
     `include' statements.  This macro is automatically invoked when
     needed; there should be no need to invoke it manually.

`AM_PROG_INSTALL_STRIP'
     This is used to find a version of `install' which can be used to
     `strip' a program at installation time.  This macro is
     automatically included when required.

`AM_SANITY_CHECK'
     This checks to make sure that a file created in the build
     directory is newer than a file in the source directory.  This can
     fail on systems where the clock is set incorrectly.  This macro is
     automatically run from `AM_INIT_AUTOMAKE'.



File: automake.info,  Node: Extending aclocal,  Next: Local Macros,  Prev: Macros,  Up: configure

5.7 Writing your own aclocal macros
===================================

The `aclocal' program doesn't have any built-in knowledge of any
macros, so it is easy to extend it with your own macros.

   This can be used by libraries which want to supply their own Autoconf
macros for use by other programs.  For instance the `gettext' library
supplies a macro `AM_GNU_GETTEXT' which should be used by any package
using `gettext'.  When the library is installed, it installs this macro
so that `aclocal' will find it.

   A macro file's name should end in `.m4'.  Such files should be
installed in `$(datadir)/aclocal'.  This is as simple as writing:

     aclocaldir = $(datadir)/aclocal
     aclocal_DATA = mymacro.m4 myothermacro.m4

   A file of macros should be a series of properly quoted `AC_DEFUN''s
(*note Macro Definitions: (autoconf)Macro Definitions.).  The `aclocal'
programs also understands `AC_REQUIRE' (*note Prerequisite Macros:
(autoconf)Prerequisite Macros.), so it is safe to put each macro in a
separate file.  Each file should have no side effects but macro
definitions.  Especially, any call to `AC_PREREQ' should be done inside
the defined macro, not at the beginning of the file.

   Starting with Automake 1.8, `aclocal' will warn about all
underquoted calls to `AC_DEFUN'.  We realize this will annoy a lot of
people, because `aclocal' was not so strict in the past and many third
party macros are underquoted; and we have to apologize for this
temporary inconvenience.  The reason we have to be stricter is that a
future implementation of `aclocal' (*note Future of aclocal::) will
have to temporary include all these third party `.m4' files, maybe
several times, even those which are not actually needed.  Doing so
should alleviate many problem of the current implementation, however it
requires a stricter style from the macro authors.  Hopefully it is easy
to revise the existing macros.  For instance
     # bad style
     AC_PREREQ(2.57)
     AC_DEFUN(AX_FOOBAR,
     [AC_REQUIRE([AX_SOMETHING])dnl
     AX_FOO
     AX_BAR
     ])
   should be rewritten as
     AC_DEFUN([AX_FOOBAR],
     [AC_PREREQ(2.57)dnl
     AC_REQUIRE([AX_SOMETHING])dnl
     AX_FOO
     AX_BAR
     ])

   Wrapping the `AC_PREREQ' call inside the macro ensures that Autoconf
2.57 will not be required if `AX_FOOBAR' is not actually used.  Most
importantly, quoting the first argument of `AC_DEFUN' allows the macro
to be redefined or included twice (otherwise this first argument would
be expansed during the second definition).

   If you have been directed here by the `aclocal' diagnostic but are
not the maintainer of the implicated macro, you will want to contact
the maintainer of that macro.  Please make sure you have the last
version of the macro and that the problem already hasn't been reported
before doing so: people tend to work faster when they aren't flooded by
mails.

   Another situation where `aclocal' is commonly used is to manage
macros which are used locally by the package, *Note Local Macros::.


File: automake.info,  Node: Local Macros,  Next: Future of aclocal,  Prev: Extending aclocal,  Up: configure

5.8 Handling Local Macros
=========================

Feature tests offered by Autoconf do not cover all needs.  People often
have to supplement existing tests with their own macros, or with
third-party macros.

   There are two ways to organize custom macros in a package.

   The first possibility (the historical practice) is to list all your
macros in `acinclude.m4'.  This file will be included in `aclocal.m4'
when you run `aclocal', and its macro(s) will henceforth be visible to
`autoconf'.  However if it contains numerous macros, it will rapidly
become difficult to maintain, and it will be almost impossible to share
macros between packages.

   The second possibility, which we do recommend, is to write each macro
in its own file and gather all these files in a directory.  This
directory is usually called `m4/'.  To build `aclocal.m4', one should
therefore instruct `aclocal' to scan `m4/'.  From the command line,
this is done with `aclocal -I m4'.  The top-level `Makefile.am' should
also be updated to define

      ACLOCAL_AMFLAGS = -I m4

   `ACLOCAL_AMFLAGS' contains options to pass to `aclocal' when
`aclocal.m4' is to be rebuilt by `make'.  This line is also used by
`autoreconf' (*note Using `autoreconf' to Update `configure' Scripts:
(autoconf)autoreconf Invocation.) to run `aclocal' with suitable
options, or by `autopoint' (*note Invoking the `autopoint' Program:
(gettext)autopoint Invocation.)  and `gettextize' (*note Invoking the
`gettextize' Program: (gettext)gettextize Invocation.) to locate the
place where Gettext's macros should be installed.  So even if you do
not really care about the rebuild rules, you should define
`ACLOCAL_AMFLAGS'.

   When `aclocal -I m4' is run, it will build a `aclocal.m4' that
`m4_include's any file from `m4/' that defines a required macro.
Macros not found locally will still be searched in system-wide
directories, as explained in *Note Macro search path::.

   Custom macros should be distributed for the same reason that
`configure.ac' is: so that other people have all the sources of your
package if they want to work on it.  Actually, this distribution
happens automatically because all `m4_include'd files are distributed.

   However there is no consensus on the distribution of third-party
macros that your package may use.  Many libraries install their own
macro in the system-wide `aclocal' directory (*note Extending
aclocal::).  For instance Guile ships with a file called `guile.m4'
that contains the macro `GUILE_FLAGS' which can be used to define setup
compiler and linker flags appropriate for using Guile.  Using
`GUILE_FLAGS' in `configure.ac' will cause `aclocal' to copy `guile.m4'
into `aclocal.m4', but as `guile.m4' is not part of the project, it
will not be distributed.  Technically, that means a user which needs to
rebuild `aclocal.m4' will have to install Guile first.  This is
probably OK, if Guile already is a requirement to build the package.
However, if Guile is only an optional feature, or if your package might
run on architectures where Guile cannot be installed, this requirement
will hinder development.  An easy solution is to copy such third-party
macros in your local `m4/' directory so they get distributed.


File: automake.info,  Node: Future of aclocal,  Prev: Local Macros,  Up: configure

5.9 The Future of `aclocal'
===========================

`aclocal' is expected to disappear.  This feature really should not be
offered by Automake.  Automake should focus on generating `Makefile's;
dealing with M4 macros really is Autoconf's job.  That some people
install Automake just to use `aclocal', but do not use `automake'
otherwise is an indication of how that feature is misplaced.

   The new implementation will probably be done slightly differently.
For instance it could enforce the `m4/'-style layout discussed in *Note
Local Macros::, and take care of copying (and even updating)
third-party macros from `/usr/share/aclocal/' into the local `m4/'
directory.

   We have no idea when and how this will happen.  This has been
discussed several times in the past, but someone still has to commit
itself to that non-trivial task.

   From the user point of view, `aclocal''s removal might turn out to
be painful.  There is a simple precaution that you may take to make
that switch more seamless: never call `aclocal' yourself.  Keep this
guy under the exclusive control of `autoreconf' and Automake's rebuild
rules.  Hopefully you won't need to worry about things breaking, when
`aclocal' disappears, because everything will have been taken care of.
If otherwise you used to call `aclocal' directly yourself or from some
script, you will quickly notice the change.

   Many packages come with a script called `bootstrap.sh' or
`autogen.sh', that will just call `aclocal', `libtoolize', `gettextize'
or `autopoint', `autoconf', `autoheader', and `automake' in the right
order.  Actually this is precisely what `autoreconf' can do for you.
If your package has such a `bootstrap.sh' or `autogen.sh' script,
consider using `autoreconf'.  That should simplify its logic a lot
(less things to maintain, yum!), it's even likely you will not need the
script anymore, and more to the point you will not call `aclocal'
directly anymore.

   For the time being, third-party packages should continue to install
public macros into `/usr/share/aclocal/'.  If `aclocal' is replaced by
another tool it might make sense to rename the directory, but
supporting `/usr/share/aclocal/' for backward compatibility should be
really easy provided all macros are properly written (*note Extending
aclocal::).


File: automake.info,  Node: Directories,  Next: Programs,  Prev: configure,  Up: Top

6 Directories
*************

For simple projects that distributes all files in the same directory it
is enough to have a single `Makefile.am' that builds everything in
place.

   In larger projects it is common to organize files in different
directories, in a tree.  For instance one directory per program, per
library or per module.  The traditional approach is to build these
subdirectory recursively: each directory contains its `Makefile'
(generated from `Makefile.am'), and when `make' is run from the top
level directory it enters each subdirectory in turn to build its
contents.

* Menu:

* Subdirectories::              Building subdirectories recursively
* Conditional Subdirectories::  Conditionally not building directories
* Alternative::                 Subdirectories without recursion
* Subpackages::                 Nesting packages


File: automake.info,  Node: Subdirectories,  Next: Conditional Subdirectories,  Up: Directories

6.1 Recursing subdirectories
============================

In packages with subdirectories, the top level `Makefile.am' must tell
Automake which subdirectories are to be built.  This is done via the
`SUBDIRS' variable.  

   The `SUBDIRS' variable holds a list of subdirectories in which
building of various sorts can occur.  The rules for many targets (e.g.
`all') in the generated `Makefile' will run commands both locally and
in all specified subdirectories.  Note that the directories listed in
`SUBDIRS' are not required to contain `Makefile.am's; only `Makefile's
(after configuration).  This allows inclusion of libraries from
packages which do not use Automake (such as `gettext'; see also *Note
Third-Party Makefiles::).

   In packages that use subdirectories, the top-level `Makefile.am' is
often very short.  For instance, here is the `Makefile.am' from the GNU
Hello distribution:

     EXTRA_DIST = BUGS ChangeLog.O README-alpha
     SUBDIRS = doc intl po src tests

   When Automake invokes `make' in a subdirectory, it uses the value of
the `MAKE' variable.  It passes the value of the variable
`AM_MAKEFLAGS' to the `make' invocation; this can be set in
`Makefile.am' if there are flags you must always pass to `make'.  

   The directories mentioned in `SUBDIRS' are usually direct children
of the current directory, each subdirectory containing its own
`Makefile.am' with a `SUBDIRS' pointing to deeper subdirectories.
Automake can be used to construct packages of arbitrary depth this way.

   By default, Automake generates `Makefiles' which work depth-first in
postfix order: the subdirectories are built before the current
directory.  However, it is possible to change this ordering.  You can
do this by putting `.' into `SUBDIRS'.  For instance, putting `.'
first will cause a `prefix' ordering of directories.

   Using

     SUBDIRS = lib src . test

will cause `lib/' to be built before `src/', then the current directory
will be built, finally the `test/' directory will be built.  It is
customary to arrange test directories to be built after everything else
since they are meant to test what has been constructed.

   All `clean' rules are run in reverse order of build rules.


File: automake.info,  Node: Conditional Subdirectories,  Next: Alternative,  Prev: Subdirectories,  Up: Directories

6.2 Conditional Subdirectories
==============================

It is possible to define the `SUBDIRS' variable conditionally if, like
in the case of GNU `Inetutils', you want to only build a subset of the
entire package.

   To illustrate how this works, let's assume we have two directories
`src/' and `opt/'.  `src/' should always be built, but we want to
decide in `./configure' whether `opt/' will be built or not.  (For this
example we will assume that `opt/' should be built when the variable
`$want_opt' was set to `yes'.)

   Running `make' should thus recurse into `src/' always, and then
maybe in `opt/'.

   However `make dist' should always recurse into both `src/' and
`opt/'.  Because `opt/' should be distributed even if it is not needed
in the current configuration. This means `opt/Makefile' should be
created _unconditionally_.

   There are two ways to setup a project like this.  You can use
Automake conditionals (*note Conditionals::) or use Autoconf `AC_SUBST'
variables (*note Setting Output Variables: (autoconf)Setting Output
Variables.).  Using Automake conditionals is the preferred solution.
Before we illustrate these two possibility, let's introduce
`DIST_SUBDIRS'.

6.2.1 `SUBDIRS' vs. `DIST_SUBDIRS'
----------------------------------

Automake considers two sets of directories, defined by the variables
`SUBDIRS' and `DIST_SUBDIRS'.

   `SUBDIRS' contains the subdirectories of the current directory that
must be built (*note Subdirectories::).  It must be defined manually;
Automake will never guess a directory is to be built.  As we will see
in the next two sections, it is possible to define it conditionally so
that some directory will be omitted from the build.

   `DIST_SUBDIRS' is used in rules that need to recurse in all
directories, even those which have been conditionally left out of the
build.  Recall our example where we may not want to build subdirectory
`opt/', but yet we want to distribute it?  This is where `DIST_SUBDIRS'
come into play: `opt' may not appear in `SUBDIRS', but it must appear
in `DIST_SUBDIRS'.

   Precisely, `DIST_SUBDIRS' is used by `make dist', `make distclean',
and `make maintainer-clean'.  All other recursive rules use `SUBDIRS'.

   If `SUBDIRS' is defined conditionally using Automake conditionals,
Automake will define `DIST_SUBDIRS' automatically from the possibles
values of `SUBDIRS' in all conditions.

   If `SUBDIRS' contains `AC_SUBST' variables, `DIST_SUBDIRS' will not
be defined correctly because Automake does not know the possible values
of these variables.  In this case `DIST_SUBDIRS' needs to be defined
manually.

6.2.2 Conditional subdirectories with `AM_CONDITIONAL'
------------------------------------------------------

`configure' should output the `Makefile' for each directory and define
a condition into which `opt/' should be built.

     ...
     AM_CONDITIONAL([COND_OPT], [test "$want_opt" = yes])
     AC_CONFIG_FILES([Makefile src/Makefile opt/Makefile])
     ...

   Then `SUBDIRS' can be defined in the top-level `Makefile.am' as
follows.

     if COND_OPT
       MAYBE_OPT = opt
     endif
     SUBDIRS = src $(MAYBE_OPT)

   As you can see, running `make' will rightly recurse into `src/' and
maybe `opt/'.

   As you can't see, running `make dist' will recurse into both `src/'
and `opt/' directories because `make dist', unlike `make all', doesn't
use the `SUBDIRS' variable.  It uses the `DIST_SUBDIRS' variable.

   In this case Automake will define `DIST_SUBDIRS = src opt'
automatically because it knows that `MAYBE_OPT' can contain `opt' in
some condition.

6.2.3 Conditional Subdirectories with `AC_SUBST'
------------------------------------------------

Another possibility is to define `MAYBE_OPT' from `./configure' using
`AC_SUBST':

     ...
     if test "$want_opt" = yes; then
       MAYBE_OPT=opt
     else
       MAYBE_OPT=
     fi
     AC_SUBST([MAYBE_OPT])
     AC_CONFIG_FILES([Makefile src/Makefile opt/Makefile])
     ...

   In this case the top-level `Makefile.am' should look as follows.

     SUBDIRS = src $(MAYBE_OPT)
     DIST_SUBDIRS = src opt

   The drawback is that since Automake cannot guess what the possible
values of `MAYBE_OPT' are, it is necessary to define `DIST_SUBDIRS'.

6.2.4 Non-configured Subdirectories
-----------------------------------

The semantic of `DIST_SUBDIRS' is often misunderstood by some users
that try to _configure and build_ subdirectories conditionally.  Here
by configuring we mean creating the `Makefile' (it might also involve
running a nested `configure' script: this is a costly operation that
explains why people want to do it conditionally, but only the `Makefile'
is relevant to the discussion).

   The above examples all assume that every `Makefile' is created, even
in directories that are not going to be built.  The simple reason is
that we want `make dist' to distribute even the directories that are
not being built (e.g. platform-dependent code), hence `make dist' must
recurse into the subdirectory, hence this directory must be configured
and appear in `DIST_SUBDIRS'.

   Building packages that do not configure every subdirectory is a
tricky business, and we do not recommend it to the novice as it is easy
to produce an incomplete tarball by mistake.  We will not discuss this
topic in depth here, yet for the adventurous here are a few rules to
remember.

   * `SUBDIRS' should always be a subset of `DIST_SUBDIRS'.

     It makes little sense to have a directory in `SUBDIRS' that is not
     in `DIST_SUBDIRS'.  Think of the former as a way to tell which
     directories listed in the latter should be built.

   * Any directory listed in `DIST_SUBDIRS' and `SUBDIRS' must be
     configured.

     I.e., the `Makefile' must exists or the recursive `make' rules
     will not be able to process the directory.

   * Any configured directory must be listed in `DIST_SUBDIRS'.

     So that the cleaning rule remove the generated `Makefile's.  It
     would be correct to see `DIST_SUBDIRS' as a variable that lists
     all the directories that have been configured.

   In order to prevent recursion in some non-configured directory you
must therefore ensure that this directory does not appear in
`DIST_SUBDIRS' (and `SUBDIRS').  For instance if you define `SUBDIRS'
conditionally using `AC_SUBST' and do not define `DIST_SUBDIRS'
explicitly, it will be default to `$(SUBDIRS)'; another possibility is
to force `DIST_SUBDIRS = $(SUBDIRS)'.

   Of course, directories which are omitted from `DIST_SUBDIRS' will
not be distributed unless you make other arrangements for this to
happen (for instance always running `make dist' in a configuration
where all directories are known to appear in `DIST_SUBDIRS'; or writing
a `dist-hook' target to distribute these directories).

   In few packages, non-configured directories are not even expected to
be distributed.  Although these packages do not require the
aforementioned extra arrangements, there is another pitfall.  If the
name of a directory appears in `SUBDIRS' or `DIST_SUBDIRS', `automake'
will make sure the directory exists.  Consequently `automake' cannot be
run on such a distribution when one directory has been omitted.  One
way to avoid this check is to use the `AC_SUBST' method to declare
conditional directories; since `automake' does not know the values of
`AC_SUBST' variables it cannot ensure the corresponding directory exist.


File: automake.info,  Node: Alternative,  Next: Subpackages,  Prev: Conditional Subdirectories,  Up: Directories

6.3 An Alternative Approach to Subdirectories
=============================================

If you've ever read Peter Miller's excellent paper, Recursive Make
Considered Harmful
(http://www.pcug.org.au/~millerp/rmch/recu-make-cons-harm.html), the
preceding sections on the use of subdirectories will probably come as
unwelcome advice.  For those who haven't read the paper, Miller's main
thesis is that recursive `make' invocations are both slow and
error-prone.

   Automake provides sufficient cross-directory support (1) to enable
you to write a single `Makefile.am' for a complex multi-directory
package.

   By default an installable file specified in a subdirectory will have
its directory name stripped before installation.  For instance, in this
example, the header file will be installed as `$(includedir)/stdio.h':

     include_HEADERS = inc/stdio.h

   However, the `nobase_' prefix can be used to circumvent this path
stripping.  In this example, the header file will be installed as
`$(includedir)/sys/types.h':

     nobase_include_HEADERS = sys/types.h

   `nobase_' should be specified first when used in conjunction with
either `dist_' or `nodist_' (*note Dist::).  For instance:

     nobase_dist_pkgdata_DATA = images/vortex.pgm

   ---------- Footnotes ----------

   (1) We believe.  This work is new and there are probably warts.
*Note Introduction::, for information on reporting bugs.


File: automake.info,  Node: Subpackages,  Prev: Alternative,  Up: Directories

6.4 Nesting Packages
====================

In the GNU Build System, packages can be nested to arbitrary depth.
This means that a package can embedded other packages with their own
`configure', `Makefile's, etc.

   These other packages should just appear as subdirectories of their
parent package.  They must be listed in `SUBDIRS' like other ordinary
directories.  However the subpackage's `Makefile's should be output by
its own `configure' script, not by the parent's `configure'.  This is
achieved using the `AC_CONFIG_SUBDIRS' Autoconf macro (*note
AC_CONFIG_SUBDIRS: (autoconf)Subdirectories.).

   Here is an example package for an `arm' program that links with an
`hand' library that is a nested package in subdirectory `hand/'.

   `arm''s `configure.ac':

     AC_INIT([arm], [1.0])
     AC_CONFIG_AUX_DIR([.])
     AM_INIT_AUTOMAKE
     AC_PROG_CC
     AC_CONFIG_FILES([Makefile])
     # Call hand's ./configure script recursively.
     AC_CONFIG_SUBDIRS([hand])
     AC_OUTPUT

   `arm''s `Makefile.am':

     # Build the library in the hand subdirectory first.
     SUBDIRS = hand

     # Include hand's header when compiling this directory.
     AM_CPPFLAGS = -I$(srcdir)/hand

     bin_PROGRAMS = arm
     arm_SOURCES = arm.c
     # link with the hand library.
     arm_LDADD = hand/libhand.a

   Now here is `hand''s `hand/configure.ac':

     AC_INIT([hand], [1.2])
     AC_CONFIG_AUX_DIR([.])
     AM_INIT_AUTOMAKE
     AC_PROG_CC
     AC_PROG_RANLIB
     AC_CONFIG_FILES([Makefile])
     AC_OUTPUT

and its `hand/Makefile.am':

     lib_LIBRARIES = libhand.a
     libhand_a_SOURCES = hand.c

   When `make dist' is run from the top-level directory it will create
an archive `arm-1.0.tar.gz' that contains the `arm' code as well as the
`hand' subdirectory.  This package can be built and installed like any
ordinary package, with the usual `./configure && make && make install'
sequence (the `hand' subpackage will be built and installed by the
process).

   When `make dist' is run from the hand directory, it will create a
self-contained `hand-1.2.tar.gz' archive.  So although it appears to be
embedded in another package, it can still be used separately.

   The purpose of the `AC_CONFIG_AUX_DIR([.])' instruction is to force
Automake and Autoconf into search auxiliary script in the current
directory.  For instance this means that there will be two copies of
`install-sh': one in the top-level of the `arm' package, and another
one in the `hand/' subdirectory for the `hand' package.

   The historical default is to search these auxiliary scripts in the
immediate parent and grand-parent directories.  So if the
`AC_CONFIG_AUX_DIR([.])' line was removed from `hand/configure.ac',
that subpackage would share the auxiliary script of the `arm' package.
This may looks like a gain in size (a few kilobytes), but it is
actually a loss of modularity as the `hand' subpackage is no longer
self-contained (`make dist' in the subdirectory will not work anymore).

   Packages that do not use Automake need more work to be integrated
this way.  *Note Third-Party Makefiles::.


File: automake.info,  Node: Programs,  Next: Other objects,  Prev: Directories,  Up: Top

7 Building Programs and Libraries
*********************************

A large part of Automake's functionality is dedicated to making it easy
to build programs and libraries.

* Menu:

* A Program::                   Building a program
* A Library::                   Building a library
* A Shared Library::            Building a Libtool library
* Program and Library Variables::  Variables controlling program and
                                library builds
* Default _SOURCES::            Default source files
* LIBOBJS::                     Special handling for LIBOBJS and ALLOCA
* Program variables::           Variables used when building a program
* Yacc and Lex::                Yacc and Lex support
* C++ Support::                 Compiling C++ sources
* Assembly Support::            Compiling assembly sources
* Fortran 77 Support::          Compiling Fortran 77 sources
* Fortran 9x Support::          Compiling Fortran 9x sources
* Java Support::                Compiling Java sources
* Support for Other Languages::  Compiling other languages
* ANSI::                        Automatic de-ANSI-fication
* Dependencies::                Automatic dependency tracking
* EXEEXT::                      Support for executable extensions


File: automake.info,  Node: A Program,  Next: A Library,  Up: Programs

7.1 Building a program
======================

In order to build a program, you need to tell Automake which sources
are part of it, and which libraries it should be linked with.

   This section also covers conditional compilation of sources or
programs.  Most of the comments about these also apply to libraries
(*note A Library::) and libtool libraries (*note A Shared Library::).

* Menu:

* Program Sources::             Defining program sources
* Linking::                     Linking with libraries or extra objects
* Conditional Sources::         Handling conditional sources
* Conditional Programs::        Building program conditionally


File: automake.info,  Node: Program Sources,  Next: Linking,  Up: A Program

7.1.1 Defining program sources
------------------------------

In a directory containing source that gets built into a program (as
opposed to a library or a script), the `PROGRAMS' primary is used.
Programs can be installed in `bindir', `sbindir', `libexecdir',
`pkglibdir', or not at all (`noinst').  They can also be built only for
`make check', in which case the prefix is `check'.

   For instance:

     bin_PROGRAMS = hello

   In this simple case, the resulting `Makefile.in' will contain code
to generate a program named `hello'.

   Associated with each program are several assisting variables which
are named after the program.  These variables are all optional, and have
reasonable defaults.  Each variable, its use, and default is spelled out
below; we use the "hello" example throughout.

   The variable `hello_SOURCES' is used to specify which source files
get built into an executable:

     hello_SOURCES = hello.c version.c getopt.c getopt1.c getopt.h system.h

   This causes each mentioned `.c' file to be compiled into the
corresponding `.o'.  Then all are linked to produce `hello'.

   If `hello_SOURCES' is not specified, then it defaults to the single
file `hello.c' (*note Default _SOURCES::).  

   Multiple programs can be built in a single directory.  Multiple
programs can share a single source file, which must be listed in each
`_SOURCES' definition.

   Header files listed in a `_SOURCES' definition will be included in
the distribution but otherwise ignored.  In case it isn't obvious, you
should not include the header file generated by `configure' in a
`_SOURCES' variable; this file should not be distributed.  Lex (`.l')
and Yacc (`.y') files can also be listed; see *Note Yacc and Lex::.


File: automake.info,  Node: Linking,  Next: Conditional Sources,  Prev: Program Sources,  Up: A Program

7.1.2 Linking the program
-------------------------

If you need to link against libraries that are not found by
`configure', you can use `LDADD' to do so.  This variable is used to
specify additional objects or libraries to link with; it is
inappropriate for specifying specific linker flags, you should use
`AM_LDFLAGS' for this purpose.  

   Sometimes, multiple programs are built in one directory but do not
share the same link-time requirements.  In this case, you can use the
`PROG_LDADD' variable (where PROG is the name of the program as it
appears in some `_PROGRAMS' variable, and usually written in lowercase)
to override the global `LDADD'.  If this variable exists for a given
program, then that program is not linked using `LDADD'.  

   For instance, in GNU cpio, `pax', `cpio' and `mt' are linked against
the library `libcpio.a'.  However, `rmt' is built in the same
directory, and has no such link requirement.  Also, `mt' and `rmt' are
only built on certain architectures.  Here is what cpio's
`src/Makefile.am' looks like (abridged):

     bin_PROGRAMS = cpio pax $(MT)
     libexec_PROGRAMS = $(RMT)
     EXTRA_PROGRAMS = mt rmt

     LDADD = ../lib/libcpio.a $(INTLLIBS)
     rmt_LDADD =

     cpio_SOURCES = ...
     pax_SOURCES = ...
     mt_SOURCES = ...
     rmt_SOURCES = ...

   `PROG_LDADD' is inappropriate for passing program-specific linker
flags (except for `-l', `-L', `-dlopen' and `-dlpreopen').  So, use the
`PROG_LDFLAGS' variable for this purpose.

   It is also occasionally useful to have a program depend on some other
target which is not actually part of that program.  This can be done
using the `PROG_DEPENDENCIES' variable.  Each program depends on the
contents of such a variable, but no further interpretation is done.

   If `PROG_DEPENDENCIES' is not supplied, it is computed by Automake.
The automatically-assigned value is the contents of `PROG_LDADD', with
most configure substitutions, `-l', `-L', `-dlopen' and `-dlpreopen'
options removed.  The configure substitutions that are left in are only
`$(LIBOBJS)' and `$(ALLOCA)'; these are left because it is known that
they will not cause an invalid value for `PROG_DEPENDENCIES' to be
generated.


File: automake.info,  Node: Conditional Sources,  Next: Conditional Programs,  Prev: Linking,  Up: A Program

7.1.3 Conditional compilation of sources
----------------------------------------

You can't put a configure substitution (e.g., `@FOO@' or `$(FOO)' where
`FOO' is defined via `AC_SUBST') into a `_SOURCES' variable.  The
reason for this is a bit hard to explain, but suffice to say that it
simply won't work.  Automake will give an error if you try to do this.

   Fortunately there are two other ways to achieve the same result.
One is to use configure substitutions in `_LDADD' variables, the other
is to use an Automake conditional.

7.1.3.1 Conditional compilation using `_LDADD' substitutions
............................................................

Automake must know all the source files that could possibly go into a
program, even if not all the files are built in every circumstance.  Any
files which are only conditionally built should be listed in the
appropriate `EXTRA_' variable.  For instance, if `hello-linux.c' or
`hello-generic.c' were conditionally included in `hello', the
`Makefile.am' would contain:

     bin_PROGRAMS = hello
     hello_SOURCES = hello-common.c
     EXTRA_hello_SOURCES = hello-linux.c hello-generic.c
     hello_LDADD = $(HELLO_SYSTEM)
     hello_DEPENDENCIES = $(HELLO_SYSTEM)

You can then setup the `$(HELLO_SYSTEM)' substitution from
`configure.ac':

     ...
     case $host in
       *linux*) HELLO_SYSTEM='hello-linux.$(OBJEXT)' ;;
       *)       HELLO_SYSTEM='hello-generic.$(OBJEXT)' ;;
     esac
     AC_SUBST([HELLO_SYSTEM])
     ...

   In this case, `HELLO_SYSTEM' should be replaced by `hello-linux.o'
or `hello-generic.o', and added to `hello_DEPENDENCIES' and
`hello_LDADD' in order to be built and linked in.

7.1.3.2 Conditional compilation using Automake conditionals
...........................................................

An often simpler way to compile source files conditionally is to use
Automake conditionals.  For instance, you could use this `Makefile.am'
construct to build the same `hello' example:

     bin_PROGRAMS = hello
     if LINUX
     hello_SOURCES = hello-linux.c hello-common.c
     else
     hello_SOURCES = hello-generic.c hello-common.c
     endif

   In this case, your `configure.ac' should setup the `LINUX'
conditional using `AM_CONDITIONAL' (*note Conditionals::).

   When using conditionals like this you don't need to use the `EXTRA_'
variable, because Automake will examine the contents of each variable
to construct the complete list of source files.

   If your program uses a lot of files, you will probably prefer a
conditional `+='.

     bin_PROGRAMS = hello
     hello_SOURCES = hello-common.c
     if LINUX
     hello_SOURCES += hello-linux.c
     else
     hello_SOURCES += hello-generic.c
     endif


File: automake.info,  Node: Conditional Programs,  Prev: Conditional Sources,  Up: A Program

7.1.4 Conditional compilation of programs
-----------------------------------------

Sometimes it is useful to determine the programs that are to be built
at configure time.  For instance, GNU `cpio' only builds `mt' and `rmt'
under special circumstances.  The means to achieve conditional
compilation of programs are the same you can use to compile source
files conditionally: substitutions or conditionals.

7.1.4.1 Conditional programs using `configure' substitutions
............................................................

In this case, you must notify Automake of all the programs that can
possibly be built, but at the same time cause the generated
`Makefile.in' to use the programs specified by `configure'.  This is
done by having `configure' substitute values into each `_PROGRAMS'
definition, while listing all optionally built programs in
`EXTRA_PROGRAMS'.

     bin_PROGRAMS = cpio pax $(MT)
     libexec_PROGRAMS = $(RMT)
     EXTRA_PROGRAMS = mt rmt

   As explained in *Note EXEEXT::, Automake will rewrite
`bin_PROGRAMS', `libexec_PROGRAMS', and `EXTRA_PROGRAMS', appending
`$(EXEEXT)' to each binary.  Obviously it cannot rewrite values
obtained at run-time through `configure' substitutions, therefore you
should take care of appending `$(EXEEXT)' yourself, as in
`AC_SUBST([MT], ['mt${EXEEXT}'])'.

7.1.4.2 Conditional programs using Automake conditionals
........................................................

You can also use Automake conditionals (*note Conditionals::) to select
programs to be built.  In this case you don't have to worry about
`$(EXEEXT)' or `EXTRA_PROGRAMS'.

     bin_PROGRAMS = cpio pax
     if WANT_MT
       bin_PROGRAMS += mt
     endif
     if WANT_RMT
       libexec_PROGRAMS = rmt
     endif


File: automake.info,  Node: A Library,  Next: A Shared Library,  Prev: A Program,  Up: Programs

7.2 Building a library
======================

Building a library is much like building a program.  In this case, the
name of the primary is `LIBRARIES'.  Libraries can be installed in
`libdir' or `pkglibdir'.

   *Note A Shared Library::, for information on how to build shared
libraries using libtool and the `LTLIBRARIES' primary.

   Each `_LIBRARIES' variable is a list of the libraries to be built.
For instance to create a library named `libcpio.a', but not install it,
you would write:

     noinst_LIBRARIES = libcpio.a

   The sources that go into a library are determined exactly as they are
for programs, via the `_SOURCES' variables.  Note that the library name
is canonicalized (*note Canonicalization::), so the `_SOURCES' variable
corresponding to `liblob.a' is `liblob_a_SOURCES', not
`liblob.a_SOURCES'.

   Extra objects can be added to a library using the `LIBRARY_LIBADD'
variable.  This should be used for objects determined by `configure'.
Again from `cpio':

     libcpio_a_LIBADD = $(LIBOBJS) $(ALLOCA)

   In addition, sources for extra objects that will not exist until
configure-time must be added to the `BUILT_SOURCES' variable (*note
Sources::).

   Building a static library is done by compiling all object files, then
by invoking `$(AR) $(ARFLAGS)' followed by the name of the library and
the list of objects, and finally by calling `$(RANLIB)' on that
library.  You should call `AC_PROG_RANLIB' from your `configure.ac' to
define `RANLIB' (Automake will complain otherwise).  `AR' and `ARFLAGS'
default to `ar' and `cru' respectively; you can override these two
variables my setting them in your `Makefile.am', by `AC_SUBST'ing them
from your `configure.ac', or by defining a per-library `maude_AR'
variable (*note Program and Library Variables::).


File: automake.info,  Node: A Shared Library,  Next: Program and Library Variables,  Prev: A Library,  Up: Programs

7.3 Building a Shared Library
=============================

Building shared libraries portably is a relatively complex matter.  For
this reason, GNU Libtool (*note Introduction: (libtool)Top.) was
created to help build shared libraries in a platform-independent way.

* Menu:

* Libtool Concept::             Introducing Libtool
* Libtool Libraries::           Declaring Libtool Libraries
* Conditional Libtool Libraries::  Building Libtool Libraries Conditionally
* Conditional Libtool Sources::  Choosing Library Sources Conditionally
* Libtool Convenience Libraries::  Building Convenience Libtool Libraries
* Libtool Modules::             Building Libtool Modules
* Libtool Flags::               Using _LIBADD and _LDFLAGS
* LTLIBOBJS::                   Using $(LTLIBOBJS) and $(LTALLOCA)
* Libtool Issues::              Common Issues Related to Libtool's Use


File: automake.info,  Node: Libtool Concept,  Next: Libtool Libraries,  Up: A Shared Library

7.3.1 The Libtool Concept
-------------------------

Libtool abstracts shared and static libraries into a unified concept
henceforth called "libtool libraries".  Libtool libraries are files
using the `.la' suffix, and can designate a static library, a shared
library, or maybe both.  Their exact nature cannot be determined until
`./configure' is run: not all platforms support all kinds of libraries,
and users can explicitly select which libraries should be built.
(However the package's maintainers can tune the default, *note The
`AC_PROG_LIBTOOL' macro: (libtool)AC_PROG_LIBTOOL.)

   Because object files for shared and static libraries must be compiled
differently, libtool is also used during compilation.  Object files
built by libtool are called "libtool objects": these are files using
the `.lo' suffix.  Libtool libraries are built from these libtool
objects.

   You should not assume anything about the structure of `.la' or `.lo'
files and how libtool constructs them: this is libtool's concern, and
the last thing one wants is to learn about libtool's guts.  However the
existence of these files matters, because they are used as targets and
dependencies in `Makefile's rules when building libtool libraries.
There are situations where you may have to refer to these, for instance
when expressing dependencies for building source files conditionally
(*note Conditional Libtool Sources::).

   People considering writing a plug-in system, with dynamically loaded
modules, should look into `libltdl': libtool's dlopening library (*note
Using libltdl: (libtool)Using libltdl.).  This offers a portable
dlopening facility to load libtool libraries dynamically, and can also
achieve static linking where unavoidable.

   Before we discuss how to use libtool with Automake in details, it
should be noted that the libtool manual also has a section about how to
use Automake with libtool (*note Using Automake with Libtool:
(libtool)Using Automake.).


File: automake.info,  Node: Libtool Libraries,  Next: Conditional Libtool Libraries,  Prev: Libtool Concept,  Up: A Shared Library

7.3.2 Building Libtool Libraries
--------------------------------

Automake uses libtool to build libraries declared with the
`LTLIBRARIES' primary.  Each `_LTLIBRARIES' variable is a list of
libtool libraries to build.  For instance, to create a libtool library
named `libgettext.la', and install it in `libdir', write:

     lib_LTLIBRARIES = libgettext.la
     libgettext_la_SOURCES = gettext.c gettext.h ...

   Automake predefines the variable `pkglibdir', so you can use
`pkglib_LTLIBRARIES' to install libraries in `$(libdir)/@PACKAGE@/'.


File: automake.info,  Node: Conditional Libtool Libraries,  Next: Conditional Libtool Sources,  Prev: Libtool Libraries,  Up: A Shared Library

7.3.3 Building Libtool Libraries Conditionally
----------------------------------------------

Like conditional programs (*note Conditional Programs::), there are two
main ways to build conditional libraries: using Automake conditionals
or using Autoconf `AC_SUBST'itutions.

   The important implementation detail you have to be aware of is that
the place where a library will be installed matters to libtool: it
needs to be indicated _at link-time_ using the `-rpath' option.

   For libraries whose destination directory is known when Automake
runs, Automake will automatically supply the appropriate `-rpath'
option to libtool. This is the case for libraries listed explicitly in
some installable `_LTLIBRARIES' variables such as `lib_LTLIBRARIES'.

   However, for libraries determined at configure time (and thus
mentioned in `EXTRA_LTLIBRARIES'), Automake does not know the final
installation directory.  For such libraries you must add the `-rpath'
option to the appropriate `_LDFLAGS' variable by hand.

   The examples below illustrate the differences between these two
methods.

   Here is an example where `$(WANTEDLIBS)' is an `AC_SUBST'ed variable
set at `./configure'-time to either `libfoo.la', `libbar.la', both, or
none.  Although `$(WANTEDLIBS)' appears in the `lib_LTLIBRARIES',
Automake cannot guess it relates to `libfoo.la' or `libbar.la' by the
time it creates the link rule for these two libraries.  Therefore the
`-rpath' argument must be explicitly supplied.

     EXTRA_LTLIBRARIES = libfoo.la libbar.la
     lib_LTLIBRARIES = $(WANTEDLIBS)
     libfoo_la_SOURCES = foo.c ...
     libfoo_la_LDFLAGS = -rpath '$(libdir)'
     libbar_la_SOURCES = bar.c ...
     libbar_la_LDFLAGS = -rpath '$(libdir)'

   Here is how the same `Makefile.am' would look using Automake
conditionals named `WANT_LIBFOO' and `WANT_LIBBAR'.  Now Automake is
able to compute the `-rpath' setting itself, because it's clear that
both libraries will end up in `$(libdir)' if they are installed.

     lib_LTLIBRARIES =
     if WANT_LIBFOO
     lib_LTLIBRARIES += libfoo.la
     endif
     if WANT_LIBBAR
     lib_LTLIBRARIES += libbar.la
     endif
     libfoo_la_SOURCES = foo.c ...
     libbar_la_SOURCES = bar.c ...


File: automake.info,  Node: Conditional Libtool Sources,  Next: Libtool Convenience Libraries,  Prev: Conditional Libtool Libraries,  Up: A Shared Library

7.3.4 Libtool Libraries with Conditional Sources
------------------------------------------------

Conditional compilation of sources in a library can be achieved in the
same way as conditional compilation of sources in a program (*note
Conditional Sources::).  The only difference is that `_LIBADD' should
be used instead of `_LDADD' and that it should mention libtool objects
(`.lo' files).

   So, to mimic the `hello' example from *Note Conditional Sources::,
we could build a `libhello.la' library using either `hello-linux.c' or
`hello-generic.c' with the following `Makefile.am'.

     lib_LTLIBRARIES = libhello.la
     libhello_la_SOURCES = hello-common.c
     EXTRA_libhello_la_SOURCES = hello-linux.c hello-generic.c
     libhello_la_LIBADD = $(HELLO_SYSTEM)
     libhello_la_DEPENDENCIES = $(HELLO_SYSTEM)

And make sure `$(HELLO_SYSTEM)' is set to either `hello-linux.lo' or
`hello-generic.lo' in `./configure'.

   Or we could simply use an Automake conditional as follows.

     lib_LTLIBRARIES = libhello.la
     libhello_la_SOURCES = hello-common.c
     if LINUX
     libhello_la_SOURCES += hello-linux.c
     else
     libhello_la_SOURCES += hello-generic.c
     endif


File: automake.info,  Node: Libtool Convenience Libraries,  Next: Libtool Modules,  Prev: Conditional Libtool Sources,  Up: A Shared Library

7.3.5 Libtool Convenience Libraries
-----------------------------------

Sometimes you want to build libtool libraries which should not be
installed.  These are called "libtool convenience libraries" and are
typically used to encapsulate many sublibraries, later gathered into
one big installed library.

   Libtool convenience libraries are declared by `noinst_LTLIBRARIES',
`check_LTLIBRARIES', or even `EXTRA_LTLIBRARIES'.  Unlike installed
libtool libraries they do not need an `-rpath' flag at link time
(actually this is the only difference).

   Convenience libraries listed in `noinst_LTLIBRARIES' are always
built.  Those listed in `check_LTLIBRARIES' are built only upon `make
check'.  Finally, libraries listed in `EXTRA_LTLIBRARIES' are never
built explicitly: Automake outputs rules to build them, but if the
library does not appear as a Makefile dependency anywhere it won't be
built (this is why `EXTRA_LTLIBRARIES' is used for conditional
compilation).

   Here is a sample setup merging libtool convenience libraries from
subdirectories into one main `libtop.la' library.

     # -- Top-level Makefile.am --
     SUBDIRS = sub1 sub2 ...
     lib_LTLIBRARIES = libtop.la
     libtop_la_SOURCES =
     libtop_la_LIBADD = \
       sub1/libsub1.la \
       sub2/libsub2.la \
       ...

     # -- sub1/Makefile.am --
     noinst_LTLIBRARIES = libsub1.la
     libsub1_la_SOURCES = ...

     # -- sub2/Makefile.am --
     # showing nested convenience libraries
     SUBDIRS = sub2.1 sub2.2 ...
     noinst_LTLIBRARIES = libsub2.la
     libsub2_la_SOURCES =
     libsub2_la_LIBADD = \
       sub21/libsub21.la \
       sub22/libsub22.la \
       ...

   When using such setup, beware that `automake' will assume
`libtop.la' is to be linked with the C linker.  This is because
`libtop_la_SOURCES' is empty, so `automake' picks C as default
language.  If `libtop_la_SOURCES' was not empty, `automake' would
select the linker as explained in *Note How the Linker is Chosen::.

   If one of the sublibraries contains non-C source, it is important
that the appropriate linker be chosen.  One way to achieve this is to
pretend that there is such a non-C file among the sources of the
library, thus forcing `automake' to select the appropriate linker.
Here is the top-level `Makefile' of our example updated to force C++
linking.

     SUBDIRS = sub1 sub2 ...
     lib_LTLIBRARIES = libtop.la
     libtop_la_SOURCES =
     # Dummy C++ source to cause C++ linking.
     nodist_EXTRA_libtop_la_SOURCES = dummy.cxx
     libtop_la_LIBADD = \
       sub1/libsub1.la \
       sub2/libsub2.la \
       ...

   `EXTRA_*_SOURCES' variables are used to keep track of source files
that might be compiled (this is mostly useful when doing conditional
compilation using `AC_SUBST', *note Conditional Libtool Sources::), and
the `nodist_' prefix means the listed sources are not to be distributed
(*note Program and Library Variables::).  In effect the file
`dummy.cxx' does not need to exist in the source tree.  Of course if
you have some real source file to list in `libtop_la_SOURCES' there is
no point in cheating with `nodist_EXTRA_libtop_la_SOURCES'.


File: automake.info,  Node: Libtool Modules,  Next: Libtool Flags,  Prev: Libtool Convenience Libraries,  Up: A Shared Library

7.3.6 Libtool Modules
---------------------

These are libtool libraries meant to be dlopened.  They are indicated
to libtool by passing `-module' at link-time.

     pkglib_LTLIBRARIES = mymodule.la
     mymodule_la_SOURCES = doit.c
     mymodule_la_LDFLAGS = -module

   Ordinarily, Automake requires that a library's name starts with
`lib'.  However, when building a dynamically loadable module you might
wish to use a "nonstandard" name.  Automake will not complain about
such nonstandard name if it knows the library being built is a libtool
module, i.e., if `-module' explicitly appears in the library's
`_LDFLAGS' variable (or in the common `AM_LDFLAGS' variable when no
per-library `_LDFLAGS' variable is defined).

   As always, `AC_SUBST' variables are black boxes to Automake since
their values are not yet known when `automake' is run.  Therefore if
`-module' is set via such a variable, Automake cannot notice it and
will proceed as if the library was an ordinary libtool library, with
strict naming.

   If `mymodule_la_SOURCES' is not specified, then it defaults to the
single file `mymodule.c' (*note Default _SOURCES::).


File: automake.info,  Node: Libtool Flags,  Next: LTLIBOBJS,  Prev: Libtool Modules,  Up: A Shared Library

7.3.7 _LIBADD and _LDFLAGS
--------------------------

As shown in previous sections, the `LIBRARY_LIBADD' variable should be
used to list extra libtool objects (`.lo' files) or libtool libraries
(`.la') to add to LIBRARY.

   The `LIBRARY_LDFLAGS' variable is the place to list additional
libtool flags, such as `-version-info', `-static', and a lot more.
*Note Link mode: (libtool)Link mode.


File: automake.info,  Node: LTLIBOBJS,  Next: Libtool Issues,  Prev: Libtool Flags,  Up: A Shared Library

7.3.8 `LTLIBOBJS' and `LTALLOCA'
--------------------------------

Where an ordinary library might include `$(LIBOBJS)' or `$(ALLOCA)'
(*note LIBOBJS::), a libtool library must use `$(LTLIBOBJS)' or
`$(LTALLOCA)'.  This is required because the object files that libtool
operates on do not necessarily end in `.o'.

   Nowadays, the computation of `LTLIBOBJS' from `LIBOBJS' is performed
automatically by Autoconf (*note `AC_LIBOBJ' vs. `LIBOBJS':
(autoconf)AC_LIBOBJ vs LIBOBJS.).


File: automake.info,  Node: Libtool Issues,  Prev: LTLIBOBJS,  Up: A Shared Library

7.3.9 Common Issues Related to Libtool's Use
--------------------------------------------

7.3.9.1 `required file `./ltmain.sh' not found'
...............................................

Libtool comes with a tool called `libtoolize' that will install
libtool's supporting files into a package.  Running this command will
install `ltmain.sh'.  You should execute it before `aclocal' and
`automake'.

   People upgrading old packages to newer autotools are likely to face
this issue because older Automake versions used to call `libtoolize'.
Therefore old build scripts do not call `libtoolize'.

   Since Automake 1.6, it has been decided that running `libtoolize'
was none of Automake's business.  Instead, that functionality has been
moved into the `autoreconf' command (*note Using `autoreconf':
(autoconf)autoreconf Invocation.).  If you do not want to remember what
to run and when, just learn the `autoreconf' command.  Hopefully,
replacing existing `bootstrap.sh' or `autogen.sh' scripts by a call to
`autoreconf' should also free you from any similar incompatible change
in the future.

7.3.9.2 Objects `created with both libtool and without'
.......................................................

Sometimes, the same source file is used both to build a libtool library
and to build another non-libtool target (be it a program or another
library).

   Let's consider the following `Makefile.am'.

     bin_PROGRAMS = prog
     prog_SOURCES = prog.c foo.c ...

     lib_LTLIBRARIES = libfoo.la
     libfoo_la_SOURCES = foo.c ...

(In this trivial case the issue could be avoided by linking `libfoo.la'
with `prog' instead of listing `foo.c' in `prog_SOURCES'.  But let's
assume we really want to keep `prog' and `libfoo.la' separate.)

   Technically, it means that we should build `foo.$(OBJEXT)' for
`prog', and `foo.lo' for `libfoo.la'.  The problem is that in the
course of creating `foo.lo', libtool may erase (or replace)
`foo.$(OBJEXT)' - and this cannot be avoided.

   Therefore, when Automake detects this situation it will complain
with a message such as
     object `foo.$(OBJEXT)' created both with libtool and without

   A workaround for this issue is to ensure that these two objects get
different basenames.  As explained in *Note renamed objects::, this
happens automatically when per-targets flags are used.

     bin_PROGRAMS = prog
     prog_SOURCES = prog.c foo.c ...
     prog_CFLAGS = $(AM_CFLAGS)

     lib_LTLIBRARIES = libfoo.la
     libfoo_la_SOURCES = foo.c ...

Adding `prog_CFLAGS = $(AM_CFLAGS)' is almost a no-op, because when the
`prog_CFLAGS' is defined, it is used instead of `AM_CFLAGS'.  However
as a side effect it will cause `prog.c' and `foo.c' to be compiled as
`prog-prog.$(OBJEXT)' and `prog-foo.$(OBJEXT)' which solves the issue.


File: automake.info,  Node: Program and Library Variables,  Next: Default _SOURCES,  Prev: A Shared Library,  Up: Programs

7.4 Program and Library Variables
=================================

Associated with each program are a collection of variables which can be
used to modify how that program is built.  There is a similar list of
such variables for each library.  The canonical name of the program (or
library) is used as a base for naming these variables.

   In the list below, we use the name "maude" to refer to the program or
library.  In your `Makefile.am' you would replace this with the
canonical name of your program.  This list also refers to "maude" as a
program, but in general the same rules apply for both static and dynamic
libraries; the documentation below notes situations where programs and
libraries differ.

`maude_SOURCES'
     This variable, if it exists, lists all the source files which are
     compiled to build the program.  These files are added to the
     distribution by default.  When building the program, Automake will
     cause each source file to be compiled to a single `.o' file (or
     `.lo' when using libtool).  Normally these object files are named
     after the source file, but other factors can change this.  If a
     file in the `_SOURCES' variable has an unrecognized extension,
     Automake will do one of two things with it.  If a suffix rule
     exists for turning files with the unrecognized extension into `.o'
     files, then automake will treat this file as it will any other
     source file (*note Support for Other Languages::).  Otherwise, the
     file will be ignored as though it were a header file.

     The prefixes `dist_' and `nodist_' can be used to control whether
     files listed in a `_SOURCES' variable are distributed.  `dist_' is
     redundant, as sources are distributed by default, but it can be
     specified for clarity if desired.

     It is possible to have both `dist_' and `nodist_' variants of a
     given `_SOURCES' variable at once; this lets you easily distribute
     some files and not others, for instance:

          nodist_maude_SOURCES = nodist.c
          dist_maude_SOURCES = dist-me.c

     By default the output file (on Unix systems, the `.o' file) will be
     put into the current build directory.  However, if the option
     `subdir-objects' is in effect in the current directory then the
     `.o' file will be put into the subdirectory named after the source
     file.  For instance, with `subdir-objects' enabled,
     `sub/dir/file.c' will be compiled to `sub/dir/file.o'.  Some
     people prefer this mode of operation.  You can specify
     `subdir-objects' in `AUTOMAKE_OPTIONS' (*note Options::).  

`EXTRA_maude_SOURCES'
     Automake needs to know the list of files you intend to compile
     _statically_.  For one thing, this is the only way Automake has of
     knowing what sort of language support a given `Makefile.in'
     requires.  (1)  This means that, for example, you can't put a
     configure substitution like `@my_sources@' into a `_SOURCES'
     variable.  If you intend to conditionally compile source files and
     use `configure' to substitute the appropriate object names into,
     e.g., `_LDADD' (see below), then you should list the corresponding
     source files in the `EXTRA_' variable.

     This variable also supports `dist_' and `nodist_' prefixes, e.g.,
     `nodist_EXTRA_maude_SOURCES'.

`maude_AR'
     A static library is created by default by invoking `$(AR)
     $(ARFLAGS)' followed by the name of the library and then the
     objects being put into the library.  You can override this by
     setting the `_AR' variable.  This is usually used with C++; some
     C++ compilers require a special invocation in order to instantiate
     all the templates which should go into a library.  For instance,
     the SGI C++ compiler likes this variable set like so:
          libmaude_a_AR = $(CXX) -ar -o

`maude_LIBADD'
     Extra objects can be added to a _library_ using the `_LIBADD'
     variable.  For instance this should be used for objects determined
     by `configure' (*note A Library::).

`maude_LDADD'
     Extra objects can be added to a _program_ by listing them in the
     `_LDADD' variable.  For instance this should be used for objects
     determined by `configure' (*note Linking::).

     `_LDADD' and `_LIBADD' are inappropriate for passing
     program-specific linker flags (except for `-l', `-L', `-dlopen'
     and `-dlpreopen').  Use the `_LDFLAGS' variable for this purpose.

     For instance, if your `configure.ac' uses `AC_PATH_XTRA', you
     could link your program against the X libraries like so:

          maude_LDADD = $(X_PRE_LIBS) $(X_LIBS) $(X_EXTRA_LIBS)

`maude_LDFLAGS'
     This variable is used to pass extra flags to the link step of a
     program or a shared library.

`maude_DEPENDENCIES'
     It is also occasionally useful to have a program depend on some
     other target which is not actually part of that program.  This can
     be done using the `_DEPENDENCIES' variable.  Each program depends
     on the contents of such a variable, but no further interpretation
     is done.

     If `_DEPENDENCIES' is not supplied, it is computed by Automake.
     The automatically-assigned value is the contents of `_LDADD' or
     `_LIBADD', with most configure substitutions, `-l', `-L',
     `-dlopen' and `-dlpreopen' options removed.  The configure
     substitutions that are left in are only `$(LIBOBJS)' and
     `$(ALLOCA)'; these are left because it is known that they will not
     cause an invalid value for `_DEPENDENCIES' to be generated.

`maude_LINK'
     You can override the linker on a per-program basis.  By default the
     linker is chosen according to the languages used by the program.
     For instance, a program that includes C++ source code would use
     the C++ compiler to link.  The `_LINK' variable must hold the name
     of a command which can be passed all the `.o' file names as
     arguments.  Note that the name of the underlying program is _not_
     passed to `_LINK'; typically one uses `$@':

          maude_LINK = $(CCLD) -magic -o $@

`maude_CCASFLAGS'
`maude_CFLAGS'
`maude_CPPFLAGS'
`maude_CXXFLAGS'
`maude_FFLAGS'
`maude_GCJFLAGS'
`maude_LFLAGS'
`maude_OBJCFLAGS'
`maude_RFLAGS'
`maude_YFLAGS'
     Automake allows you to set compilation flags on a per-program (or
     per-library) basis.  A single source file can be included in
     several programs, and it will potentially be compiled with
     different flags for each program.  This works for any language
     directly supported by Automake.  These "per-target compilation
     flags" are `_CCASFLAGS', `_CFLAGS', `_CPPFLAGS', `_CXXFLAGS',
     `_FFLAGS', `_GCJFLAGS', `_LFLAGS', `_OBJCFLAGS', `_RFLAGS', and
     `_YFLAGS'.

     When using a per-target compilation flag, Automake will choose a
     different name for the intermediate object files.  Ordinarily a
     file like `sample.c' will be compiled to produce `sample.o'.
     However, if the program's `_CFLAGS' variable is set, then the
     object file will be named, for instance, `maude-sample.o'.  (See
     also *Note renamed objects::.)

     In compilations with per-target flags, the ordinary `AM_' form of
     the flags variable is _not_ automatically included in the
     compilation (however, the user form of the variable _is_ included).
     So for instance, if you want the hypothetical `maude' compilations
     to also use the value of `AM_CFLAGS', you would need to write:

          maude_CFLAGS = ... your flags ... $(AM_CFLAGS)

     *Note Flag Variables Ordering::, for more discussion about the
     interaction between user variables, `AM_' shadow variables, and
     per-target variables.

`maude_SHORTNAME'
     On some platforms the allowable file names are very short.  In
     order to support these systems and per-target compilation flags at
     the same time, Automake allows you to set a "short name" which
     will influence how intermediate object files are named.  For
     instance, in the following example,

          bin_PROGRAMS = maude
          maude_CPPFLAGS = -DSOMEFLAG
          maude_SHORTNAME = m
          maude_SOURCES = sample.c ...

     the object file would be named `m-sample.o' rather than
     `maude-sample.o'.

     This facility is rarely needed in practice, and we recommend
     avoiding it until you find it is required.

   ---------- Footnotes ----------

   (1) There are other, more obscure reasons for this limitation as
well.


File: automake.info,  Node: Default _SOURCES,  Next: LIBOBJS,  Prev: Program and Library Variables,  Up: Programs

7.5 Default `_SOURCES'
======================

`_SOURCES' variables are used to specify source files of programs
(*note A Program::), libraries (*note A Library::), and Libtool
libraries (*note A Shared Library::).

   When no such variable is specified for a target, Automake will define
one itself.  The default is to compile a single C file whose base name
is the name of the target itself, with any extension replaced by `.c'.
(Defaulting to C is terrible but we are stuck with it for historical
reasons.)

   For example if you have the following somewhere in your
`Makefile.am' with no corresponding `libfoo_a_SOURCES':

     lib_LIBRARIES = libfoo.a sub/libc++.a

`libfoo.a' will be built using a default source file named `libfoo.c',
and `sub/libc++.a' will be built from `sub/libc++.c'.  (In older
versions `sub/libc++.a' would be built from `sub_libc___a.c', i.e., the
default source was the canonized name of the target, with `.c' appended.
We believe the new behavior is more sensible, but for backward
compatibility automake will use the old name if a file or a rule with
that name exist.)

   Default sources are mainly useful in test suites, when building many
tests programs each from a single source.  For instance in

     check_PROGRAMS = test1 test2 test3

`test1', `test2', and `test3' will be built from `test1.c', `test2.c',
and `test3.c'.

   Another case where is this convenient is building many Libtool
modules (`moduleN.la'), each defined in its own file (`moduleN.c').

     AM_LDFLAGS = -module
     lib_LTLIBRARIES = module1.la module2.la module3.la

   Finally, there is one situation where this default source computation
needs to be avoided: when a target should not be built from sources.
We already saw such an example in *Note true::; this happens when all
the constituents of a target have already been compiled and need just
to be combined using a `_LDADD' variable.  Then it is necessary to
define an empty `_SOURCES' variable, so that automake does not compute
a default.

     bin_PROGRAMS = target
     target_SOURCES =
     target_LDADD = libmain.a libmisc.a


File: automake.info,  Node: LIBOBJS,  Next: Program variables,  Prev: Default _SOURCES,  Up: Programs

7.6 Special handling for LIBOBJS and ALLOCA
===========================================

The `$(LIBOBJS)' and `$(ALLOCA)' variables list object files that
should be compiled into the project to provide an implementation for
functions that are missing or broken on the host system.  They are
substituted by `configure'.

   These variables are defined by Autoconf macros such as `AC_LIBOBJ',
`AC_REPLACE_FUNCS' (*note Generic Function Checks: (autoconf)Generic
Functions.), or `AC_FUNC_ALLOCA' (*note Particular Function Checks:
(autoconf)Particular Functions.).  Many other Autoconf macros call
`AC_LIBOBJ' or `AC_REPLACE_FUNCS' to populate `$(LIBOBJS)'.

   Using these variables is very similar to doing conditional
compilation using `AC_SUBST' variables, as described in *Note
Conditional Sources::.  That is, when building a program, `$(LIBOBJS)'
and `$(ALLOCA)' should be added to the associated `*_LDADD' variable,
or to the `*_LIBADD' variable when building a library.  However there
is no need to list the corresponding sources in `EXTRA_*_SOURCES' nor
to define `*_DEPENDENCIES'.  Automake automatically adds `$(LIBOBJS)'
and `$(ALLOCA)' to the dependencies, and it will discover the list of
corresponding source files automatically (by tracing the invocations of
the `AC_LIBSOURCE' Autoconf macros).

   These variables are usually used to build a portability library that
is linked with all the programs of the project.  We now review a sample
setup.  First, `configure.ac' contains some checks that affect either
`LIBOBJS' or `ALLOCA'.

     # configure.ac
     ...
     AC_CONFIG_LIBOBJ_DIR([lib])
     ...
     AC_FUNC_MALLOC             dnl May add malloc.$(OBJEXT) to LIBOBJS
     AC_FUNC_MEMCMP             dnl May add memcmp.$(OBJEXT) to LIBOBJS
     AC_REPLACE_FUNCS([strdup]) dnl May add strdup.$(OBJEXT) to LIBOBJS
     AC_FUNC_ALLOCA             dnl May add alloca.$(OBJEXT) to ALLOCA
     ...
     AC_CONFIG_FILES([
       lib/Makefile
       src/Makefile
     ])
     AC_OUTPUT

   The `AC_CONFIG_LIBOBJ_DIR' tells Autoconf that the source files of
these object files are to be found in the `lib/' directory.  Automake
does not yet use this information; it knows the source files are
expected to be in the directory where the `$(LIBOBJS)' and `$(ALLOCA)'
variables are used.

   The `lib/' directory should therefore contain `malloc.c',
`memcmp.c', `strdup.c', `alloca.c'.  Here is its `Makefile.am':

     # lib/Makefile.am

     noinst_LIBRARIES = libcompat.a
     libcompat_a_SOURCES =
     libcompat_a_LIBADD = $(LIBOBJS) $(ALLOCA)

   Nothing else is required.  The library can have any name, of course,
and anyway it is not going to be installed: it just holds the
replacement versions of the missing or broken functions so we can later
link them in.  In many projects also include extra functions, specific
to the project, in that library: they are simply added on the
`_SOURCES' line.

   Finally here is how this library could be used from the `src/'
directory.

     # src/Makefile.am

     # Link all programs in this directory with libcompat.a
     LDADD = ../lib/libcompat.a

     bin_PROGRAMS = tool1 tool2 ...
     tool1_SOURCES = ...
     tool2_SOURCES = ...

   Please note it would be wrong to use the `$(LIBOBJS)' or `$(ALLOCA)'
in `src/Makefile.am', because these variables contains unprefixed
object names, and for instance `malloc.$(OBJEXT)' is not buildable in
the `src/' directory.  (Actually if you try using `$(LIBOBJS)' in
`src/', Automake will require a copy of `malloc.c', `memcmp.c',
`strdup.c', `alloca.c' in `src/' too.)

   Because `$(LIBOBJS)' and `$(ALLOCA)' contain object filenames that
end with `.$(OBJEXT)', they are not suitable for Libtool libraries
(where the expected object extension is `.lo'): `LTLIBOBJS' and
`LTALLOCA' should be used instead.

   `LTLIBOBJS' is defined automatically by Autoconf and should not be
defined by hand (as in the past), however at the time of writing
`LTALLOCA' still needs to be defined from `ALLOCA' manually.  *Note
`AC_LIBOBJ' vs. `LIBOBJS': (autoconf)AC_LIBOBJ vs LIBOBJS.


File: automake.info,  Node: Program variables,  Next: Yacc and Lex,  Prev: LIBOBJS,  Up: Programs

7.7 Variables used when building a program
==========================================

Occasionally it is useful to know which `Makefile' variables Automake
uses for compilations; for instance you might need to do your own
compilation in some special cases.

   Some variables are inherited from Autoconf; these are `CC',
`CFLAGS', `CPPFLAGS', `DEFS', `LDFLAGS', and `LIBS'.  

   There are some additional variables which Automake itself defines:

`AM_CPPFLAGS'
     The contents of this variable are passed to every compilation
     which invokes the C preprocessor; it is a list of arguments to the
     preprocessor.  For instance, `-I' and `-D' options should be
     listed here.

     Automake already provides some `-I' options automatically.  In
     particular it generates `-I$(srcdir)', `-I.', and a `-I' pointing
     to the directory holding `config.h' (if you've used
     `AC_CONFIG_HEADERS' or `AM_CONFIG_HEADER').  You can disable the
     default `-I' options using the `nostdinc' option.

     `AM_CPPFLAGS' is ignored in preference to a per-executable (or
     per-library) `_CPPFLAGS' variable if it is defined.

`INCLUDES'
     This does the same job as `AM_CPPFLAGS' (or any per-target
     `_CPPFLAGS' variable if it is used).  It is an older name for the
     same functionality.  This variable is deprecated; we suggest using
     `AM_CPPFLAGS' and per-target `_CPPFLAGS' instead.

`AM_CFLAGS'
     This is the variable which the `Makefile.am' author can use to pass
     in additional C compiler flags.  It is more fully documented
     elsewhere.  In some situations, this is not used, in preference to
     the per-executable (or per-library) `_CFLAGS'.

`COMPILE'
     This is the command used to actually compile a C source file.  The
     filename is appended to form the complete command line.

`AM_LDFLAGS'
     This is the variable which the `Makefile.am' author can use to pass
     in additional linker flags.  In some situations, this is not used,
     in preference to the per-executable (or per-library) `_LDFLAGS'.

`LINK'
     This is the command used to actually link a C program.  It already
     includes `-o $@' and the usual variable references (for instance,
     `CFLAGS'); it takes as "arguments" the names of the object files
     and libraries to link in.


File: automake.info,  Node: Yacc and Lex,  Next: C++ Support,  Prev: Program variables,  Up: Programs

7.8 Yacc and Lex support
========================

Automake has somewhat idiosyncratic support for Yacc and Lex.

   Automake assumes that the `.c' file generated by `yacc' (or `lex')
should be named using the basename of the input file.  That is, for a
yacc source file `foo.y', Automake will cause the intermediate file to
be named `foo.c' (as opposed to `y.tab.c', which is more traditional).

   The extension of a yacc source file is used to determine the
extension of the resulting `C' or `C++' file.  Files with the extension
`.y' will be turned into `.c' files; likewise, `.yy' will become `.cc';
`.y++', `c++'; and `.yxx', `.cxx'.

   Likewise, lex source files can be used to generate `C' or `C++'; the
extensions `.l', `.ll', `.l++', and `.lxx' are recognized.

   You should never explicitly mention the intermediate (`C' or `C++')
file in any `SOURCES' variable; only list the source file.

   The intermediate files generated by `yacc' (or `lex') will be
included in any distribution that is made.  That way the user doesn't
need to have `yacc' or `lex'.

   If a `yacc' source file is seen, then your `configure.ac' must
define the variable `YACC'.  This is most easily done by invoking the
macro `AC_PROG_YACC' (*note Particular Program Checks:
(autoconf)Particular Programs.).

   When `yacc' is invoked, it is passed `YFLAGS' and `AM_YFLAGS'.  The
former is a user variable and the latter is intended for the
`Makefile.am' author.

   `AM_YFLAGS' is usually used to pass the `-d' option to `yacc'.
Automake knows what this means and will automatically adjust its rules
to update and distribute the header file built by `yacc -d'.  What
Automake cannot guess, though, is where this header will be used: it is
up to you to ensure the header gets built before it is first used.
Typically this is necessary in order for dependency tracking to work
when the header is included by another file.  The common solution is
listing the header file in `BUILT_SOURCES' (*note Sources::) as follows.

     BUILT_SOURCES = parser.h
     AM_YFLAGS = -d
     bin_PROGRAMS = foo
     foo_SOURCES = ... parser.y ...

   If a `lex' source file is seen, then your `configure.ac' must define
the variable `LEX'.  You can use `AC_PROG_LEX' to do this (*note
Particular Program Checks: (autoconf)Particular Programs.), but using
`AM_PROG_LEX' macro (*note Macros::) is recommended.

   When `lex' is invoked, it is passed `LFLAGS' and `AM_LFLAGS'.  The
former is a user variable and the latter is intended for the
`Makefile.am' author.

   Automake makes it possible to include multiple `yacc' (or `lex')
source files in a single program.  When there is more than one distinct
`yacc' (or `lex') source file in a directory, Automake uses a small
program called `ylwrap' to run `yacc' (or `lex') in a subdirectory.
This is necessary because yacc's output filename is fixed, and a
parallel make could conceivably invoke more than one instance of `yacc'
simultaneously.  The `ylwrap' program is distributed with Automake.  It
should appear in the directory specified by `AC_CONFIG_AUX_DIR', or one
of its default locations (*note Finding `configure' Input:
(autoconf)Input.).

   For `yacc', simply managing locking is insufficient.  The output of
`yacc' always uses the same symbol names internally, so it isn't
possible to link two `yacc' parsers into the same executable.

   We recommend using the following renaming hack used in `gdb':
     #define yymaxdepth c_maxdepth
     #define yyparse c_parse
     #define yylex   c_lex
     #define yyerror c_error
     #define yylval  c_lval
     #define yychar  c_char
     #define yydebug c_debug
     #define yypact  c_pact
     #define yyr1    c_r1
     #define yyr2    c_r2
     #define yydef   c_def
     #define yychk   c_chk
     #define yypgo   c_pgo
     #define yyact   c_act
     #define yyexca  c_exca
     #define yyerrflag c_errflag
     #define yynerrs c_nerrs
     #define yyps    c_ps
     #define yypv    c_pv
     #define yys     c_s
     #define yy_yys  c_yys
     #define yystate c_state
     #define yytmp   c_tmp
     #define yyv     c_v
     #define yy_yyv  c_yyv
     #define yyval   c_val
     #define yylloc  c_lloc
     #define yyreds  c_reds
     #define yytoks  c_toks
     #define yylhs   c_yylhs
     #define yylen   c_yylen
     #define yydefred c_yydefred
     #define yydgoto c_yydgoto
     #define yysindex c_yysindex
     #define yyrindex c_yyrindex
     #define yygindex c_yygindex
     #define yytable  c_yytable
     #define yycheck  c_yycheck
     #define yyname   c_yyname
     #define yyrule   c_yyrule

   For each define, replace the `c_' prefix with whatever you like.
These defines work for `bison', `byacc', and traditional `yacc's.  If
you find a parser generator that uses a symbol not covered here, please
report the new name so it can be added to the list.


File: automake.info,  Node: C++ Support,  Next: Assembly Support,  Prev: Yacc and Lex,  Up: Programs

7.9 C++ Support
===============

Automake includes full support for C++.

   Any package including C++ code must define the output variable `CXX'
in `configure.ac'; the simplest way to do this is to use the
`AC_PROG_CXX' macro (*note Particular Program Checks:
(autoconf)Particular Programs.).

   A few additional variables are defined when a C++ source file is
seen:

`CXX'
     The name of the C++ compiler.

`CXXFLAGS'
     Any flags to pass to the C++ compiler.

`AM_CXXFLAGS'
     The maintainer's variant of `CXXFLAGS'.

`CXXCOMPILE'
     The command used to actually compile a C++ source file.  The file
     name is appended to form the complete command line.

`CXXLINK'
     The command used to actually link a C++ program.


File: automake.info,  Node: Assembly Support,  Next: Fortran 77 Support,  Prev: C++ Support,  Up: Programs

7.10 Assembly Support
=====================

Automake includes some support for assembly code.

   The variable `CCAS' holds the name of the compiler used to build
assembly code.  This compiler must work a bit like a C compiler; in
particular it must accept `-c' and `-o'.  The values of `CCASFLAGS' and
`AM_CCASFLAGS' (or its per-target definition) are passed to the
compilation.

   The autoconf macro `AM_PROG_AS' will define `CCAS' and `CCASFLAGS'
for you (unless they are already set, it simply sets `CCAS' to the C
compiler and `CCASFLAGS' to the C compiler flags), but you are free to
define these variables by other means.

   Only the suffixes `.s' and `.S' are recognized by `automake' as
being files containing assembly code.


File: automake.info,  Node: Fortran 77 Support,  Next: Fortran 9x Support,  Prev: Assembly Support,  Up: Programs

7.11 Fortran 77 Support
=======================

Automake includes full support for Fortran 77.

   Any package including Fortran 77 code must define the output variable
`F77' in `configure.ac'; the simplest way to do this is to use the
`AC_PROG_F77' macro (*note Particular Program Checks:
(autoconf)Particular Programs.).

   A few additional variables are defined when a Fortran 77 source file
is seen:

`F77'
     The name of the Fortran 77 compiler.

`FFLAGS'
     Any flags to pass to the Fortran 77 compiler.

`AM_FFLAGS'
     The maintainer's variant of `FFLAGS'.

`RFLAGS'
     Any flags to pass to the Ratfor compiler.

`AM_RFLAGS'
     The maintainer's variant of `RFLAGS'.

`F77COMPILE'
     The command used to actually compile a Fortran 77 source file.
     The file name is appended to form the complete command line.

`FLINK'
     The command used to actually link a pure Fortran 77 program or
     shared library.


   Automake can handle preprocessing Fortran 77 and Ratfor source files
in addition to compiling them(1).  Automake also contains some support
for creating programs and shared libraries that are a mixture of
Fortran 77 and other languages (*note Mixing Fortran 77 With C and
C++::).

   These issues are covered in the following sections.

* Menu:

* Preprocessing Fortran 77::    Preprocessing Fortran 77 sources
* Compiling Fortran 77 Files::  Compiling Fortran 77 sources
* Mixing Fortran 77 With C and C++::  Mixing Fortran 77 With C and C++

   ---------- Footnotes ----------

   (1) Much, if not most, of the information in the following sections
pertaining to preprocessing Fortran 77 programs was taken almost
verbatim from *Note Catalogue of Rules: (make)Catalogue of Rules.


File: automake.info,  Node: Preprocessing Fortran 77,  Next: Compiling Fortran 77 Files,  Up: Fortran 77 Support

7.11.1 Preprocessing Fortran 77
-------------------------------

`N.f' is made automatically from `N.F' or `N.r'.  This rule runs just
the preprocessor to convert a preprocessable Fortran 77 or Ratfor
source file into a strict Fortran 77 source file.  The precise command
used is as follows:

`.F'
     `$(F77) -F $(DEFS) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS)
     $(AM_FFLAGS) $(FFLAGS)'

`.r'
     `$(F77) -F $(AM_FFLAGS) $(FFLAGS) $(AM_RFLAGS) $(RFLAGS)'



File: automake.info,  Node: Compiling Fortran 77 Files,  Next: Mixing Fortran 77 With C and C++,  Prev: Preprocessing Fortran 77,  Up: Fortran 77 Support

7.11.2 Compiling Fortran 77 Files
---------------------------------

`N.o' is made automatically from `N.f', `N.F' or `N.r' by running the
Fortran 77 compiler.  The precise command used is as follows:

`.f'
     `$(F77) -c $(AM_FFLAGS) $(FFLAGS)'

`.F'
     `$(F77) -c $(DEFS) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS)
     $(AM_FFLAGS) $(FFLAGS)'

`.r'
     `$(F77) -c $(AM_FFLAGS) $(FFLAGS) $(AM_RFLAGS) $(RFLAGS)'



File: automake.info,  Node: Mixing Fortran 77 With C and C++,  Prev: Compiling Fortran 77 Files,  Up: Fortran 77 Support

7.11.3 Mixing Fortran 77 With C and C++
---------------------------------------

Automake currently provides _limited_ support for creating programs and
shared libraries that are a mixture of Fortran 77 and C and/or C++.
However, there are many other issues related to mixing Fortran 77 with
other languages that are _not_ (currently) handled by Automake, but
that are handled by other packages(1).

   Automake can help in two ways:

  1. Automatic selection of the linker depending on which combinations
     of source code.

  2. Automatic selection of the appropriate linker flags (e.g. `-L' and
     `-l') to pass to the automatically selected linker in order to link
     in the appropriate Fortran 77 intrinsic and run-time libraries.

     These extra Fortran 77 linker flags are supplied in the output
     variable `FLIBS' by the `AC_F77_LIBRARY_LDFLAGS' Autoconf macro
     supplied with newer versions of Autoconf (Autoconf version 2.13 and
     later).  *Note Fortran 77 Compiler Characteristics:
     (autoconf)Fortran 77 Compiler Characteristics.

   If Automake detects that a program or shared library (as mentioned in
some `_PROGRAMS' or `_LTLIBRARIES' primary) contains source code that
is a mixture of Fortran 77 and C and/or C++, then it requires that the
macro `AC_F77_LIBRARY_LDFLAGS' be called in `configure.ac', and that
either `$(FLIBS)' appear in the appropriate `_LDADD' (for programs) or
`_LIBADD' (for shared libraries) variables.  It is the responsibility
of the person writing the `Makefile.am' to make sure that `$(FLIBS)'
appears in the appropriate `_LDADD' or `_LIBADD' variable.

   For example, consider the following `Makefile.am':

     bin_PROGRAMS = foo
     foo_SOURCES  = main.cc foo.f
     foo_LDADD    = libfoo.la $(FLIBS)

     pkglib_LTLIBRARIES = libfoo.la
     libfoo_la_SOURCES  = bar.f baz.c zardoz.cc
     libfoo_la_LIBADD   = $(FLIBS)

   In this case, Automake will insist that `AC_F77_LIBRARY_LDFLAGS' is
mentioned in `configure.ac'.  Also, if `$(FLIBS)' hadn't been mentioned
in `foo_LDADD' and `libfoo_la_LIBADD', then Automake would have issued
a warning.

* Menu:

* How the Linker is Chosen::    Automatic linker selection

   ---------- Footnotes ----------

   (1) For example, the cfortran package
(http://www-zeus.desy.de/~burow/cfortran/) addresses all of these
inter-language issues, and runs under nearly all Fortran 77, C and C++
compilers on nearly all platforms.  However, `cfortran' is not yet Free
Software, but it will be in the next major release.


File: automake.info,  Node: How the Linker is Chosen,  Up: Mixing Fortran 77 With C and C++

7.11.3.1 How the Linker is Chosen
.................................

The following diagram demonstrates under what conditions a particular
linker is chosen by Automake.

   For example, if Fortran 77, C and C++ source code were to be compiled
into a program, then the C++ linker will be used.  In this case, if the
C or Fortran 77 linkers required any special libraries that weren't
included by the C++ linker, then they must be manually added to an
`_LDADD' or `_LIBADD' variable by the user writing the `Makefile.am'.

                          \              Linker
               source      \
                code        \     C        C++     Fortran
          -----------------  +---------+---------+---------+
                             |         |         |         |
          C                  |    x    |         |         |
                             |         |         |         |
                             +---------+---------+---------+
                             |         |         |         |
              C++            |         |    x    |         |
                             |         |         |         |
                             +---------+---------+---------+
                             |         |         |         |
                    Fortran  |         |         |    x    |
                             |         |         |         |
                             +---------+---------+---------+
                             |         |         |         |
          C + C++            |         |    x    |         |
                             |         |         |         |
                             +---------+---------+---------+
                             |         |         |         |
          C +       Fortran  |         |         |    x    |
                             |         |         |         |
                             +---------+---------+---------+
                             |         |         |         |
              C++ + Fortran  |         |    x    |         |
                             |         |         |         |
                             +---------+---------+---------+
                             |         |         |         |
          C + C++ + Fortran  |         |    x    |         |
                             |         |         |         |
                             +---------+---------+---------+


File: automake.info,  Node: Fortran 9x Support,  Next: Java Support,  Prev: Fortran 77 Support,  Up: Programs

7.12 Fortran 9x Support
=======================

Automake includes full support for Fortran 9x.

   Any package including Fortran 9x code must define the output variable
`FC' in `configure.ac'; the simplest way to do this is to use the
`AC_PROG_FC' macro (*note Particular Program Checks:
(autoconf)Particular Programs.).

   A few additional variables are defined when a Fortran 9x source file
is seen:

`FC'
     The name of the Fortran 9x compiler.

`FCFLAGS'
     Any flags to pass to the Fortran 9x compiler.

`AM_FCFLAGS'
     The maintainer's variant of `FCFLAGS'.

`FCCOMPILE'
     The command used to actually compile a Fortran 9x source file.
     The file name is appended to form the complete command line.

`FCLINK'
     The command used to actually link a pure Fortran 9x program or
     shared library.


* Menu:

* Compiling Fortran 9x Files::  Compiling Fortran 9x sources


File: automake.info,  Node: Compiling Fortran 9x Files,  Up: Fortran 9x Support

7.12.1 Compiling Fortran 9x Files
---------------------------------

`N.o' is made automatically from `N.f90' or `N.f95' by running the
Fortran 9x compiler.  The precise command used is as follows:

`.f9x'
     `$(FC) -c $(AM_FCFLAGS) $(FCFLAGS)'



File: automake.info,  Node: Java Support,  Next: Support for Other Languages,  Prev: Fortran 9x Support,  Up: Programs

7.13 Java Support
=================

Automake includes support for compiled Java, using `gcj', the Java
front end to the GNU Compiler Collection.

   Any package including Java code to be compiled must define the output
variable `GCJ' in `configure.ac'; the variable `GCJFLAGS' must also be
defined somehow (either in `configure.ac' or `Makefile.am').  The
simplest way to do this is to use the `AM_PROG_GCJ' macro.

   By default, programs including Java source files are linked with
`gcj'.

   As always, the contents of `AM_GCJFLAGS' are passed to every
compilation invoking `gcj' (in its role as an ahead-of-time compiler -
when invoking it to create `.class' files, `AM_JAVACFLAGS' is used
instead).  If it is necessary to pass options to `gcj' from
`Makefile.am', this variable, and not the user variable `GCJFLAGS',
should be used.

   `gcj' can be used to compile `.java', `.class', `.zip', or `.jar'
files.

   When linking, `gcj' requires that the main class be specified using
the `--main=' option.  The easiest way to do this is to use the
`_LDFLAGS' variable for the program.


File: automake.info,  Node: Support for Other Languages,  Next: ANSI,  Prev: Java Support,  Up: Programs

7.14 Support for Other Languages
================================

Automake currently only includes full support for C, C++ (*note C++
Support::), Fortran 77 (*note Fortran 77 Support::), Fortran 9x (*note
Fortran 9x Support::), and Java (*note Java Support::).  There is only
rudimentary support for other languages, support for which will be
improved based on user demand.

   Some limited support for adding your own languages is available via
the suffix rule handling (*note Suffixes::).


File: automake.info,  Node: ANSI,  Next: Dependencies,  Prev: Support for Other Languages,  Up: Programs

7.15 Automatic de-ANSI-fication
===============================

Although the GNU standards allow the use of ANSI C, this can have the
effect of limiting portability of a package to some older compilers
(notably the SunOS C compiler).

   Automake allows you to work around this problem on such machines by
"de-ANSI-fying" each source file before the actual compilation takes
place.

   If the `Makefile.am' variable `AUTOMAKE_OPTIONS' (*note Options::)
contains the option `ansi2knr' then code to handle de-ANSI-fication is
inserted into the generated `Makefile.in'.

   This causes each C source file in the directory to be treated as
ANSI C.  If an ANSI C compiler is available, it is used.  If no ANSI C
compiler is available, the `ansi2knr' program is used to convert the
source files into K&R C, which is then compiled.

   The `ansi2knr' program is simple-minded.  It assumes the source code
will be formatted in a particular way; see the `ansi2knr' man page for
details.

   Support for de-ANSI-fication requires the source files `ansi2knr.c'
and `ansi2knr.1' to be in the same package as the ANSI C source; these
files are distributed with Automake.  Also, the package `configure.ac'
must call the macro `AM_C_PROTOTYPES' (*note Macros::).

   Automake also handles finding the `ansi2knr' support files in some
other directory in the current package.  This is done by prepending the
relative path to the appropriate directory to the `ansi2knr' option.
For instance, suppose the package has ANSI C code in the `src' and
`lib' subdirectories.  The files `ansi2knr.c' and `ansi2knr.1' appear
in `lib'.  Then this could appear in `src/Makefile.am':

     AUTOMAKE_OPTIONS = ../lib/ansi2knr

   If no directory prefix is given, the files are assumed to be in the
current directory.

   Note that automatic de-ANSI-fication will not work when the package
is being built for a different host architecture.  That is because
automake currently has no way to build `ansi2knr' for the build machine.

   Using `LIBOBJS' with source de-ANSI-fication used to require
hand-crafted code in `configure' to append `$U' to basenames in
`LIBOBJS'.  This is no longer true today.  Starting with version 2.54,
Autoconf takes care of rewriting `LIBOBJS' and `LTLIBOBJS'.  (*note
`AC_LIBOBJ' vs. `LIBOBJS': (autoconf)AC_LIBOBJ vs LIBOBJS.)


File: automake.info,  Node: Dependencies,  Next: EXEEXT,  Prev: ANSI,  Up: Programs

7.16 Automatic dependency tracking
==================================

As a developer it is often painful to continually update the
`Makefile.in' whenever the include-file dependencies change in a
project.  Automake supplies a way to automatically track dependency
changes.

   Automake always uses complete dependencies for a compilation,
including system headers.  Automake's model is that dependency
computation should be a side effect of the build.  To this end,
dependencies are computed by running all compilations through a special
wrapper program called `depcomp'.  `depcomp' understands how to coax
many different C and C++ compilers into generating dependency
information in the format it requires.  `automake -a' will install
`depcomp' into your source tree for you.  If `depcomp' can't figure out
how to properly invoke your compiler, dependency tracking will simply
be disabled for your build.

   Experience with earlier versions of Automake (*note Dependency
Tracking Evolution::) taught us that it is not reliable to generate
dependencies only on the maintainer's system, as configurations vary
too much.  So instead Automake implements dependency tracking at build
time.

   Automatic dependency tracking can be suppressed by putting
`no-dependencies' in the variable `AUTOMAKE_OPTIONS', or passing
`no-dependencies' as an argument to `AM_INIT_AUTOMAKE' (this should be
the preferred way).  Or, you can invoke `automake' with the `-i'
option.  Dependency tracking is enabled by default.

   The person building your package also can choose to disable
dependency tracking by configuring with `--disable-dependency-tracking'.


File: automake.info,  Node: EXEEXT,  Prev: Dependencies,  Up: Programs

7.17 Support for executable extensions
======================================

On some platforms, such as Windows, executables are expected to have an
extension such as `.exe'.  On these platforms, some compilers (GCC
among them) will automatically generate `foo.exe' when asked to
generate `foo'.

   Automake provides mostly-transparent support for this.  Unfortunately
_mostly_ doesn't yet mean _fully_.  Until the English dictionary is
revised, you will have to assist Automake if your package must support
those platforms.

   One thing you must be aware of is that, internally, Automake rewrites
something like this:

     bin_PROGRAMS = liver

   to this:

     bin_PROGRAMS = liver$(EXEEXT)

   The targets Automake generates are likewise given the `$(EXEEXT)'
extension.  `EXEEXT'

   However, Automake cannot apply this rewriting to `configure'
substitutions.  This means that if you are conditionally building a
program using such a substitution, then your `configure.ac' must take
care to add `$(EXEEXT)' when constructing the output variable.

   With Autoconf 2.13 and earlier, you must explicitly use `AC_EXEEXT'
to get this support.  With Autoconf 2.50, `AC_EXEEXT' is run
automatically if you configure a compiler (say, through `AC_PROG_CC').

   Sometimes maintainers like to write an explicit link rule for their
program.  Without executable extension support, this is easy--you
simply write a rule whose target is the name of the program.  However,
when executable extension support is enabled, you must instead add the
`$(EXEEXT)' suffix.

   Unfortunately, due to the change in Autoconf 2.50, this means you
must always add this extension.  However, this is a problem for
maintainers who know their package will never run on a platform that has
executable extensions.  For those maintainers, the `no-exeext' option
(*note Options::) will disable this feature.  This works in a fairly
ugly way; if `no-exeext' is seen, then the presence of a rule for a
target named `foo' in `Makefile.am' will override an automake-generated
rule for `foo$(EXEEXT)'.  Without the `no-exeext' option, this use will
give a diagnostic.


File: automake.info,  Node: Other objects,  Next: Other GNU Tools,  Prev: Programs,  Up: Top

8 Other Derived Objects
***********************

Automake can handle derived objects which are not C programs.  Sometimes
the support for actually building such objects must be explicitly
supplied, but Automake will still automatically handle installation and
distribution.

* Menu:

* Scripts::                     Executable scripts
* Headers::                     Header files
* Data::                        Architecture-independent data files
* Sources::                     Derived sources


File: automake.info,  Node: Scripts,  Next: Headers,  Up: Other objects

8.1 Executable Scripts
======================

It is possible to define and install programs which are scripts.  Such
programs are listed using the `SCRIPTS' primary name.  Automake doesn't
define any dependencies for scripts; the `Makefile.am' should include
the appropriate rules.  

   Automake does not assume that scripts are derived objects; such
objects must be deleted by hand (*note Clean::).

   The `automake' program itself is a Perl script that is generated
from `automake.in'.  Here is how this is handled:

     bin_SCRIPTS = automake
     CLEANFILES = $(bin_SCRIPTS)

     do_subst = sed -e 's,[@]datadir[@],$(datadir),g' \
                 -e 's,[@]PERL[@],$(PERL),g' \
                 -e 's,[@]PACKAGE[@],$(PACKAGE),g' \
                 -e 's,[@]VERSION[@],$(VERSION),g' \
                 ...

     automake: automake.in Makefile
             $(do_subst) < $(srcdir)/automake.in > automake
             chmod +x automake

   Because--as we have just seen--scripts can be built, they are not
distributed by default.  Scripts that should be distributed can be
specified using a `dist_' prefix as in other primaries.  For instance
the following `Makefile.am' declares that `my_script' should be
distributed and installed in `$(sbindir)'.

     dist_sbin_SCRIPTS = my_script

   Script objects can be installed in `bindir', `sbindir',
`libexecdir', or `pkgdatadir'.

   Scripts that need not being installed can be listed in
`noinst_SCRIPTS', and among them, those which are needed only by `make
check' should go in `check_SCRIPTS'.


File: automake.info,  Node: Headers,  Next: Data,  Prev: Scripts,  Up: Other objects

8.2 Header files
================

Header files that must be installed are specified by the `HEADERS'
family of variables.  Headers can be installed in `includedir',
`oldincludedir', `pkgincludedir' or any other directory you may have
defined (*note Uniform::).  For instance

     include_HEADERS = foo.h bar/bar.h

will install the two files as `$(includedir)/foo.h' and
`$(includedir)/bar.h'.

   The `nobase_' prefix is also supported,

     nobase_include_HEADERS = foo.h bar/bar.h

will install the two files as `$(includedir)/foo.h' and
`$(includedir)/bar/bar.h' (*note Alternative::).

   Usually, only header files that accompany installed libraries need to
be installed.  Headers used by programs or convenience libraries are
not installed.  The `noinst_HEADERS' variable can be used for such
headers.  However when the header actually belongs to one convenient
library or program, we recommend listing it in the program's or
library's `_SOURCES' variable (*note Program Sources::) instead of in
`noinst_HEADERS'.  This is clearer for the `Makefile.am' reader.
`noinst_HEADERS' would be the right variable to use in a directory
containing only headers and no associated library or program.

   All header files must be listed somewhere; in a `_SOURCES' variable
or in a `_HEADERS' variable.  Missing ones will not appear in the
distribution.

   For header files that are built and must not be distributed, use the
`nodist_' prefix as in `nodist_include_HEADERS' or
`nodist_prog_SOURCES'.  If these generated headers are needed during
the build, you must also ensure they exist before they are used (*note
Sources::).


File: automake.info,  Node: Data,  Next: Sources,  Prev: Headers,  Up: Other objects

8.3 Architecture-independent data files
=======================================

Automake supports the installation of miscellaneous data files using the
`DATA' family of variables.  

   Such data can be installed in the directories `datadir',
`sysconfdir', `sharedstatedir', `localstatedir', or `pkgdatadir'.

   By default, data files are _not_ included in a distribution.  Of
course, you can use the `dist_' prefix to change this on a per-variable
basis.

   Here is how Automake declares its auxiliary data files:

     dist_pkgdata_DATA = clean-kr.am clean.am ...


File: automake.info,  Node: Sources,  Prev: Data,  Up: Other objects

8.4 Built sources
=================

Because Automake's automatic dependency tracking works as a side-effect
of compilation (*note Dependencies::) there is a bootstrap issue: a
target should not be compiled before its dependencies are made, but
these dependencies are unknown until the target is first compiled.

   Ordinarily this is not a problem, because dependencies are
distributed sources: they preexist and do not need to be built.
Suppose that `foo.c' includes `foo.h'.  When it first compiles `foo.o',
`make' only knows that `foo.o' depends on `foo.c'.  As a side-effect of
this compilation `depcomp' records the `foo.h' dependency so that
following invocations of `make' will honor it.  In these conditions,
it's clear there is no problem: either `foo.o' doesn't exist and has to
be built (regardless of the dependencies), or accurate dependencies
exist and they can be used to decide whether `foo.o' should be rebuilt.

   It's a different story if `foo.h' doesn't exist by the first `make'
run.  For instance there might be a rule to build `foo.h'.  This time
`file.o''s build will fail because the compiler can't find `foo.h'.
`make' failed to trigger the rule to build `foo.h' first by lack of
dependency information.

   The `BUILT_SOURCES' variable is a workaround for this problem.  A
source file listed in `BUILT_SOURCES' is made on `make all' or `make
check' (or even `make install') before other targets are processed.
However, such a source file is not _compiled_ unless explicitly
requested by mentioning it in some other `_SOURCES' variable.

   So, to conclude our introductory example, we could use
`BUILT_SOURCES = foo.h' to ensure `foo.h' gets built before any other
target (including `foo.o') during `make all' or `make check'.

   `BUILT_SOURCES' is actually a bit of a misnomer, as any file which
must be created early in the build process can be listed in this
variable.  Moreover, all built sources do not necessarily have to be
listed in `BUILT_SOURCES'.  For instance a generated `.c' file doesn't
need to appear in `BUILT_SOURCES' (unless it is included by another
source), because it's a known dependency of the associated object.

   It might be important to emphasize that `BUILT_SOURCES' is honored
only by `make all', `make check' and `make install'.  This means you
cannot build a specific target (e.g., `make foo') in a clean tree if it
depends on a built source.  However it will succeed if you have run
`make all' earlier, because accurate dependencies are already available.

   The next section illustrates and discusses the handling of built
sources on a toy example.

* Menu:

* Built sources example::       Several ways to handle built sources.


File: automake.info,  Node: Built sources example,  Up: Sources

8.4.1 Built sources example
---------------------------

Suppose that `foo.c' includes `bindir.h', which is
installation-dependent and not distributed: it needs to be built.  Here
`bindir.h' defines the preprocessor macro `bindir' to the value of the
`make' variable `bindir' (inherited from `configure').

   We suggest several implementations below.  It's not meant to be an
exhaustive listing of all ways to handle built sources, but it will give
you a few ideas if you encounter this issue.

First try
---------

This first implementation will illustrate the bootstrap issue mentioned
in the previous section (*note Sources::).

   Here is a tentative `Makefile.am'.

     # This won't work.
     bin_PROGRAMS = foo
     foo_SOURCES = foo.c
     nodist_foo_SOURCES = bindir.h
     CLEANFILES = bindir.h
     bindir.h: Makefile
             echo '#define bindir "$(bindir)"' >$@

   This setup doesn't work, because Automake doesn't know that `foo.c'
includes `bindir.h'.  Remember, automatic dependency tracking works as
a side-effect of compilation, so the dependencies of `foo.o' will be
known only after `foo.o' has been compiled (*note Dependencies::).  The
symptom is as follows.

     % make
     source='foo.c' object='foo.o' libtool=no \
     depfile='.deps/foo.Po' tmpdepfile='.deps/foo.TPo' \
     depmode=gcc /bin/sh ./depcomp \
     gcc -I. -I. -g -O2 -c `test -f 'foo.c' || echo './'`foo.c
     foo.c:2: bindir.h: No such file or directory
     make: *** [foo.o] Error 1

   In this example `bindir.h' is not distributed, not installed, and it
is not even being built on-time.  One may wonder what the
`nodist_foo_SOURCES = bindir.h' line has any use at all.  This line
simply states that `bindir.h' is a source of `foo', so for instance it
should be inspected while generating tags (*note Tags::).  In other
words, it does not help our present problem, and the build would fail
identically without it.

Using `BUILT_SOURCES'
---------------------

A solution is to require `bindir.h' to be built before anything else.
This is what `BUILT_SOURCES' is meant for (*note Sources::).

     bin_PROGRAMS = foo
     foo_SOURCES = foo.c
     nodist_foo_SOURCES = bindir.h
     BUILT_SOURCES = bindir.h
     CLEANFILES = bindir.h
     bindir.h: Makefile
             echo '#define bindir "$(bindir)"' >$@

   See how `bindir.h' get built first:

     % make
     echo '#define bindir "/usr/local/bin"' >bindir.h
     make  all-am
     make[1]: Entering directory `/home/adl/tmp'
     source='foo.c' object='foo.o' libtool=no \
     depfile='.deps/foo.Po' tmpdepfile='.deps/foo.TPo' \
     depmode=gcc /bin/sh ./depcomp \
     gcc -I. -I. -g -O2 -c `test -f 'foo.c' || echo './'`foo.c
     gcc  -g -O2   -o foo  foo.o
     make[1]: Leaving directory `/home/adl/tmp'

   However, as said earlier, `BUILT_SOURCES' applies only to the `all',
`check', and `install' targets.  It still fails if you try to run `make
foo' explicitly:

     % make clean
     test -z "bindir.h" || rm -f bindir.h
     test -z "foo" || rm -f foo
     rm -f *.o
     % : > .deps/foo.Po # Suppress previously recorded dependencies
     % make foo
     source='foo.c' object='foo.o' libtool=no \
     depfile='.deps/foo.Po' tmpdepfile='.deps/foo.TPo' \
     depmode=gcc /bin/sh ./depcomp \
     gcc -I. -I. -g -O2 -c `test -f 'foo.c' || echo './'`foo.c
     foo.c:2: bindir.h: No such file or directory
     make: *** [foo.o] Error 1

Recording dependencies manually
-------------------------------

Usually people are happy enough with `BUILT_SOURCES' because they never
build targets such as `make foo' before `make all', as in the previous
example.  However if this matters to you, you can avoid `BUILT_SOURCES'
and record such dependencies explicitly in the `Makefile.am'.

     bin_PROGRAMS = foo
     foo_SOURCES = foo.c
     nodist_foo_SOURCES = bindir.h
     foo.$(OBJEXT): bindir.h
     CLEANFILES = bindir.h
     bindir.h: Makefile
             echo '#define bindir "$(bindir)"' >$@

   You don't have to list _all_ the dependencies of `foo.o' explicitly,
only those which might need to be built.  If a dependency already
exists, it will not hinder the first compilation and will be recorded
by the normal dependency tracking code.  (Note that after this first
compilation the dependency tracking code will also have recorded the
dependency between `foo.o' and `bindir.h'; so our explicit dependency
is really useful to the first build only.)

   Adding explicit dependencies like this can be a bit dangerous if you
are not careful enough.  This is due to the way Automake tries not to
overwrite your rules (it assumes you know better than it).
`foo.$(OBJEXT): bindir.h' supersedes any rule Automake may want to
output to build `foo.$(OBJEXT)'.  It happens to work in this case
because Automake doesn't have to output any `foo.$(OBJEXT):' target: it
relies on a suffix rule instead (i.e., `.c.$(OBJEXT):').  Always check
the generated `Makefile.in' if you do this.

Build `bindir.h' from `configure'
---------------------------------

It's possible to define this preprocessor macro from `configure',
either in `config.h' (*note Defining Directories: (autoconf)Defining
Directories.), or by processing a `bindir.h.in' file using
`AC_CONFIG_FILES' (*note Configuration Actions: (autoconf)Configuration
Actions.).

   At this point it should be clear that building `bindir.h' from
`configure' work well for this example.  `bindir.h' will exist before
you build any target, hence will not cause any dependency issue.

   The Makefile can be shrunk as follows.  We do not even have to
mention `bindir.h'.

     bin_PROGRAMS = foo
     foo_SOURCES = foo.c

   However, it's not always possible to build sources from `configure',
especially when these sources are generated by a tool that needs to be
built first...

Build `bindir.c', not `bindir.h'.
---------------------------------

Another attractive idea is to define `bindir' as a variable or function
exported from `bindir.o', and build `bindir.c' instead of `bindir.h'.

     noinst_PROGRAMS = foo
     foo_SOURCES = foo.c bindir.h
     nodist_foo_SOURCES = bindir.c
     CLEANFILES = bindir.c
     bindir.c: Makefile
             echo 'const char bindir[] = "$(bindir)";' >$@

   `bindir.h' contains just the variable's declaration and doesn't need
to be built, so it won't cause any trouble.  `bindir.o' is always
dependent on `bindir.c', so `bindir.c' will get built first.

Which is best?
--------------

There is no panacea, of course.  Each solution has its merits and
drawbacks.

   You cannot use `BUILT_SOURCES' if the ability to run `make foo' on a
clean tree is important to you.

   You won't add explicit dependencies if you are leery of overriding
an Automake rule by mistake.

   Building files from `./configure' is not always possible, neither is
converting `.h' files into `.c' files.


File: automake.info,  Node: Other GNU Tools,  Next: Documentation,  Prev: Other objects,  Up: Top

9 Other GNU Tools
*****************

Since Automake is primarily intended to generate `Makefile.in's for use
in GNU programs, it tries hard to interoperate with other GNU tools.

* Menu:

* Emacs Lisp::                  Emacs Lisp
* gettext::                     Gettext
* Libtool::                     Libtool
* Java::                        Java
* Python::                      Python


File: automake.info,  Node: Emacs Lisp,  Next: gettext,  Up: Other GNU Tools

9.1 Emacs Lisp
==============

Automake provides some support for Emacs Lisp.  The `LISP' primary is
used to hold a list of `.el' files.  Possible prefixes for this primary
are `lisp_' and `noinst_'.  Note that if `lisp_LISP' is defined, then
`configure.ac' must run `AM_PATH_LISPDIR' (*note Macros::).

   Lisp sources are not distributed by default.  You can prefix the
`LISP' primary with `dist_', as in `dist_lisp_LISP' or
`dist_noinst_LISP', to indicate that these files should be distributed.

   Automake will byte-compile all Emacs Lisp source files using the
Emacs found by `AM_PATH_LISPDIR', if any was found.

   Byte-compiled Emacs Lisp files are not portable among all versions of
Emacs, so it makes sense to turn this off if you expect sites to have
more than one version of Emacs installed.  Furthermore, many packages
don't actually benefit from byte-compilation.  Still, we recommend that
you byte-compile your Emacs Lisp sources.  It is probably better for
sites with strange setups to cope for themselves than to make the
installation less nice for everybody else.

   There are two ways to avoid byte-compiling.  Historically, we have
recommended the following construct.
     lisp_LISP = file1.el file2.el
     ELCFILES =
   `ELCFILES' is an internal Automake variable that normally lists all
`.elc' files that must be byte-compiled.  Automake defines `ELCFILES'
automatically from `lisp_LISP'.  Emptying this variable explicitly
prevents byte-compilation to occur.

   Since Automake 1.8, we now recommend using `lisp_DATA' instead.  As
in
     lisp_DATA = file1.el file2.el

   Note that these two constructs are not equivalent.  `_LISP' will not
install a file if Emacs is not installed, while `_DATA' will always
install its files.


File: automake.info,  Node: gettext,  Next: Libtool,  Prev: Emacs Lisp,  Up: Other GNU Tools

9.2 Gettext
===========

If `AM_GNU_GETTEXT' is seen in `configure.ac', then Automake turns on
support for GNU gettext, a message catalog system for
internationalization (*note GNU Gettext: (gettext)GNU Gettext.).

   The `gettext' support in Automake requires the addition of two
subdirectories to the package, `intl' and `po'.  Automake insures that
these directories exist and are mentioned in `SUBDIRS'.


File: automake.info,  Node: Libtool,  Next: Java,  Prev: gettext,  Up: Other GNU Tools

9.3 Libtool
===========

Automake provides support for GNU Libtool (*note Introduction:
(libtool)Top.) with the `LTLIBRARIES' primary.  *Note A Shared
Library::.


File: automake.info,  Node: Java,  Next: Python,  Prev: Libtool,  Up: Other GNU Tools

9.4 Java
========

Automake provides some minimal support for Java compilation with the
`JAVA' primary.

   Any `.java' files listed in a `_JAVA' variable will be compiled with
`JAVAC' at build time.  By default, `.java' files are not included in
the distribution, you should use the `dist_' prefix to distribute them.

   Here is a typical setup for distributing `.java' files and
installing the `.class' files resulting from their compilation.

     javadir = $(datadir)/java
     dist_java_JAVA = a.java b.java ...

   Currently Automake enforces the restriction that only one `_JAVA'
primary can be used in a given `Makefile.am'.  The reason for this
restriction is that, in general, it isn't possible to know which
`.class' files were generated from which `.java' files - so it would be
impossible to know which files to install where.  For instance, a
`.java' file can define multiple classes; the resulting `.class' file
names cannot be predicted without parsing the `.java' file.

   There are a few variables which are used when compiling Java sources:

`JAVAC'
     The name of the Java compiler.  This defaults to `javac'.

`JAVACFLAGS'
     The flags to pass to the compiler.  This is considered to be a user
     variable (*note User Variables::).

`AM_JAVACFLAGS'
     More flags to pass to the Java compiler.  This, and not
     `JAVACFLAGS', should be used when it is necessary to put Java
     compiler flags into `Makefile.am'.

`JAVAROOT'
     The value of this variable is passed to the `-d' option to
     `javac'.  It defaults to `$(top_builddir)'.

`CLASSPATH_ENV'
     This variable is an `sh' expression which is used to set the
     `CLASSPATH' environment variable on the `javac' command line.  (In
     the future we will probably handle class path setting differently.)


File: automake.info,  Node: Python,  Prev: Java,  Up: Other GNU Tools

9.5 Python
==========

Automake provides support for Python compilation with the `PYTHON'
primary.

   Any files listed in a `_PYTHON' variable will be byte-compiled with
`py-compile' at install time.  `py-compile' actually creates both
standard (`.pyc') and byte-compiled (`.pyo') versions of the source
files.  Note that because byte-compilation occurs at install time, any
files listed in `noinst_PYTHON' will not be compiled.  Python source
files are included in the distribution by default.

   Automake ships with an Autoconf macro called `AM_PATH_PYTHON' which
will determine some Python-related directory variables (see below).  If
you have called `AM_PATH_PYTHON' from `configure.ac', then you may use
the following variables to list you Python source files in your
variables: `python_PYTHON', `pkgpython_PYTHON', `pyexecdir_PYTHON',
`pkgpyexecdir_PYTHON', depending where you want your files installed.

   `AM_PATH_PYTHON([VERSION], [ACTION-IF-FOUND],
[ACTION-IF-NOT-FOUND])' takes three optional arguments.  It will search
a Python interpreter on the system.  The first argument, if present, is
the minimum version of Python required for this package:
`AM_PATH_PYTHON' will skip any Python interpreter which is older than
VERSION.  If an interpreter is found and satisfies VERSION, then
ACTION-IF-FOUND is run.  Otherwise, ACTION-IF-NOT-FOUND is run.

   If ACTION-IF-NOT-FOUND is not specified, the default is to abort
configure.  This is fine when Python is an absolute requirement for the
package.  Therefore if Python >= 2.2 is only _optional_ to the package,
`AM_PATH_PYTHON' could be called as follows.

       AM_PATH_PYTHON(2.2,, :)

   `AM_PATH_PYTHON' creates several output variables based on the
Python installation found during configuration.

`PYTHON'
     The name of the Python executable, or `:' if no suitable
     interpreter could be found.

     Assuming ACTION-IF-NOT-FOUND is used (otherwise `./configure' will
     abort if Python is absent), the value of `PYTHON' can be used to
     setup a conditional in order to disable the relevant part of a
     build as follows.

            AM_PATH_PYTHON(,, :)
            AM_CONDITIONAL([HAVE_PYTHON], [test "$PYTHON" != :])

     If the ACTION-IF-NOT-FOUND is specified

`PYTHON_VERSION'
     The Python version number, in the form MAJOR.MINOR (e.g. `1.5').
     This is currently the value of `sys.version[:3]'.

`PYTHON_PREFIX'
     The string `${prefix}'.  This term may be used in future work
     which needs the contents of Python's `sys.prefix', but general
     consensus is to always use the value from configure.

`PYTHON_EXEC_PREFIX'
     The string `${exec_prefix}'.  This term may be used in future work
     which needs the contents of Python's `sys.exec_prefix', but general
     consensus is to always use the value from configure.

`PYTHON_PLATFORM'
     The canonical name used by Python to describe the operating
     system, as given by `sys.platform'.  This value is sometimes
     needed when building Python extensions.

`pythondir'
     The directory name for the `site-packages' subdirectory of the
     standard Python install tree.

`pkgpythondir'
     This is is the directory under `pythondir' which is named after the
     package.  That is, it is `$(pythondir)/$(PACKAGE)'.  It is provided
     as a convenience.

`pyexecdir'
     This is the directory where Python extension modules (shared
     libraries) should be installed.

`pkgpyexecdir'
     This is a convenience variable which is defined as
     `$(pyexecdir)/$(PACKAGE)'.

   All these directory variables have values that start with either
`${prefix}' or `${exec_prefix}' unexpanded.  This works fine in
`Makefiles', but it makes these variables hard to use in `configure'.
This is mandated by the GNU coding standards, so that the user can run
`make prefix=/foo install'.  The Autoconf manual has a section with
more details on this topic (*note Installation Directory Variables:
(autoconf)Installation Directory Variables.).


File: automake.info,  Node: Documentation,  Next: Install,  Prev: Other GNU Tools,  Up: Top

10 Building documentation
*************************

Currently Automake provides support for Texinfo and man pages.

* Menu:

* Texinfo::                     Texinfo
* Man pages::                   Man pages


File: automake.info,  Node: Texinfo,  Next: Man pages,  Up: Documentation

10.1 Texinfo
============

If the current directory contains Texinfo source, you must declare it
with the `TEXINFOS' primary.  Generally Texinfo files are converted
into info, and thus the `info_TEXINFOS' variable is most commonly used
here.  Any Texinfo source file must end in the `.texi', `.txi', or
`.texinfo' extension.  We recommend `.texi' for new manuals.

   Automake generates rules to build `.info', `.dvi', `.ps', `.pdf' and
`.html' files from your Texinfo sources.  The `.info' files are built
by `make all' and installed by `make install' (unless you use
`no-installinfo', see below).  The other files can be built on request
by `make dvi', `make ps', `make pdf' and `make html'.

   If the `.texi' file `@include's `version.texi', then that file will
be automatically generated.  The file `version.texi' defines four
Texinfo flag you can reference using `@value{EDITION}',
`@value{VERSION}', `@value{UPDATED}', and `@value{UPDATED-MONTH}'.

`EDITION'
`VERSION'
     Both of these flags hold the version number of your program.  They
     are kept separate for clarity.

`UPDATED'
     This holds the date the primary `.texi' file was last modified.

`UPDATED-MONTH'
     This holds the name of the month in which the primary `.texi' file
     was last modified.

   The `version.texi' support requires the `mdate-sh' program; this
program is supplied with Automake and automatically included when
`automake' is invoked with the `--add-missing' option.

   If you have multiple Texinfo files, and you want to use the
`version.texi' feature, then you have to have a separate version file
for each Texinfo file.  Automake will treat any include in a Texinfo
file that matches `vers*.texi' just as an automatically generated
version file.

   Sometimes an info file actually depends on more than one `.texi'
file.  For instance, in GNU Hello, `hello.texi' includes the file
`gpl.texi'.  You can tell Automake about these dependencies using the
`TEXI_TEXINFOS' variable.  Here is how GNU Hello does it: 

     info_TEXINFOS = hello.texi
     hello_TEXINFOS = gpl.texi

   By default, Automake requires the file `texinfo.tex' to appear in
the same directory as the Texinfo source (this can be changed using the
`TEXINFO_TEX' variable, see below).  However, if you used
`AC_CONFIG_AUX_DIR' in `configure.ac' (*note Finding `configure' Input:
(autoconf)Input.), then `texinfo.tex' is looked for there.  Automake
supplies `texinfo.tex' if `--add-missing' is given.

   The option `no-texinfo.tex' can be used to eliminate the requirement
for `texinfo.tex'.  Use of the variable `TEXINFO_TEX' is preferable,
however, because that allows the `dvi', `ps', and `pdf' targets to
still work.

   Automake generates an `install-info' rule; some people apparently
use this.  By default, info pages are installed by `make install'.
This can be prevented via the `no-installinfo' option.

   The following variables are used by the Texinfo build rules.

`MAKEINFO'
     The name of the program invoked to build `.info' files.  This
     variable is defined by Automake.  If the `makeinfo' program is
     found on the system then it will be used by default; otherwise
     `missing' will be used instead.

`MAKEINFOHTML'
     The command invoked to build `.html' files.  Automake defines this
     to `$(MAKEINFO) --html'.

`MAKEINFOFLAGS'
     User flags passed to each invocation of `$(MAKEINFO)' and
     `$(MAKEINFOHTML)'.  This user variable (*note User Variables::) is
     not expected to be defined in any `Makefile'; it can be used by
     users to pass extra flags to suit their needs.

`AM_MAKEINFOFLAGS'
`AM_MAKEINFOHTMLFLAGS'
     Maintainer flags passed to each `makeinfo' invocation.  These are
     maintainer variables that can be overridden in `Makefile.am'.
     `$(AM_MAKEINFOFLAGS)' is passed to `makeinfo' when building
     `.info' files; and `$(AM_MAKEINFOHTMLFLAGS)' is used when building
     `.html' files.

     For instance the following setting can be used to obtain one single
     `.html' file per manual, without node separators.
          AM_MAKEINFOHTMLFLAGS = --no-headers --no-split

     By default, `$(AM_MAKEINFOHTMLFLAGS)' is set to
     `$(AM_MAKEINFOFLAGS)'.  This means that defining
     `$(AM_MAKEINFOFLAGS)' without defining `$(AM_MAKEINFOHTMLFLAGS)'
     will impact builds of both `.info' and `.html' files.

`TEXI2DVI'
     The name of the command that converts a `.texi' file into a `.dvi'
     file.  This defaults to `texi2dvi', a script that ships with the
     Texinfo package.

`TEXI2PDF'
     The name of the command that translates a `.texi' file into a
     `.pdf' file.  This defaults to `$(TEXI2DVI) --pdf --batch'.

`DVIPS'
     The name of the command that build a `.ps' file out of a `.dvi'
     file.  This defaults to `dvips'.

`TEXINFO_TEX'
     If your package has Texinfo files in many directories, you can use
     the variable `TEXINFO_TEX' to tell Automake where to find the
     canonical `texinfo.tex' for your package.  The value of this
     variable should be the relative path from the current
     `Makefile.am' to `texinfo.tex':

          TEXINFO_TEX = ../doc/texinfo.tex


File: automake.info,  Node: Man pages,  Prev: Texinfo,  Up: Documentation

10.2 Man pages
==============

A package can also include man pages (but see the GNU standards on this
matter, *Note Man Pages: (standards)Man Pages.)  Man pages are declared
using the `MANS' primary.  Generally the `man_MANS' variable is used.
Man pages are automatically installed in the correct subdirectory of
`mandir', based on the file extension.

   File extensions such as `.1c' are handled by looking for the valid
part of the extension and using that to determine the correct
subdirectory of `mandir'.  Valid section names are the digits `0'
through `9', and the letters `l' and `n'.

   Sometimes developers prefer to name a man page something like
`foo.man' in the source, and then rename it to have the correct suffix,
e.g. `foo.1', when installing the file.  Automake also supports this
mode.  For a valid section named SECTION, there is a corresponding
directory named `manSECTIONdir', and a corresponding `_MANS' variable.
Files listed in such a variable are installed in the indicated section.
If the file already has a valid suffix, then it is installed as-is;
otherwise the file suffix is changed to match the section.

   For instance, consider this example:
     man1_MANS = rename.man thesame.1 alsothesame.1c

   In this case, `rename.man' will be renamed to `rename.1' when
installed, but the other files will keep their names.

   By default, man pages are installed by `make install'.  However,
since the GNU project does not require man pages, many maintainers do
not expend effort to keep the man pages up to date.  In these cases, the
`no-installman' option will prevent the man pages from being installed
by default.  The user can still explicitly install them via `make
install-man'.

   Here is how the man pages are handled in GNU `cpio' (which includes
both Texinfo documentation and man pages):

     man_MANS = cpio.1 mt.1
     EXTRA_DIST = $(man_MANS)

   Man pages are not currently considered to be source, because it is
not uncommon for man pages to be automatically generated.  Therefore
they are not automatically included in the distribution.  However, this
can be changed by use of the `dist_' prefix.

   The `nobase_' prefix is meaningless for man pages and is disallowed.


File: automake.info,  Node: Install,  Next: Clean,  Prev: Documentation,  Up: Top

11 What Gets Installed
**********************

11.1 Basics of installation
===========================

Naturally, Automake handles the details of actually installing your
program once it has been built.  All files named by the various
primaries are automatically installed in the appropriate places when the
user runs `make install'.

   A file named in a primary is installed by copying the built file into
the appropriate directory.  The base name of the file is used when
installing.

     bin_PROGRAMS = hello subdir/goodbye

   In this example, both `hello' and `goodbye' will be installed in
`$(bindir)'.

   Sometimes it is useful to avoid the basename step at install time.
For instance, you might have a number of header files in subdirectories
of the source tree which are laid out precisely how you want to install
them.  In this situation you can use the `nobase_' prefix to suppress
the base name step.  For example:

     nobase_include_HEADERS = stdio.h sys/types.h

   Will install `stdio.h' in `$(includedir)' and `types.h' in
`$(includedir)/sys'.

11.2 The two parts of install
=============================

Automake generates separate `install-data' and `install-exec' rules, in
case the installer is installing on multiple machines which share
directory structure--these targets allow the machine-independent parts
to be installed only once.  `install-exec' installs platform-dependent
files, and `install-data' installs platform-independent files.  The
`install' target depends on both of these targets.  While Automake
tries to automatically segregate objects into the correct category, the
`Makefile.am' author is, in the end, responsible for making sure this
is done correctly.  

   Variables using the standard directory prefixes `data', `info',
`man', `include', `oldinclude', `pkgdata', or `pkginclude' (e.g.
`data_DATA') are installed by `install-data'.

   Variables using the standard directory prefixes `bin', `sbin',
`libexec', `sysconf', `localstate', `lib', or `pkglib' (e.g.
`bin_PROGRAMS') are installed by `install-exec'.

   Any variable using a user-defined directory prefix with `exec' in
the name (e.g. `myexecbin_PROGRAMS') is installed by `install-exec'.
All other user-defined prefixes are installed by `install-data'.

11.3 Extending installation
===========================

It is possible to extend this mechanism by defining an
`install-exec-local' or `install-data-local' rule.  If these rules
exist, they will be run at `make install' time.  These rules can do
almost anything; care is required.  

   Automake also supports two install hooks, `install-exec-hook' and
`install-data-hook'.  These hooks are run after all other install rules
of the appropriate type, exec or data, have completed.  So, for
instance, it is possible to perform post-installation modifications
using an install hook.  *Note Extending:: gives some examples.  

11.4 Staged installs
====================

Automake generates support for the `DESTDIR' variable in all install
rules.  `DESTDIR' is used during the `make install' step to relocate
install objects into a staging area.  Each object and path is prefixed
with the value of `DESTDIR' before being copied into the install area.
Here is an example of typical DESTDIR usage:

     mkdir /tmp/staging &&
     make DESTDIR=/tmp/staging install

   The `mkdir' command avoids a security problem if the attacker
creates a symbolic link from `/tmp/staging' to a victim area; then
`make' places install objects in a directory tree built under
`/tmp/staging'.  If `/gnu/bin/foo' and `/gnu/share/aclocal/foo.m4' are
to be installed, the above command would install
`/tmp/staging/gnu/bin/foo' and `/tmp/staging/gnu/share/aclocal/foo.m4'.

   This feature is commonly used to build install images and packages.
For more information, see *Note Makefile Conventions:
(standards)Makefile Conventions.

   Support for `DESTDIR' is implemented by coding it directly into the
install rules.  If your `Makefile.am' uses a local install rule (e.g.,
`install-exec-local') or an install hook, then you must write that code
to respect `DESTDIR'.

11.5 Rules for the user
=======================

Automake also generates rules for targets `uninstall', `installdirs',
and `install-strip'.  

   Automake supports `uninstall-local' and `uninstall-hook'.  There is
no notion of separate uninstalls for "exec" and "data", as these
features would not provide additional functionality.

   Note that `uninstall' is not meant as a replacement for a real
packaging tool.


File: automake.info,  Node: Clean,  Next: Dist,  Prev: Install,  Up: Top

12 What Gets Cleaned
********************

The GNU Makefile Standards specify a number of different clean rules.
*Note Standard Targets for Users: (standards)Standard Targets.

   Generally the files that can be cleaned are determined automatically
by Automake.  Of course, Automake also recognizes some variables that
can be defined to specify additional files to clean.  These variables
are `MOSTLYCLEANFILES', `CLEANFILES', `DISTCLEANFILES', and
`MAINTAINERCLEANFILES'.  

   When cleaning involves more than deleting some hard-coded list of
files, it is also possible to supplement the cleaning rules with your
own commands.  Simply define a rule for any of the `mostlyclean-local',
`clean-local', `distclean-local', or `maintainer-clean-local' targets
(*note Extending::).  A common case is deleting a directory, for
instance a directory created by the test suite:

     clean-local:
             -rm -rf testSubDir

   As the GNU Standards aren't always explicit as to which files should
be removed by which rule, we've adopted a heuristic which we believe
was first formulated by Franc,ois Pinard:

   * If `make' built it, and it is commonly something that one would
     want to rebuild (for instance, a `.o' file), then `mostlyclean'
     should delete it.

   * Otherwise, if `make' built it, then `clean' should delete it.

   * If `configure' built it, then `distclean' should delete it.

   * If the maintainer built it (for instance, a `.info' file), then
     `maintainer-clean' should delete it.  However `maintainer-clean'
     should not delete anything that needs to exist in order to run
     `./configure && make'.

   We recommend that you follow this same set of heuristics in your
`Makefile.am'.


File: automake.info,  Node: Dist,  Next: Tests,  Prev: Clean,  Up: Top

13 What Goes in a Distribution
******************************

13.1 Basics of distribution
===========================

The `dist' rule in the generated `Makefile.in' can be used to generate
a gzip'd `tar' file and other flavors of archive for distribution.  The
files is named based on the `PACKAGE' and `VERSION' variables defined
by `AM_INIT_AUTOMAKE' (*note Macros::); more precisely the gzip'd `tar'
file is named `PACKAGE-VERSION.tar.gz'.  You can use the `make'
variable `GZIP_ENV' to control how gzip is run.  The default setting is
`--best'.

   For the most part, the files to distribute are automatically found by
Automake: all source files are automatically included in a distribution,
as are all `Makefile.am's and `Makefile.in's.  Automake also has a
built-in list of commonly used files which are automatically included
if they are found in the current directory (either physically, or as
the target of a `Makefile.am' rule).  This list is printed by `automake
--help'.  Also, files which are read by `configure' (i.e. the source
files corresponding to the files specified in various Autoconf macros
such as `AC_CONFIG_FILES' and siblings) are automatically distributed.
Files included in `Makefile.am's (using `include') or in `configure.ac'
(using `m4_include'), and helper scripts installed with `automake
--add-missing' are also distributed.

   Still, sometimes there are files which must be distributed, but which
are not covered in the automatic rules.  These files should be listed in
the `EXTRA_DIST' variable.  You can mention files from subdirectories
in `EXTRA_DIST'.

   You can also mention a directory in `EXTRA_DIST'; in this case the
entire directory will be recursively copied into the distribution.
Please note that this will also copy _everything_ in the directory,
including CVS/RCS version control files.  We recommend against using
this feature.

   If you define `SUBDIRS', Automake will recursively include the
subdirectories in the distribution.  If `SUBDIRS' is defined
conditionally (*note Conditionals::), Automake will normally include
all directories that could possibly appear in `SUBDIRS' in the
distribution.  If you need to specify the set of directories
conditionally, you can set the variable `DIST_SUBDIRS' to the exact
list of subdirectories to include in the distribution (*note
Conditional Subdirectories::).

13.2 Fine-grained distribution control
======================================

Sometimes you need tighter control over what does _not_ go into the
distribution; for instance you might have source files which are
generated and which you do not want to distribute.  In this case
Automake gives fine-grained control using the `dist' and `nodist'
prefixes.  Any primary or `_SOURCES' variable can be prefixed with
`dist_' to add the listed files to the distribution.  Similarly,
`nodist_' can be used to omit the files from the distribution.

   As an example, here is how you would cause some data to be
distributed while leaving some source code out of the distribution:

     dist_data_DATA = distribute-this
     bin_PROGRAMS = foo
     nodist_foo_SOURCES = do-not-distribute.c

13.3 The dist hook
==================

Occasionally it is useful to be able to change the distribution before
it is packaged up.  If the `dist-hook' rule exists, it is run after the
distribution directory is filled, but before the actual tar (or shar)
file is created.  One way to use this is for distributing files in
subdirectories for which a new `Makefile.am' is overkill:

     dist-hook:
             mkdir $(distdir)/random
             cp -p $(srcdir)/random/a1 $(srcdir)/random/a2 $(distdir)/random

   Another way to to use this is for removing unnecessary files that get
recursively included by specifying a directory in EXTRA_DIST:

     EXTRA_DIST = doc

     dist-hook:
             rm -rf `find $(distdir)/doc -name CVS`

   Two variables that come handy when writing `dist-hook' rules are
`$(distdir)' and `$(top_distdir)'.

   `$(distdir)' points to the directory where the `dist' rule will copy
files from the current directory before creating the tarball.  If you
are at the top-level directory, then `distdir = $(PACKAGE)-$(VERSION)'.
When used from subdirectory named `foo/', then `distdir =
../$(PACKAGE)-$(VERSION)/foo'.  `$(distdir)' can be a relative or
absolute path, do not assume any form.

   `$(top_distdir)' always points to the root directory of the
distributed tree.  At the top-level it's equal to `$(distdir)'.  In the
`foo/' subdirectory `top_distdir = ../$(PACKAGE)-$(VERSION)'.
`$(top_distdir)' too can be a relative or absolute path.

   Note that when packages are nested using `AC_CONFIG_SUBDIRS' (*note
Subpackages::), then `$(distdir)' and `$(top_distdir)' are relative to
the package where `make dist' was run, not to any sub-packages involved.

13.4 Checking the distribution
==============================

Automake also generates a `distcheck' rule which can be of help to
ensure that a given distribution will actually work.  `distcheck' makes
a distribution, then tries to do a `VPATH' build, run the test suite,
and finally make another tarfile to ensure the distribution is
self-contained.

   Building the package involves running `./configure'.  If you need to
supply additional flags to `configure', define them in the
`DISTCHECK_CONFIGURE_FLAGS' variable, either in your top-level
`Makefile.am', or on the command line when invoking `make'.

   If the `distcheck-hook' rule is defined in your top-level
`Makefile.am', then it will be invoked by `distcheck' after the new
distribution has been unpacked, but before the unpacked copy is
configured and built.  Your `distcheck-hook' can do almost anything,
though as always caution is advised.  Generally this hook is used to
check for potential distribution errors not caught by the standard
mechanism.  Note that `distcheck-hook' as well as
`DISTCHECK_CONFIGURE_FLAGS' are not honored in a subpackage
`Makefile.am', but the `DISTCHECK_CONFIGURE_FLAGS' are passed down to
the `configure' script of the subpackage.

   Speaking about potential distribution errors, `distcheck' will also
ensure that the `distclean' rule actually removes all built files.
This is done by running `make distcleancheck' at the end of the `VPATH'
build.  By default, `distcleancheck' will run `distclean' and then make
sure the build tree has been emptied by running
`$(distcleancheck_listfiles)'.  Usually this check will find generated
files that you forgot to add to the `DISTCLEANFILES' variable (*note
Clean::).

   The `distcleancheck' behavior should be OK for most packages,
otherwise you have the possibility to override the definition of either
the `distcleancheck' rule, or the `$(distcleancheck_listfiles)'
variable.  For instance to disable `distcleancheck' completely, add the
following rule to your top-level `Makefile.am':

     distcleancheck:
             @:

   If you want `distcleancheck' to ignore built files which have not
been cleaned because they are also part of the distribution, add the
following definition instead:

     distcleancheck_listfiles = \
       find -type f -exec sh -c 'test -f $(srcdir)/{} || echo {}' ';'

   The above definition is not the default because it's usually an
error if your Makefiles cause some distributed files to be rebuilt when
the user build the package.  (Think about the user missing the tool
required to build the file; or if the required tool is built by your
package, consider the cross-compilation case where it can't be run.)
There is a FAQ entry about this (*note distcleancheck::), make sure you
read it before playing with `distcleancheck_listfiles'.

   `distcheck' also checks that the `uninstall' rule works properly,
both for ordinary and `DESTDIR' builds.  It does this by invoking `make
uninstall', and then it checks the install tree to see if any files are
left over.  This check will make sure that you correctly coded your
`uninstall'-related rules.

   By default, the checking is done by the `distuninstallcheck' rule,
and the list of files in the install tree is generated by
`$(distuninstallcheck_listfiles') (this is a variable whose value is a
shell command to run that prints the list of files to stdout).

   Either of these can be overridden to modify the behavior of
`distcheck'.  For instance, to disable this check completely, you would
write:

     distuninstallcheck:
             @:

13.5 The types of distributions
===============================

Automake generates rules to provide archives of the project for
distributions in various formats.  Their targets are:

`dist-bzip2'
     Generate a bzip2 tar archive of the distribution.  bzip2 archives
     are frequently smaller than gzipped archives.  

`dist-gzip'
     Generate a gzip tar archive of the distribution.  

`dist-shar'
     Generate a shar archive of the distribution.  

`dist-zip'
     Generate a zip archive of the distribution.  

`dist-tarZ'
     Generate a compressed tar archive of the distribution.  

   The rule `dist' (and its historical synonym `dist-all') will create
archives in all the enabled formats, *Note Options::.  By default, only
the `dist-gzip' target is hooked to `dist'.


File: automake.info,  Node: Tests,  Next: Rebuilding,  Prev: Dist,  Up: Top

14 Support for test suites
**************************

Automake supports two forms of test suites.

14.1 Simple Tests
=================

If the variable `TESTS' is defined, its value is taken to be a list of
programs to run in order to do the testing.  The programs can either be
derived objects or source objects; the generated rule will look both in
`srcdir' and `.'.  Programs needing data files should look for them in
`srcdir' (which is both an environment variable and a make variable) so
they work when building in a separate directory (*note Build
Directories: (autoconf)Build Directories.), and in particular for the
`distcheck' rule (*note Dist::).

   The number of failures will be printed at the end of the run.  If a
given test program exits with a status of 77, then its result is ignored
in the final count.  This feature allows non-portable tests to be
ignored in environments where they don't make sense.

   The variable `TESTS_ENVIRONMENT' can be used to set environment
variables for the test run; the environment variable `srcdir' is set in
the rule.  If all your test programs are scripts, you can also set
`TESTS_ENVIRONMENT' to an invocation of the shell (e.g.  `$(SHELL)
-x'); this can be useful for debugging the tests.  

   You may define the variable `XFAIL_TESTS' to a list of tests
(usually a subset of `TESTS') that are expected to fail.  This will
reverse the result of those tests.  

   Automake ensures that each program listed in `TESTS' is built before
any tests are run; you can list both source and derived programs in
`TESTS'.  For instance, you might want to run a C program as a test.
To do this you would list its name in `TESTS' and also in
`check_PROGRAMS', and then specify it as you would any other program.

14.2 DejaGnu Tests
==================

If `dejagnu' (ftp://ftp.gnu.org/gnu/dejagnu/) appears in
`AUTOMAKE_OPTIONS', then a `dejagnu'-based test suite is assumed.  The
variable `DEJATOOL' is a list of names which are passed, one at a time,
as the `--tool' argument to `runtest' invocations; it defaults to the
name of the package.

   The variable `RUNTESTDEFAULTFLAGS' holds the `--tool' and `--srcdir'
flags that are passed to dejagnu by default; this can be overridden if
necessary.  

   The variables `EXPECT' and `RUNTEST' can also be overridden to
provide project-specific values.  For instance, you will need to do
this if you are testing a compiler toolchain, because the default
values do not take into account host and target names.  

   The contents of the variable `RUNTESTFLAGS' are passed to the
`runtest' invocation.  This is considered a "user variable" (*note User
Variables::).  If you need to set `runtest' flags in `Makefile.am', you
can use `AM_RUNTESTFLAGS' instead.  

   Automake will generate rules to create a local `site.exp' file,
defining various variables detected by `./configure'.  This file is
automatically read by DejaGnu.  It is OK for the user of a package to
edit this file in order to tune the test suite.  However this is not
the place where the test suite author should define new variables: this
should be done elsewhere in the real test suite code.  Especially,
`site.exp' should not be distributed.

   For more information regarding DejaGnu test suites, see *Note Top:
(dejagnu)Top.

   In either case, the testing is done via `make check'.

14.3 Install Tests
==================

The `installcheck' target is available to the user as a way to run any
tests after the package has been installed.  You can add tests to this
by writing an `installcheck-local' rule.


File: automake.info,  Node: Rebuilding,  Next: Options,  Prev: Tests,  Up: Top

15 Rebuilding Makefiles
***********************

Automake generates rules to automatically rebuild `Makefile's,
`configure', and other derived files like `Makefile.in'.

   If you are using `AM_MAINTAINER_MODE' in `configure.ac', then these
automatic rebuilding rules are only enabled in maintainer mode.

   Sometimes you need to run `aclocal' with an argument like `-I' to
tell it where to find `.m4' files.  Since sometimes `make' will
automatically run `aclocal', you need a way to specify these arguments.
You can do this by defining `ACLOCAL_AMFLAGS'; this holds arguments
which are passed verbatim to `aclocal'.  This variable is only useful
in the top-level `Makefile.am'.

   Sometimes it is convenient to supplement the rebuild rules for
`configure' or `config.status' with additional dependencies.  The
variables `CONFIGURE_DEPENDENCIES' and `CONFIG_STATUS_DEPENDENCIES' can
be used to list these extra dependencies.  These variable should be
defined in all `Makefile's of the tree (because these two rebuild rules
are output in all them), so it is safer and easier to `AC_SUBST' them
from `configure.ac'.  For instance the following statement will cause
`configure' to be rerun each time `version.sh' is changed.
     AC_SUBST([CONFIG_STATUS_DEPENDENCIES], ['$(top_srcdir)/version.sh'])
   Note the `$(top_srcdir)/' in the filename.  Since this variable is
to be used in all `Makefile's, its value must be sensible at any level
in the build hierarchy.

   Beware not to mistake `CONFIGURE_DEPENDENCIES' for
`CONFIG_STATUS_DEPENDENCIES'.

   `CONFIGURE_DEPENDENCIES' adds dependencies to the `configure' rule,
whose effect is to run `autoconf'.  This variable should be seldom
used, because `automake' already tracks `m4_include'd files.  However
it can be useful when playing tricky games with `m4_esyscmd' or similar
non-recommendable macros with side effects.

   `CONFIG_STATUS_DEPENDENCIES' adds dependencies to the
`config.status' rule, whose effect is to run `configure'.  This
variable should therefore carry any non-standard source that may be
read as a side effect of running configure, like `version.sh' in the
example above.

   Speaking of `version.sh' scripts, we recommend against them today.
They are mainly used when the version of a package is updated
automatically by a script (e.g., in daily builds).  Here is what some
old-style `configure.ac's may look like:
     AC_INIT
     . $srcdir/version.sh
     AM_INIT_AUTOMAKE([name], $VERSION_NUMBER)
     ...
   Here, `version.sh' is a shell fragment that sets `VERSION_NUMBER'.
The problem with this example is that `automake' cannot track
dependencies (listing `version.sh' in `CONFIG_STATUS_DEPENDENCIES', and
distributing this file is up to the user), and that it uses the
obsolete form of `AC_INIT' and `AM_INIT_AUTOMAKE'.  Upgrading to the
new syntax is not straightforward, because shell variables are not
allowed in `AC_INIT''s arguments.  We recommend that `version.sh' be
replaced by an M4 file that is included by `configure.ac':
     m4_include([version.m4])
     AC_INIT([name], VERSION_NUMBER)
     AM_INIT_AUTOMAKE
     ...
   Here `version.m4' could contain something like
`m4_define([VERSION_NUMBER], [1.2])'.  The advantage of this second
form is that `automake' will take care of the dependencies when
defining the rebuild rule, and will also distribute the file
automatically.  An inconvenience is that `autoconf' will now be rerun
each time the version number is bumped, when only `configure' had to be
rerun in the previous setup.


File: automake.info,  Node: Options,  Next: Miscellaneous,  Prev: Rebuilding,  Up: Top

16 Changing Automake's Behavior
*******************************

Various features of Automake can be controlled by options in the
`Makefile.am'.  Such options are applied on a per-`Makefile' basis when
listed in a special `Makefile' variable named `AUTOMAKE_OPTIONS'.  They
are applied globally to all processed `Makefiles' when listed in the
first argument of `AM_INIT_AUTOMAKE' in `configure.ac'.  Currently
understood options are: 

`gnits'
`gnu'
`foreign'
`cygnus'
     Set the strictness as appropriate.  The `gnits' option also implies
     `readme-alpha' and `check-news'.

`ansi2knr'
`PATH/ansi2knr'
     Turn on automatic de-ANSI-fication.  *Note ANSI::.  If preceded by
     a path, the generated `Makefile.in' will look in the specified
     directory to find the `ansi2knr' program.  The path should be a
     relative path to another directory in the same distribution
     (Automake currently does not check this).

`check-news'
     Cause `make dist' to fail unless the current version number appears
     in the first few lines of the `NEWS' file.

`dejagnu'
     Cause `dejagnu'-specific rules to be generated.  *Note Tests::.

`dist-bzip2'
     Hook `dist-bzip2' to `dist'.  

`dist-shar'
     Hook `dist-shar' to `dist'.  

`dist-zip'
     Hook `dist-zip' to `dist'.  

`dist-tarZ'
     Hook `dist-tarZ' to `dist'.  

`filename-length-max=99'
     Abort if filenames longer than 99 characters are found during
     `make dist'.  Such long filenames are generally considered not to
     be portable in tarballs.  See the `tar-v7' and `tar-ustar' options
     below.  This option should be used in the top-level `Makefile.am'
     or as an argument of `AM_INIT_AUTOMAKE' in `configure.ac', it will
     be ignored otherwise.

`no-define'
     This options is meaningful only when passed as an argument to
     `AM_INIT_AUTOMAKE'.  It will prevent the `PACKAGE' and `VERSION'
     variables to be `AC_DEFINE'd.

`no-dependencies'
     This is similar to using `--include-deps' on the command line, but
     is useful for those situations where you don't have the necessary
     bits to make automatic dependency tracking work (*note
     Dependencies::).  In this case the effect is to effectively
     disable automatic dependency tracking.

`no-dist'
     Don't emit any code related to `dist' target.  This is useful when
     a package has its own method for making distributions.

`no-dist-gzip'
     Do not hook `dist-gzip' to `dist'.  

`no-exeext'
     If your `Makefile.am' defines a rule for target `foo', it will
     override a rule for a target named `foo$(EXEEXT)'.  This is
     necessary when `EXEEXT' is found to be empty.  However, by default
     automake will generate an error for this use.  The `no-exeext'
     option will disable this error.  This is intended for use only
     where it is known in advance that the package will not be ported
     to Windows, or any other operating system using extensions on
     executables.

`no-installinfo'
     The generated `Makefile.in' will not cause info pages to be built
     or installed by default.  However, `info' and `install-info'
     targets will still be available.  This option is disallowed at
     `GNU' strictness and above.  

`no-installman'
     The generated `Makefile.in' will not cause man pages to be
     installed by default.  However, an `install-man' target will still
     be available for optional installation.  This option is disallowed
     at `GNU' strictness and above.  

`nostdinc'
     This option can be used to disable the standard `-I' options which
     are ordinarily automatically provided by Automake.

`no-texinfo.tex'
     Don't require `texinfo.tex', even if there are texinfo files in
     this directory.

`readme-alpha'
     If this release is an alpha release, and the file `README-alpha'
     exists, then it will be added to the distribution.  If this option
     is given, version numbers are expected to follow one of two forms.
     The first form is `MAJOR.MINOR.ALPHA', where each element is a
     number; the final period and number should be left off for
     non-alpha releases.  The second form is `MAJOR.MINORALPHA', where
     ALPHA is a letter; it should be omitted for non-alpha releases.

`std-options'
     Make the `installcheck' rule check that installed scripts and
     programs support the `--help' and `--version' options.  This also
     provides a basic check that the program's run-time dependencies
     are satisfied after installation.

     In a few situations, programs (or scripts) have to be exempted
     from this test.  For instance `false' (from GNU sh-utils) is never
     successful, even for `--help' or `--version'.  You can list such
     programs in the variable `AM_INSTALLCHECK_STD_OPTIONS_EXEMPT'.
     Programs (not scripts) listed in this variable should be suffixed
     by `$(EXEEXT)' for the sake of Win32 or OS/2.  For instance
     suppose we build `false' as a program but `true.sh' as a script,
     and that neither of them support `--help' or `--version':

          AUTOMAKE_OPTIONS = std-options
          bin_PROGRAMS = false ...
          bin_SCRIPTS = true.sh ...
          AM_INSTALLCHECK_STD_OPTIONS_EXEMPT = false$(EXEEXT) true.sh

`subdir-objects'
     If this option is specified, then objects are placed into the
     subdirectory of the build directory corresponding to the
     subdirectory of the source file.  For instance if the source file
     is `subdir/file.cxx', then the output file would be
     `subdir/file.o'.

`tar-v7'
`tar-ustar'
`tar-pax'
     These three mutually exclusive options select the tar format to use
     when generating tarballs with `make dist'.  (The tar file created
     is then compressed according to the set of `no-dist-gzip',
     `dist-bzip2' and `dist-tarZ' options in use.)

     These options must be passed as argument to `AM_INIT_AUTOMAKE'
     (*note Macros::) because they can require additional configure
     checks.  Automake will complain if it sees such options in a
     `AUTOMAKE_OPTIONS' variable.

     `tar-v7' selects the old V7 tar format.  This is the historical
     default.  This antiquated format is understood by all tar
     implementations and supports filenames with up to 99 characters.
     When given longer filenames some tar implementations will diagnose
     the problem while other will generate broken tarballs or use
     non-portable extensions.  Furthermore, the V7 format cannot store
     empty directories.  When using this format, consider using the
     `filename-length-max=99' option to catch filenames too long.

     `tar-ustar' selects the ustar format defined by POSIX 1003.1-1988.
     This format is believed to be old enough to be portable.  It
     fully supports empty directories.  It can store filenames with up
     to 256 characters, provided that the filename can be split at
     directory separator in two parts, first of them being at most 155
     bytes long. So, in most cases the maximum file name length will be
     shorter than 256 characters.  However you may run against broken
     tar implementations that incorrectly handle filenames longer than
     99 characters (please report them to <bug-automake@gnu.org> so we
     can document this accurately).

     `tar-pax' selects the new pax interchange format defined by POSIX
     1003.1-2001.  It does not limit the length of filenames.  However,
     this format is very young and should probably be restricted to
     packages which target only very modern platforms.  There are moves
     to change the pax format in an upward-compatible way, so this
     option may refer to a more recent version in the future.

     *Note Controlling the Archive Format: (tar)Formats, for further
     discussion about tar formats.

     `configure' knows several ways to construct these formats.  It
     will not abort if it cannot find a tool up to the task (so that the
     package can still be built), but `make dist' will fail.

VERSION
     A version number (e.g. `0.30') can be specified.  If Automake is
     not newer than the version specified, creation of the `Makefile.in'
     will be suppressed.

`-WCATEGORY' or `--warnings=CATEGORY'
     These options behave exactly like their command-line counterpart
     (*note Invoking Automake::).  This allows you to enable or disable
     some warning categories on a per-file basis.  You can also setup
     some warnings for your entire project; for instance try
     `AM_INIT_AUTOMAKE([-Wall])' in your `configure.ac'.


   Unrecognized options are diagnosed by `automake'.

   If you want an option to apply to all the files in the tree, you can
use the `AM_INIT_AUTOMAKE' macro in `configure.ac'.  *Note Macros::.


File: automake.info,  Node: Miscellaneous,  Next: Include,  Prev: Options,  Up: Top

17 Miscellaneous Rules
**********************

There are a few rules and variables that didn't fit anywhere else.

* Menu:

* Tags::                        Interfacing to etags and mkid
* Suffixes::                    Handling new file extensions
* Multilibs::                   Support for multilibs.


File: automake.info,  Node: Tags,  Next: Suffixes,  Up: Miscellaneous

17.1 Interfacing to `etags'
===========================

Automake will generate rules to generate `TAGS' files for use with GNU
Emacs under some circumstances.

   If any C, C++ or Fortran 77 source code or headers are present, then
`tags' and `TAGS' rules will be generated for the directory.  All files
listed using the `_SOURCES', `_HEADERS', and `_LISP' primaries will be
used to generate tags.  Note that generated source files that are not
distributed must be declared in variables like `nodist_noinst_HEADERS'
or `nodist_PROG_SOURCES' or they will be ignored.

   At the topmost directory of a multi-directory package, a `tags' rule
will be output which, when run, will generate a `TAGS' file that
includes by reference all `TAGS' files from subdirectories.

   The `tags' rule will also be generated if the variable `ETAGS_ARGS'
is defined.  This variable is intended for use in directories which
contain taggable source that `etags' does not understand.  The user can
use the `ETAGSFLAGS' to pass additional flags to `etags';
`AM_ETAGSFLAGS' is also available for use in `Makefile.am'.  

   Here is how Automake generates tags for its source, and for nodes in
its Texinfo file:

     ETAGS_ARGS = automake.in --lang=none \
      --regex='/^@node[ \t]+\([^,]+\)/\1/' automake.texi

   If you add filenames to `ETAGS_ARGS', you will probably also want to
set `TAGS_DEPENDENCIES'.  The contents of this variable are added
directly to the dependencies for the `tags' rule.  

   Automake also generates a `ctags' rule which can be used to build
`vi'-style `tags' files.  The variable `CTAGS' is the name of the
program to invoke (by default `ctags'); `CTAGSFLAGS' can be used by the
user to pass additional flags, and `AM_CTAGSFLAGS' can be used by the
`Makefile.am'.

   Automake will also generate an `ID' rule which will run `mkid' on
the source.  This is only supported on a directory-by-directory basis.  

   Automake also supports the GNU Global Tags program
(http://www.gnu.org/software/global/).  The `GTAGS' rule runs Global
Tags automatically and puts the result in the top build directory.  The
variable `GTAGS_ARGS' holds arguments which are passed to `gtags'.  


File: automake.info,  Node: Suffixes,  Next: Multilibs,  Prev: Tags,  Up: Miscellaneous

17.2 Handling new file extensions
=================================

It is sometimes useful to introduce a new implicit rule to handle a file
type that Automake does not know about.

   For instance, suppose you had a compiler which could compile `.foo'
files to `.o' files.  You would simply define an suffix rule for your
language:

     .foo.o:
             foocc -c -o $@ $<

   Then you could directly use a `.foo' file in a `_SOURCES' variable
and expect the correct results:

     bin_PROGRAMS = doit
     doit_SOURCES = doit.foo

   This was the simpler and more common case.  In other cases, you will
have to help Automake to figure which extensions you are defining your
suffix rule for.  This usually happens when your extensions does not
start with a dot.  Then, all you have to do is to put a list of new
suffixes in the `SUFFIXES' variable *before* you define your implicit
rule.

   For instance the following definition prevents Automake to
misinterpret `.idlC.cpp:' as an attempt to transform `.idlC' into
`.cpp'.

     SUFFIXES = .idl C.cpp
     .idlC.cpp:
             # whatever

   As you may have noted, the `SUFFIXES' variable behaves like the
`.SUFFIXES' special target of `make'.  You should not touch `.SUFFIXES'
yourself, but use `SUFFIXES' instead and let Automake generate the
suffix list for `.SUFFIXES'.  Any given `SUFFIXES' go at the start of
the generated suffixes list, followed by Automake generated suffixes
not already in the list.


File: automake.info,  Node: Multilibs,  Prev: Suffixes,  Up: Miscellaneous

17.3 Support for Multilibs
==========================

Automake has support for an obscure feature called multilibs.  A
"multilib" is a library which is built for multiple different ABIs at a
single time; each time the library is built with a different target
flag combination.  This is only useful when the library is intended to
be cross-compiled, and it is almost exclusively used for compiler
support libraries.

   The multilib support is still experimental.  Only use it if you are
familiar with multilibs and can debug problems you might encounter.


File: automake.info,  Node: Include,  Next: Conditionals,  Prev: Miscellaneous,  Up: Top

18 Include
**********

Automake supports an `include' directive which can be used to include
other `Makefile' fragments when `automake' is run.  Note that these
fragments are read and interpreted by `automake', not by `make'.  As
with conditionals, `make' has no idea that `include' is in use.

   There are two forms of `include':

`include $(srcdir)/file'
     Include a fragment which is found relative to the current source
     directory.

`include $(top_srcdir)/file'
     Include a fragment which is found relative to the top source
     directory.

   Note that if a fragment is included inside a conditional, then the
condition applies to the entire contents of that fragment.

   Makefile fragments included this way are always distributed because
there are needed to rebuild `Makefile.in'.


File: automake.info,  Node: Conditionals,  Next: Gnits,  Prev: Include,  Up: Top

19 Conditionals
***************

Automake supports a simple type of conditionals.

   Before using a conditional, you must define it by using
`AM_CONDITIONAL' in the `configure.ac' file (*note Macros::).

 -- Macro: AM_CONDITIONAL (CONDITIONAL, CONDITION)
     The conditional name, CONDITIONAL, should be a simple string
     starting with a letter and containing only letters, digits, and
     underscores.  It must be different from `TRUE' and `FALSE' which
     are reserved by Automake.

     The shell CONDITION (suitable for use in a shell `if' statement)
     is evaluated when `configure' is run.  Note that you must arrange
     for _every_ `AM_CONDITIONAL' to be invoked every time `configure'
     is run - if `AM_CONDITIONAL' is run conditionally (e.g., in a
     shell `if' statement), then the result will confuse automake.

   Conditionals typically depend upon options which the user provides to
the `configure' script.  Here is an example of how to write a
conditional which is true if the user uses the `--enable-debug' option.

     AC_ARG_ENABLE(debug,
     [  --enable-debug    Turn on debugging],
     [case "${enableval}" in
       yes) debug=true ;;
       no)  debug=false ;;
       *) AC_MSG_ERROR(bad value ${enableval} for --enable-debug) ;;
     esac],[debug=false])
     AM_CONDITIONAL(DEBUG, test x$debug = xtrue)

   Here is an example of how to use that conditional in `Makefile.am':

     if DEBUG
     DBG = debug
     else
     DBG =
     endif
     noinst_PROGRAMS = $(DBG)

   This trivial example could also be handled using EXTRA_PROGRAMS
(*note Conditional Programs::).

   You may only test a single variable in an `if' statement, possibly
negated using `!'.  The `else' statement may be omitted.  Conditionals
may be nested to any depth.  You may specify an argument to `else' in
which case it must be the negation of the condition used for the
current `if'.  Similarly you may specify the condition which is closed
by an `end':

     if DEBUG
     DBG = debug
     else !DEBUG
     DBG =
     endif !DEBUG

Unbalanced conditions are errors.

   Note that conditionals in Automake are not the same as conditionals
in GNU Make.  Automake conditionals are checked at configure time by the
`configure' script, and affect the translation from `Makefile.in' to
`Makefile'.  They are based on options passed to `configure' and on
results that `configure' has discovered about the host system.  GNU
Make conditionals are checked at `make' time, and are based on
variables passed to the make program or defined in the `Makefile'.

   Automake conditionals will work with any make program.


File: automake.info,  Node: Gnits,  Next: Cygnus,  Prev: Conditionals,  Up: Top

20 The effect of `--gnu' and `--gnits'
**************************************

The `--gnu' option (or `gnu' in the `AUTOMAKE_OPTIONS' variable) causes
`automake' to check the following:

   * The files `INSTALL', `NEWS', `README', `AUTHORS', and `ChangeLog',
     plus one of `COPYING.LIB', `COPYING.LESSER' or `COPYING', are
     required at the topmost directory of the package.

   * The options `no-installman' and `no-installinfo' are prohibited.

   Note that this option will be extended in the future to do even more
checking; it is advisable to be familiar with the precise requirements
of the GNU standards.  Also, `--gnu' can require certain non-standard
GNU programs to exist for use by various maintainer-only rules; for
instance in the future `pathchk' might be required for `make dist'.

   The `--gnits' option does everything that `--gnu' does, and checks
the following as well:

   * `make installcheck' will check to make sure that the `--help' and
     `--version' really print a usage message and a version string,
     respectively.  This is the `std-options' option (*note Options::).

   * `make dist' will check to make sure the `NEWS' file has been
     updated to the current version.

   * `VERSION' is checked to make sure its format complies with Gnits
     standards.

   * If `VERSION' indicates that this is an alpha release, and the file
     `README-alpha' appears in the topmost directory of a package, then
     it is included in the distribution.  This is done in `--gnits'
     mode, and no other, because this mode is the only one where version
     number formats are constrained, and hence the only mode where
     Automake can automatically determine whether `README-alpha' should
     be included.

   * The file `THANKS' is required.


File: automake.info,  Node: Cygnus,  Next: Not Enough,  Prev: Gnits,  Up: Top

21 The effect of `--cygnus'
***************************

Some packages, notably GNU GCC and GNU gdb, have a build environment
originally written at Cygnus Support (subsequently renamed Cygnus
Solutions, and then later purchased by Red Hat).  Packages with this
ancestry are sometimes referred to as "Cygnus" trees.

   A Cygnus tree has slightly different rules for how a `Makefile.in'
is to be constructed.  Passing `--cygnus' to `automake' will cause any
generated `Makefile.in' to comply with Cygnus rules.

   Here are the precise effects of `--cygnus':

   * Info files are always created in the build directory, and not in
     the source directory.

   * `texinfo.tex' is not required if a Texinfo source file is
     specified.  The assumption is that the file will be supplied, but
     in a place that Automake cannot find.  This assumption is an
     artifact of how Cygnus packages are typically bundled.

   * `make dist' is not supported, and the rules for it are not
     generated.  Cygnus-style trees use their own distribution
     mechanism.

   * Certain tools will be searched for in the build tree as well as in
     the user's `PATH'.  These tools are `runtest', `expect',
     `makeinfo' and `texi2dvi'.

   * `--foreign' is implied.

   * The options `no-installinfo' and `no-dependencies' are implied.

   * The macros `AM_MAINTAINER_MODE' and `AM_CYGWIN32' are required.

   * The `check' target doesn't depend on `all'.

   GNU maintainers are advised to use `gnu' strictness in preference to
the special Cygnus mode.  Some day, perhaps, the differences between
Cygnus trees and GNU trees will disappear (for instance, as GCC is made
more standards compliant).  At that time the special Cygnus mode will be
removed.


File: automake.info,  Node: Not Enough,  Next: Distributing,  Prev: Cygnus,  Up: Top

22 When Automake Isn't Enough
*****************************

In some situations, where Automake is not up to one task, one has to
resort to handwritten rules or even handwritten `Makefile's.

* Menu:

* Extending::                   Adding new rules or overriding existing ones.
* Third-Party Makefiles::       Integrating Non-Automake `Makefile's.


File: automake.info,  Node: Extending,  Next: Third-Party Makefiles,  Up: Not Enough

22.1 Extending Automake Rules
=============================

With some minor exceptions (like `_PROGRAMS' variables being rewritten
to append `$(EXEEXT)'), the contents of a `Makefile.am' is copied to
`Makefile.in' verbatim.

   These copying semantics means that many problems can be worked around
by simply adding some `make' variables and rules to `Makefile.am'.
Automake will ignore these additions.

   Since a `Makefile.in' is built from data gathered from three
different places (`Makefile.am', `configure.ac', and `automake'
itself), it is possible to have conflicting definitions of rules or
variables.  When building `Makefile.in' the following priorities are
respected by `automake' to ensure the user always have the last word.
User defined variables in `Makefile.am' have priority over variables
`AC_SUBST'ed from `configure.ac', and `AC_SUBST'ed variables have
priority over `automake'-defined variables.  As far rules are
concerned, a user-defined rule overrides any `automake'-defined rule
for the same target.

   These overriding semantics make it possible to fine tune some default
settings of Automake, or replace some of its rules.  Overriding
Automake rules is often inadvisable, particularly in the topmost
directory of a package with subdirectories.  The `-Woverride' option
(*note Invoking Automake::) comes handy to catch overridden definitions.

   Note that Automake does not make any difference between rules with
commands and rules that only specify dependencies.  So it is not
possible to append new dependencies to an `automake'-defined target
without redefining the entire rule.

   However, various useful targets have a `-local' version you can
specify in your `Makefile.am'.  Automake will supplement the standard
target with these user-supplied targets.

   The targets that support a local version are `all', `info', `dvi',
`ps', `pdf', `html', `check', `install-data', `install-exec',
`uninstall', `installdirs', `installcheck' and the various `clean'
targets (`mostlyclean', `clean', `distclean', and `maintainer-clean').
Note that there are no `uninstall-exec-local' or `uninstall-data-local'
targets; just use `uninstall-local'.  It doesn't make sense to
uninstall just data or just executables.

   For instance, here is one way to install a file in `/etc':

     install-data-local:
             $(INSTALL_DATA) $(srcdir)/afile $(DESTDIR)/etc/afile

   Some rule also have a way to run another rule, called a "hook",
after their work is done.  The hook is named after the principal target,
with `-hook' appended.  The targets allowing hooks are `install-data',
`install-exec', `uninstall', `dist', and `distcheck'.  

   For instance, here is how to create a hard link to an installed
program:

     install-exec-hook:
             ln $(DESTDIR)$(bindir)/program$(EXEEXT) \
                $(DESTDIR)$(bindir)/proglink$(EXEEXT)

   Although cheaper and more portable than symbolic links, hard links
will not work everywhere (for instance OS/2 does not have `ln').
Ideally you should fall back to `cp -p' when `ln' does not work.  An
easy way, if symbolic links are acceptable to you, is to add
`AC_PROG_LN_S' to `configure.ac' (*note Particular Program Checks:
(autoconf)Particular Programs.) and use `$(LN_S)' in `Makefile.am'.

   For instance, here is how you could install a versioned copy of a
program using `$(LN_S)':

     install-exec-hook:
             cd $(DESTDIR)$(bindir) && \
               mv -f prog$(EXEEXT) prog-$(VERSION)$(EXEEXT) && \
               $(LN_S) prog-$(VERSION)$(EXEEXT) prog$(EXEEXT)

   Note that we rename the program so that a new version will erase the
symbolic link, not the real binary.  Also we `cd' into the destination
directory in order to create relative links.

   When writing `install-exec-hook' or `install-data-hook', please bear
in mind that the exec/data distinction is based on the installation
directory, not on the primary used (*note Install::).  So a
`foo_SCRIPTS' will be installed by `install-data', and a
`barexec_SCRIPTS' will be installed by `install-exec'.  You should
define your hooks consequently.


File: automake.info,  Node: Third-Party Makefiles,  Prev: Extending,  Up: Not Enough

22.2 Third-Party `Makefile's
============================

In most projects all `Makefile's are generated by Automake.  In some
cases, however, projects need to embed subdirectories with handwritten
`Makefile's.  For instance one subdirectory could be a third-party
project with its own build system, not using Automake.

   It is possible to list arbitrary directories in `SUBDIRS' or
`DIST_SUBDIRS' provided each of these directories has a `Makefile' that
recognizes all the following recursive targets.

   When a user runs one of these targets, that target is run recursively
in all subdirectories.  This is why it is important that even
third-party `Makefile's support them.

`all'
     Compile the entire package.  This is the default target in
     Automake-generated `Makefile's, but it does not need to be the
     default in third-party `Makefile's.

`distdir'
     Copy files to distribute into `$(distdir)', before a tarball is
     constructed.  Of course this target is not required if the
     `no-dist' option (*note Options::) is used.

     The variables `$(top_distdir)' and `$(distdir)' (*note Dist::)
     will be passed from the outer package to the subpackage when the
     `distdir' target is invoked.  These two variables have been
     adjusted for the directory which is being recursed into, so they
     are ready to use.

`install'
`install-data'
`install-exec'
`uninstall'
     Install or uninstall files (*note Install::).

`install-info'
     Install only the Texinfo documentation (*note Texinfo::).

`installdirs'
     Create install directories, but do not install any files.

`check'
`installcheck'
     Check the package (*note Tests::).

`mostlyclean'
`clean'
`distclean'
`maintainer-clean'
     Cleaning rules (*note Clean::).

`dvi'
`pdf'
`ps'
`info'
`html'
     Build the documentation in various formats (*note Texinfo::).

`tags'
`ctags'
     Build `TAGS' and `CTAGS' (*note Tags::).

   If you have ever used Gettext in a project, this is a good example of
how third-party `Makefile's can be used with Automake.  The `Makefile's
`gettextize' puts in the `po/' and `intl/' directories are handwritten
`Makefile's that implement all these targets.  That way they can be
added to `SUBDIRS' in Automake packages.

   Directories which are only listed in `DIST_SUBDIRS' but not in
`SUBDIRS' need only the `distclean', `maintainer-clean', and `distdir'
rules (*note Conditional Subdirectories::).

   Usually, many of these rules are irrelevant to the third-party
subproject, but they are required for the whole package to work.  It's
OK to have a rule that does nothing, so if you are integrating a
third-party project with no documentation or tag support, you could
simply augment its `Makefile' as follows:

     EMPTY_AUTOMAKE_TARGETS = dvi pdf ps info html tags ctags
     .PHONY: $(EMPTY_AUTOMAKE_TARGETS)
     $(EMPTY_AUTOMAKE_TARGETS):

   Another aspect of integrating third-party build systems is whether
they support VPATH builds.  Obviously if the subpackage does not
support VPATH builds the whole package will not support VPATH builds.
This in turns means that `make distcheck' will not work, because it
relies on VPATH builds.  Some people can live without this (actually,
many Automake users have never heard of `make distcheck').  Other
people may prefer to revamp the existing `Makefile's to support VPATH.
Doing so does not necessarily require Automake, only Autoconf is needed
(*note Build Directories: (autoconf)Build Directories.).  The necessary
substitutions: `@scrdir@', `@top_srcdir@', and `@top_builddir@' are
defined by `configure' when it processes a `Makefile' (*note Preset
Output Variables: (autoconf)Preset Output Variables.), they are not
computed by the Makefile like the aforementioned `$(distdir)' and
`$(top_distdir)' variables..

   It is sometimes inconvenient to modify a third-party `Makefile' to
introduce the above required targets.  For instance one may want to
keep the third-party sources untouched to ease upgrades to new versions.

   Here are two other ideas.  If GNU make is assumed, one possibility is
to add to that subdirectory a `GNUmakefile' that defines the required
targets and include the third-party `Makefile'.  For this to work in
VPATH builds, `GNUmakefile' must lie in the build directory; the
easiest way to do this is to write a `GNUmakefile.in' instead, and have
it processed with `AC_CONFIG_FILES' from the outer package.  For
example if we assume `Makefile' defines all targets except the
documentation targets, and that the `check' target is actually called
`test', we could write `GNUmakefile' (or `GNUmakefile.in') like this:

     # First, include the real Makefile
     include Makefile
     # Then, define the other targets needed by Automake Makefiles.
     .PHONY: dvi pdf ps info html check
     dvi pdf ps info html:
     check: test

   A similar idea that does not use `include' is to write a proxy
`Makefile' that dispatches rules to the real `Makefile', either with
`$(MAKE) -f Makefile.real $(AM_MAKEFLAGS) target' (if it's OK to rename
the original `Makefile') or with `cd subdir && $(MAKE) $(AM_MAKEFLAGS)
target' (if it's OK to store the subdirectory project one directory
deeper).  The good news is that this proxy `Makefile' can be generated
with Automake.  All we need are `-local' targets (*note Extending::)
that perform the dispatch.  Of course the other Automake features are
available, so you could decide to let Automake perform distribution or
installation.  Here is a possible `Makefile.am':

     all-local:
             cd subdir && $(MAKE) $(AM_MAKEFLAGS) all
     check-local:
             cd subdir && $(MAKE) $(AM_MAKEFLAGS) test
     clean-local:
             cd subdir && $(MAKE) $(AM_MAKEFLAGS) clean

     # Assuming the package knows how to install itself
     install-data-local:
             cd subdir && $(MAKE) $(AM_MAKEFLAGS) install-data
     install-exec-local:
             cd subdir && $(MAKE) $(AM_MAKEFLAGS) install-exec
     uninstall-local:
             cd subdir && $(MAKE) $(AM_MAKEFLAGS) uninstall

     # Distribute files from here.
     EXTRA_DIST = subdir/Makefile subdir/program.c ...

   Pushing this idea to the extreme, it is also possible to ignore the
subproject build system and build everything from this proxy
`Makefile.am'.  This might sounds very sensible if you need VPATH
builds but the subproject does not support them.


File: automake.info,  Node: Distributing,  Next: API versioning,  Prev: Not Enough,  Up: Top

23 Distributing `Makefile.in's
******************************

Automake places no restrictions on the distribution of the resulting
`Makefile.in's.  We still encourage software authors to distribute
their work under terms like those of the GPL, but doing so is not
required to use Automake.

   Some of the files that can be automatically installed via the
`--add-missing' switch do fall under the GPL.  However, these also have
a special exception allowing you to distribute them with your package,
regardless of the licensing you choose.


File: automake.info,  Node: API versioning,  Next: Upgrading,  Prev: Distributing,  Up: Top

24 Automake API versioning
**************************

New Automake releases usually include bug fixes and new features.
Unfortunately they may also introduce new bugs and incompatibilities.
This makes four reasons why a package may require a particular Automake
version.

   Things get worse when maintaining a large tree of packages, each one
requiring a different version of Automake.  In the past, this meant that
any developer (and sometime users) had to install several versions of
Automake in different places, and switch `$PATH' appropriately for each
package.

   Starting with version 1.6, Automake installs versioned binaries.
This means you can install several versions of Automake in the same
`$prefix', and can select an arbitrary Automake version by running
`automake-1.6' or `automake-1.7' without juggling with `$PATH'.
Furthermore, `Makefile''s generated by Automake 1.6 will use
`automake-1.6' explicitly in their rebuild rules.

   The number `1.6' in `automake-1.6' is Automake's API version, not
Automake's version.  If a bug fix release is made, for instance
Automake 1.6.1, the API version will remain 1.6.  This means that a
package which work with Automake 1.6 should also work with 1.6.1; after
all, this is what people expect from bug fix releases.

   If your package relies on a feature or a bug fix introduced in a
release, you can pass this version as an option to Automake to ensure
older releases will not be used.  For instance, use this in your
`configure.ac':

       AM_INIT_AUTOMAKE(1.6.1)    dnl Require Automake 1.6.1 or better.
   or, in a particular `Makefile.am':

       AUTOMAKE_OPTIONS = 1.6.1   # Require Automake 1.6.1 or better.
   Automake will print an error message if its version is older than
the requested version.

What is in the API
==================

Automake's programming interface is not easy to define.  Basically it
should include at least all *documented* variables and targets that a
`Makefile.am' author can use, any behavior associated with them (e.g.
the places where `-hook''s are run), the command line interface of
`automake' and `aclocal', ...

What is not in the API
======================

Every undocumented variable, target, or command line option, is not part
of the API.  You should avoid using them, as they could change from one
version to the other (even in bug fix releases, if this helps to fix a
bug).

   If it turns out you need to use such a undocumented feature, contact
<automake@gnu.org> and try to get it documented and exercised by the
test-suite.


File: automake.info,  Node: Upgrading,  Next: FAQ,  Prev: API versioning,  Up: Top

25 Upgrading a Package to a Newer Automake Version
**************************************************

Automake maintains three kind of files in a package.

   * `aclocal.m4'

   * `Makefile.in's

   * auxiliary tools like `install-sh' or `py-compile'

   `aclocal.m4' is generated by `aclocal' and contains some
Automake-supplied M4 macros.  Auxiliary tools are installed by
`automake --add-missing' when needed.  `Makefile.in's are built from
`Makefile.am' by `automake', and rely on the definitions of the M4
macros put in `aclocal.m4' as well as the behavior of the auxiliary
tools installed.

   Because all these files are closely related, it is important to
regenerate all of them when upgrading to a newer Automake release.  The
usual way to do that is

     aclocal # with any option needed (such a -I m4)
     autoconf
     automake --add-missing --force-missing

or more conveniently:

     autoreconf -vfi

   The use of `--force-missing' ensures that auxiliary tools will be
overridden by new versions (*note Invoking Automake::).

   It is important to regenerate all these files each time Automake is
upgraded, even between bug fixes releases.  For instance it is not
unusual for a bug fix to involve changes to both the rules generated in
`Makefile.in' and the supporting M4 macros copied to `aclocal.m4'.

   Presently `automake' is able to diagnose situations where
`aclocal.m4' has been generated with another version of `aclocal'.
However it never checks whether auxiliary scripts are up-to-date.  In
other words, `automake' will tell you when `aclocal' needs to be rerun,
but it will never diagnose a missing `--force-missing'.

   Before upgrading to a new major release, it is a good idea to read
the file `NEWS'.  This file lists all changes between releases: new
features, obsolete constructs, known incompatibilities, and workarounds.


File: automake.info,  Node: FAQ,  Next: History,  Prev: Upgrading,  Up: Top

26 Frequently Asked Questions about Automake
********************************************

This chapter covers some questions that often come up on the mailing
lists.

* Menu:

* CVS::                         CVS and generated files
* maintainer-mode::             missing and AM_MAINTAINER_MODE
* wildcards::                   Why doesn't Automake support wildcards?
* distcleancheck::              Files left in build directory after distclean
* Flag Variables Ordering::     CFLAGS vs. AM_CFLAGS vs. mumble_CFLAGS
* renamed objects::             Why are object files sometimes renamed?
* Per-Object Flags::            How to simulate per-object flags?
* Multiple Outputs::            Writing rules for tools with many output files


File: automake.info,  Node: CVS,  Next: maintainer-mode,  Up: FAQ

26.1 CVS and generated files
============================

26.1.1 Background: distributed generated files
----------------------------------------------

Packages made with Autoconf and Automake ship with some generated files
like `configure' or `Makefile.in'.  These files were generated on the
developer's host and are distributed so that end-users do not have to
install the maintainer tools required to rebuild them.  Other generated
files like Lex scanners, Yacc parsers, or Info documentation, are
usually distributed on similar grounds.

   Automake outputs rules in `Makefile's to rebuild these files.  For
instance `make' will run `autoconf' to rebuild `configure' whenever
`configure.ac' is changed.  This makes development safer by ensuring a
`configure' is never out-of-date with respect to `configure.ac'.

   As generated files shipped in packages are up-to-date, and because
`tar' preserves times-tamps, these rebuild rules are not triggered when
a user unpacks and builds a package.

26.1.2 Background: CVS and timestamps
-------------------------------------

Unless you use CVS keywords (in which case files must be updated at
commit time), CVS preserves timestamp during `cvs commit' and `cvs
import -d' operations.

   When you check out a file using `cvs checkout' its timestamp is set
to that of the revision which is being checked out.

   However, during `cvs update', files will have the date of the
update, not the original timestamp of this revision.  This is meant to
make sure that `make' notices sources files have been updated.

   This timestamp shift is troublesome when both sources and generated
files are kept under CVS.  Because CVS processes files in alphabetical
order, `configure.ac' will appear older than `configure' after a `cvs
update' that updates both files, even if `configure' was newer than
`configure.ac' when it was checked in.  Calling `make' will then
trigger a spurious rebuild of `configure'.

26.1.3 Living with CVS in Autoconfiscated projects
--------------------------------------------------

There are basically two clans amongst maintainers: those who keep all
distributed files under CVS, including generated files, and those who
keep generated files _out_ of CVS.

All files in CVS
................

   * The CVS repository contains all distributed files so you know
     exactly what is distributed, and you can checkout any prior
     version entirely.

   * Maintainers can see how generated files evolve (for instance you
     can see what happens to your `Makefile.in's when you upgrade
     Automake and make sure they look OK).

   * Users do not need the autotools to build a checkout of the
     project, it works just like a released tarball.

   * If users use `cvs update' to update their copy, instead of `cvs
     checkout' to fetch a fresh one, timestamps will be inaccurate.
     Some rebuild rules will be triggered and attempt to run developer
     tools such as `autoconf' or `automake'.

     Actually, calls to such tools are all wrapped into a call to the
     `missing' script discussed later (*note maintainer-mode::).
     `missing' will take care of fixing the timestamps when these tools
     are not installed, so that the build can continue.

   * In distributed development, developers are likely to have different
     version of the maintainer tools installed.  In this case rebuilds
     triggered by timestamp lossage will lead to spurious changes to
     generated files.  There are several solutions to this:

        * All developers should use the same versions, so that the
          rebuilt files are identical to files in CVS.  (This starts to
          be difficult when each project you work on uses different
          versions.)

        * Or people use a script to fix the timestamp after a checkout
          (the GCC folks have such a script).

        * Or `configure.ac' uses `AM_MAINTAINER_MODE', which will
          disable all these rebuild rules by default.  This is further
          discussed in *Note maintainer-mode::.

   * Although we focused on spurious rebuilds, the converse can also
     happen.  CVS's timestamp handling can also let you think an
     out-of-date file is up-to-date.

     For instance, suppose a developer has modified `Makefile.am' and
     rebuilt `Makefile.in', and then decide to do a last-minute change
     to `Makefile.am' right before checking in both files (without
     rebuilding `Makefile.in' to account for the change).

     This last change to `Makefile.am' make the copy of `Makefile.in'
     out-of-date.  Since CVS processes files alphabetically, when
     another developer `cvs update' his or her tree, `Makefile.in' will
     happen to be newer than `Makefile.am'.  This other developer will
     not see `Makefile.in' is out-of-date.


Generated files out of CVS
..........................

One way to get CVS and `make' working peacefully is to never store
generated files in CVS, i.e., do not CVS-control files which are
`Makefile' targets (also called _derived_ files).

   This way developers are not annoyed by changes to generated files.
It does not matter if they all have different versions (assuming they
are compatible, of course).  And finally, timestamps are not lost,
changes to sources files can't be missed as in the
`Makefile.am'/`Makefile.in' example discussed earlier.

   The drawback is that the CVS repository is not an exact copy of what
is distributed and that users now need to install various development
tools (maybe even specific versions) before they can build a checkout.
But, after all, CVS's job is versioning, not distribution.

   Allowing developers to use different versions of their tools can also
hide bugs during distributed development.  Indeed, developers will be
using (hence testing) their own generated files, instead of the
generated files that will be released actually.  The developer who
prepares the tarball might be using a version of the tool that produces
bogus output (for instance a non-portable C file), something other
developers could have noticed if they weren't using their own versions
of this tool.

26.1.4 Third-party files
------------------------

Another class of files not discussed here (because they do not cause
timestamp issues) are files which are shipped with a package, but
maintained elsewhere.  For instance tools like `gettextize' and
`autopoint' (from Gettext) or `libtoolize' (from Libtool), will install
or update files in your package.

   These files, whether they are kept under CVS or not, raise similar
concerns about version mismatch between developers' tools.  The Gettext
manual has a section about this, see *Note CVS Issues: (gettext)CVS
Issues.


File: automake.info,  Node: maintainer-mode,  Next: wildcards,  Prev: CVS,  Up: FAQ

26.2 `missing' and `AM_MAINTAINER_MODE'
=======================================

26.2.1 `missing'
----------------

The `missing' script is a wrapper around several maintainer tools,
designed to warn users if a maintainer tool is required but missing.
Typical maintainer tools are `autoconf', `automake', `bison', etc.
Because file generated by these tools are shipped with the other
sources of a package, these tools shouldn't be required during a user
build and they are not checked for in `configure'.

   However, if for some reason a rebuild rule is triggered and involves
a missing tool, `missing' will notice it and warn the user.  Besides
the warning, when a tool is missing, `missing' will attempt to fix
timestamps in a way which allow the build to continue.  For instance
`missing' will touch `configure' if `autoconf' is not installed.  When
all distributed files are kept under CVS, this feature of `missing'
allows user _with no maintainer tools_ to build a package off CVS,
bypassing any timestamp inconsistency implied by `cvs update'.

   If the required tool is installed, `missing' will run it and won't
attempt to continue after failures.  This is correct during
development: developers love fixing failures.  However, users with
wrong versions of maintainer tools may get an error when the rebuild
rule is spuriously triggered, halting the build.  This failure to let
the build continue is one of the arguments of the `AM_MAINTAINER_MODE'
advocates.

26.2.2 `AM_MAINTAINER_MODE'
---------------------------

`AM_MAINTAINER_MODE' disables the so called "rebuild rules" by default.
If you have `AM_MAINTAINER_MODE' in `configure.ac', and run
`./configure && make', then `make' will *never* attempt to rebuilt
`configure', `Makefile.in's, Lex or Yacc outputs, etc.  I.e., this
disables build rules for files which are usually distributed and that
users should normally not have to update.

   If you run `./configure --enable-maintainer-mode', then these
rebuild rules will be active.

   People use `AM_MAINTAINER_MODE' either because they do want their
users (or themselves) annoyed by timestamps lossage (*note CVS::), or
because they simply can't stand the rebuild rules and prefer running
maintainer tools explicitly.

   `AM_MAINTAINER_MODE' also allows you to disable some custom build
rules conditionally.  Some developers use this feature to disable rules
that need exotic tools that users may not have available.

   Several years ago Franc,ois Pinard pointed out several arguments
against `AM_MAINTAINER_MODE'.  Most of them relate to insecurity.  By
removing dependencies you get non-dependable builds: change to sources
files can have no effect on generated files and this can be very
confusing when unnoticed.  He adds that security shouldn't be reserved
to maintainers (what `--enable-maintainer-mode' suggests), on the
contrary.  If one user has to modify a `Makefile.am', then either
`Makefile.in' should be updated or a warning should be output (this is
what Automake uses `missing' for) but the last thing you want is that
nothing happens and the user doesn't notice it (this is what happens
when rebuild rules are disabled by `AM_MAINTAINER_MODE').

   Jim Meyering, the inventor of the `AM_MAINTAINER_MODE' macro was
swayed by Franc,ois's arguments, and got rid of `AM_MAINTAINER_MODE' in
all of his packages.

   Still many people continue to use `AM_MAINTAINER_MODE', because it
helps them working on projects where all files are kept under CVS, and
because `missing' isn't enough if you have the wrong version of the
tools.


File: automake.info,  Node: wildcards,  Next: distcleancheck,  Prev: maintainer-mode,  Up: FAQ

26.3 Why doesn't Automake support wildcards?
============================================

Developers are lazy.  They often would like to use wildcards in
`Makefile.am's, so they don't need to remember they have to update
`Makefile.am's every time they add, delete, or rename a file.

   There are several objections to this:
   * When using CVS (or similar) developers need to remember they have
     to run `cvs add' or `cvs rm' anyway.  Updating `Makefile.am'
     accordingly quickly becomes a reflex.

     Conversely, if your application doesn't compile because you forgot
     to add a file in `Makefile.am', it will help you remember to `cvs
     add' it.

   * Using wildcards makes easy to distribute files by mistake.  For
     instance some code a developer is experimenting with (a test case,
     say) but which should not be part of the distribution.

   * Using wildcards it's easy to omit some files by mistake.  For
     instance one developer creates a new file, uses it at many places,
     but forget to commit it.  Another developer then checkout the
     incomplete project and is able to run `make dist' successfully,
     even though a file is missing.

   * Listing files, you control *exactly* what you distribute.  If some
     file that should be distributed is missing from your tree, `make
     dist' will complain.  Besides, you don't distribute more than what
     you listed.

   * Finally it's really hard to `forget' adding a file to
     `Makefile.am', because if you don't add it, it doesn't get
     compiled nor installed, so you can't even test it.

   Still, these are philosophical objections, and as such you may
disagree, or find enough value in wildcards to dismiss all of them.
Before you start writing a patch against Automake to teach it about
wildcards, let's see the main technical issue: portability.

   Although `$(wildcard ...)' works with GNU `make', it is not portable
to other `make' implementations.

   The only way Automake could support `$(wildcard ...)' is by
expending `$(wildcard ...)' when `automake' is run.  Resulting
`Makefile.in's would be portable since they would list all files and
not use `$(wildcard ...)'.  However that means developers need to
remember they must run `automake' each time they add, delete, or rename
files.

   Compared to editing `Makefile.am', this is really little win.  Sure,
it's easier and faster to type `automake; make' than to type `emacs
Makefile.am; make'.  But nobody bothered enough to write a patch add
support for this syntax.  Some people use scripts to generated file
lists in `Makefile.am' or in separate `Makefile' fragments.

   Even if you don't care about portability, and are tempted to use
`$(wildcard ...)' anyway because you target only GNU Make, you should
know there are many places where Automake need to know exactly which
files should be processed.  As Automake doesn't know how to expand
`$(wildcard ...)', you cannot use it in these places.  `$(wildcard
...)' is a black box comparable to `AC_SUBST'ed variables as far
Automake is concerned.

   You can get warnings about `$(wildcard ...') constructs using the
`-Wportability' flag.


File: automake.info,  Node: distcleancheck,  Next: Flag Variables Ordering,  Prev: wildcards,  Up: FAQ

26.4 Files left in build directory after distclean
==================================================

This is a diagnostic you might encounter while running `make distcheck'.

   As explained in *Note Dist::, `make distcheck' attempts to build and
check your package for errors like this one.

   `make distcheck' will perform a `VPATH' build of your package, and
then call `make distclean'.  Files left in the build directory after
`make distclean' has run are listed after this error.

   This diagnostic really covers two kinds of errors:

   * files that are forgotten by distclean;

   * distributed files that are erroneously rebuilt.

   The former left-over files are not distributed, so the fix is to mark
them for cleaning (*note Clean::), this is obvious and doesn't deserve
more explanations.

   The latter bug is not always easy to understand and fix, so let's
proceed with an example.  Suppose our package contains a program for
which we want to build a man page using `help2man'.  GNU `help2man'
produces simple manual pages from the `--help' and `--version' output
of other commands (*note Overview: (help2man)Top.).  Because we don't
to force want our users to install `help2man', we decide to distribute
the generated man page using the following setup.

     # This Makefile.am is bogus.
     bin_PROGRAMS = foo
     foo_SOURCES = foo.c
     dist_man_MANS = foo.1

     foo.1: foo$(EXEEXT)
             help2man --output=foo.1 ./foo$(EXEEXT)

   This will effectively distribute the man page.  However, `make
distcheck' will fail with:

     ERROR: files left in build directory after distclean:
     ./foo.1

   Why was `foo.1' rebuilt?  Because although distributed, `foo.1'
depends on a non-distributed built file: `foo$(EXEEXT)'.
`foo$(EXEEXT)' is built by the user, so it will always appear to be
newer than the distributed `foo.1'.

   `make distcheck' caught an inconsistency in our package.  Our intent
was to distribute `foo.1' so users do not need installing `help2man',
however since this our rule causes this file to be always rebuilt,
users _do_ need `help2man'.  Either we should ensure that `foo.1' is
not rebuilt by users, or there is no point in distributing `foo.1'.

   More generally, the rule is that distributed files should never
depend on non-distributed built files.  If you distribute something
generated, distribute its sources.

   One way to fix the above example, while still distributing `foo.1'
is to not depend on `foo$(EXEEXT)'.  For instance, assuming `foo
--version' and `foo --help' do not change unless `foo.c' or
`configure.ac' change, we could write the following `Makefile.am':

     bin_PROGRAMS = foo
     foo_SOURCES = foo.c
     dist_man_MANS = foo.1

     foo.1: foo.c $(top_srcdir)/configure.ac
             $(MAKE) $(AM_MAKEFLAGS) foo$(EXEEXT)
             help2man --output=foo.1 ./foo$(EXEEXT)

   This way, `foo.1' will not get rebuilt every time `foo$(EXEEXT)'
changes.  The `make' call makes sure `foo$(EXEEXT)' is up-to-date
before `help2man'.  Another way to ensure this would be to use separate
directories for binaries and man pages, and set `SUBDIRS' so that
binaries are built before man pages.

   We could also decide not to distribute `foo.1'.  In this case it's
fine to have `foo.1' dependent upon `foo$(EXEEXT)', since both will
have to be rebuilt.  However it would be impossible to build the
package in a cross-compilation, because building `foo.1' involves an
_execution_ of `foo$(EXEEXT)'.

   Another context where such errors are common is when distributed
files are built by tools which are built by the package.  The pattern
is similar:

     distributed-file: built-tools distributed-sources
             build-command

should be changed to

     distributed-file: distributed-sources
             $(MAKE) $(AM_MAKEFLAGS) built-tools
             build-command

or you could choose not to distribute `distributed-file', if
cross-compilation does not matter.

   The points made through these examples are worth a summary:

   * Distributed files should never depend upon non-distributed built
     files.

   * Distributed files should be distributed will all their
     dependencies.

   * If a file is _intended_ be rebuilt by users, there is no point in
     distributing it.

   For desperate cases, it's always possible to disable this check by
setting `distcleancheck_listfiles' as documented in *Note Dist::.  Make
sure you do understand the reason why `make distcheck' complains before
you do this.  `distcleancheck_listfiles' is a way to _hide_ errors, not
to fix them.  You can always do better.


File: automake.info,  Node: Flag Variables Ordering,  Next: renamed objects,  Prev: distcleancheck,  Up: FAQ

26.5 Flag Variables Ordering
============================

     What is the difference between `AM_CFLAGS', `CFLAGS', and
     `mumble_CFLAGS'?

     Why does `automake' output `CPPFLAGS' after
     `AM_CPPFLAGS' on compile lines?  Shouldn't it be the converse?

     My `configure' adds some warning flags into `CXXFLAGS'.  In
     one `Makefile.am' I would like to append a new flag, however if I
     put the flag into `AM_CXXFLAGS' it is prepended to the other
     flags, not appended.

26.5.1 Compile Flag Variables
-----------------------------

This section attempts to answer all the above questions.  We will
mostly discuss `CPPFLAGS' in our examples, but actually the answer
holds for all the compile flags used in Automake: `CCASFLAGS',
`CFLAGS', `CPPFLAGS', `CXXFLAGS', `FCFLAGS', `FFLAGS', `GCJFLAGS',
`LDFLAGS', `LFLAGS', `OBJCFLAGS', `RFLAGS', and `YFLAGS'.

   `CPPFLAGS', `AM_CPPFLAGS', and `mumble_CPPFLAGS' are three variables
that can be used to pass flags to the C preprocessor (actually these
variables are also used for other languages like C++ or preprocessed
Fortran).  `CPPFLAGS' is the user variable (*note User Variables::),
`AM_CPPFLAGS' is the Automake variable, and `mumble_CPPFLAGS' is the
variable specific to the `mumble' target (we call this a per-target
variable, *note Program and Library Variables::).

   Automake always uses two of these variables when compiling C sources
files.  When compiling an object file for the `mumble' target, the
first variable will be `mumble_CPPFLAGS' if it is defined, or
`AM_CPPFLAGS' otherwise.  The second variable is always `CPPFLAGS'.

   In the following example,

     bin_PROGRAMS = foo bar
     foo_SOURCES = xyz.c
     bar_SOURCES = main.c
     foo_CPPFLAGS = -DFOO
     AM_CPPFLAGS = -DBAZ

`xyz.o' will be compiled with `$(foo_CPPFLAGS) $(CPPFLAGS)', (because
`xyz.o' is part of the `foo' target), while `main.o' will be compiled
with `$(AM_CPPFLAGS) $(CPPFLAGS)' (because there is no per-target
variable for target `bar').

   The difference between `mumble_CPPFLAGS' and `AM_CPPFLAGS' being
clear enough, let's focus on `CPPFLAGS'.  `CPPFLAGS' is a user
variable, i.e., a variable that users are entitled to modify in order
to compile the package.  This variable, like many others, is documented
at the end of the output of `configure --help'.

   For instance, someone who needs to add `/home/my/usr/include' to the
C compiler's search path would configure a package with

     ./configure CPPFLAGS='-I /home/my/usr/include'

and this flag would be propagated to the compile rules of all
`Makefile's.

   It is also not uncommon to override a user variable at `make'-time.
Many installers do this with `prefix', but this can be useful with
compiler flags too.  For instance if, while debugging a C++ project,
you need to disable optimization in one specific object file, you can
run something like

     rm file.o
     make CXXFLAGS=-O0 file.o
     make

   The reason `$(CPPFLAGS)' appears after `$(AM_CPPFLAGS)' or
`$(mumble_CPPFLAGS)' in the compile command is that users should always
have the last say.  It probably makes more sense if you think about it
while looking at the `CXXFLAGS=-O0' above, which should supersede any
other switch from `AM_CXXFLAGS' or `mumble_CXXFLAGS' (and this of
course replaces the previous value of `CXXFLAGS').

   You should never redefine a user variable such as `CPPFLAGS' in
`Makefile.am'.  Use `automake -Woverride' to diagnose such mistakes.
Even something like

     CPPFLAGS = -DDATADIR=\"$(datadir)\" @CPPFLAGS@

is erroneous.  Although this preserves `configure''s value of
`CPPFLAGS', the definition of `DATADIR' will disappear if a user
attempts to override `CPPFLAGS' from the `make' command line.

     AM_CPPFLAGS = -DDATADIR=\"$(datadir)\"

is all what is needed here if no per-target flags are used.

   You should not add options to these variables from inside
`configure' either, for the same reason.  Occasionally you need to
modify these variables to perform a test, but you should reset their
value afterwards.

   What we recommend is that you define extra flags in separate
variables.  For instance you may write an Autoconf macro that computes
a set of warning options for the C compiler, and `AC_SUBST' them in
`WARNINGCFLAGS'; you may also have an Autoconf macro that determines
which compiler and which linker flags should be used to link with
library `libfoo', and `AC_SUBST' these in `LIBFOOCFLAGS' and
`LIBFOOLDFLAGS'.  Then, a `Makefile.am' could use these variables as
follows:

     AM_CFLAGS = $(WARNINGCFLAGS)
     bin_PROGRAMS = prog1 prog2
     prog1_SOURCES = ...
     prog2_SOURCES = ...
     prog2_CFLAGS = $(LIBFOOCFLAGS) $(AM_CFLAGS)
     prog2_LDFLAGS = $(LIBFOOLDFLAGS)

   In this example both programs will be compiled with the flags
substituted into `$(WARNINGCFLAGS)', and `prog2' will additionally be
compiled with the flags required to link with `libfoo'.

   Note that listing `AM_CFLAGS' in a per-target `CFLAGS' variable is a
common idiom to ensure that `AM_CFLAGS' applies to every target in a
`Makefile.in'.

   Using variables like this gives you full control over the ordering of
the flags.  For instance if there is a flag in $(WARNINGCFLAGS) that
you want to negate for a particular target, you can use something like
`prog1_CFLAGS = $(AM_CFLAGS) -no-flag'.  If all these flags had been
forcefully appended to `CFLAGS', there would be no way to disable one
flag.  Yet another reason to leave user variables to users.

   Finally, we have avoided naming the variable of the example
`LIBFOO_LDFLAGS' (with an underscore) because that would cause Automake
to think that this is actually a per-target variable (like
`mumble_LDFLAGS') for some non-declared `LIBFOO' target.

26.5.2 Other Variables
----------------------

There are other variables in Automake that follow similar principles to
allow user options.  For instance Texinfo rules (*note Texinfo::) uses
`MAKEINFOFLAGS' and `AM_MAKEINFOFLAGS'.  Similarly, DejaGnu tests
(*note Tests::) use `RUNTESTDEFAULTFLAGS' and `AM_RUNTESTDEFAULTFLAGS'.
The tags and ctags rules (*note Tags::) use `ETAGSFLAGS',
`AM_ETAGSFLAGS', `CTAGSFLAGS', and `AM_CTAGSFLAGS'.  Java rules (*note
Java::) use `JAVACFLAGS' and `AM_JAVACFLAGS'.  None of these rules do
support per-target flags (yet).

   To some extent, even `AM_MAKEFLAGS' (*note Subdirectories::) obeys
this naming scheme.  The slight difference is that `MAKEFLAGS' is
passed to sub-`make's implicitly by `make' itself.

   However you should not think that all variables ending with `FLAGS'
follow this convention.  For instance `DISTCHECK_CONFIGURE_FLAGS'
(*note Dist::), `ACLOCAL_AMFLAGS' (see *Note Rebuilding:: and *Note
Local Macros::), are two variables that are only useful to the
maintainer and have no user counterpart.

   `ARFLAGS' (*note A Library::) is usually defined by Automake and has
neither `AM_' nor per-target cousin.

   Finally you should not think either that the existence of a
per-target variable implies that of an `AM_' variable or that of a user
variable.  For instance the `mumble_LDADD' per-target variable
overrides the global `LDADD' variable (which is not a user variable),
and `mumble_LIBADD' exists only as a per-target variable.  *Note
Program and Library Variables::.


File: automake.info,  Node: renamed objects,  Next: Per-Object Flags,  Prev: Flag Variables Ordering,  Up: FAQ

26.6 Why are object files sometimes renamed?
============================================

This happens when per-target compilation flags are used.  Object files
need to be renamed just in case they would clash with object files
compiled from the same sources, but with different flags.  Consider the
following example.

     bin_PROGRAMS = true false
     true_SOURCES = generic.c
     true_CPPFLAGS = -DEXIT_CODE=0
     false_SOURCES = generic.c
     false_CPPFLAGS = -DEXIT_CODE=1
   Obviously the two programs are built from the same source, but it
would be bad if they shared the same object, because `generic.o' cannot
be built with both `-DEXIT_CODE=0' _and_ `-DEXIT_CODE=1'.  Therefore
`automake' outputs rules to build two different objects:
`true-generic.o' and `false-generic.o'.

   `automake' doesn't actually look whether source files are shared to
decide if it must rename objects.  It will just rename all objects of a
target as soon as it sees per-target compilation flags are used.

   It's OK to share object files when per-target compilation flags are
not used.  For instance `true' and `false' will both use `version.o' in
the following example.

     AM_CPPFLAGS = -DVERSION=1.0
     bin_PROGRAMS = true false
     true_SOURCES = true.c version.c
     false_SOURCES = false.c version.c

   Note that the renaming of objects is also affected by the
`_SHORTNAME' variable (*note Program and Library Variables::).


File: automake.info,  Node: Per-Object Flags,  Next: Multiple Outputs,  Prev: renamed objects,  Up: FAQ

26.7 Per-Object Flags Emulation
===============================

     One of my source files needs to be compiled with different flags.  How
     do I do?

   Automake supports per-program and per-library compilation flags (see
*Note Program and Library Variables:: and *Note Flag Variables
Ordering::).  With this you can define compilation flags that apply to
all files compiled for a target.  For instance in

     bin_PROGRAMS = foo
     foo_SOURCES = foo.c foo.h bar.c bar.h main.c
     foo_CFLAGS = -some -flags

`foo-foo.o', `foo-bar.o', and `foo-main.o' will all be compiled with
`-some -flags'.  (If you wonder about the names of these object files,
see *Note renamed objects::.)  Note that `foo_CFLAGS' gives the flags
to use when compiling all the C sources of the _program_ `foo', it has
nothing to do with `foo.c' or `foo-foo.o' specifically.

   What if `foo.c' needs to be compiled into `foo.o' using some
specific flags, that none of the other files require?  Obviously
per-program flags are not directly applicable here.  Something like
per-object flags are expected, i.e., flags that would be used only when
creating `foo-foo.o'.  Automake does not support that, however this is
easy to simulate using a library that contains only that object, and
compiling this library with per-library flags.

     bin_PROGRAMS = foo
     foo_SOURCES = bar.c bar.h main.c
     foo_CFLAGS = -some -flags
     foo_LDADD = libfoo.a
     noinst_LIBRARIES = libfoo.a
     libfoo_a_SOURCES = foo.c foo.h
     libfoo_a_CFLAGS = -some -other -flags

   Here `foo-bar.o' and `foo-main.o' will all be compiled with `-some
-flags', while `libfoo_a-foo.o' will be compiled using `-some -other
-flags'.  Eventually, all three objects will be linked to form `foo'.

   This trick can also be achieved using Libtool convenience libraries,
i.e., `noinst_LTLIBRARIES = libfoo.la' (*note Libtool Convenience
Libraries::).

   Another tempting idea to implement per-object flags is to override
the compile rules `automake' would output for these files.  Automake
will not define a rule for a target you have defined, so you could
think about defining the `foo-foo.o: foo.c' rule yourself.  We
recommend against this, because this is error prone.  For instance if
you add such a rule to the first example, it will break the day you
decide to remove `foo_CFLAGS' (because `foo.c' will then be compiled as
`foo.o' instead of `foo-foo.o', *note renamed objects::).  Also in
order to support dependency tracking, the two `.o'/`.obj' extensions,
and all the other flags variables involved in a compilation, you will
end up modifying a copy of the rule previously output by `automake' for
this file.  If a new release of Automake generates a different rule,
your copy will need to be updated by hand.


File: automake.info,  Node: Multiple Outputs,  Prev: Per-Object Flags,  Up: FAQ

26.8 Handling Tools that Produce Many Outputs
=============================================

This section describes a `make' idiom that can be used when a tool
produces multiple output files.  It is not specific to Automake and can
be used in ordinary `Makefile's.

   Suppose we have a program called `foo' that will read one file
called `data.foo' and produce two files named `data.c' and `data.h'.
We want to write a `Makefile' rule that captures this one-to-two
dependency.

   The naive rule is incorrect:

     # This is incorrect.
     data.c data.h: data.foo
             foo data.foo

What the above rule really says is that `data.c' and `data.h' each
depend on `data.foo', and can each be built by running `foo data.foo'.
In other words it is equivalent to:

     # We do not want this.
     data.c: data.foo
             foo data.foo
     data.h: data.foo
             foo data.foo

which means that `foo' can be run twice.  Usually it will not be run
twice, because `make' implementations are smart enough to check for the
existence of the second file after the first one has been built; they
will therefore detect that it already exists.  However there are a few
situations where it can run twice anyway:

   * The most worrying case is when running a parallel `make'.  If
     `data.c' and `data.h' are built in parallel, two `foo data.foo'
     commands will run concurrently.  This is harmful.

   * Another case is when the dependency (here `data.foo') is (or
     depends upon) a phony target.

   A solution that works with parallel `make' but not with phony
dependencies is the following:

     data.c data.h: data.foo
             foo data.foo
     data.h: data.c

The above rules are equivalent to

     data.c: data.foo
             foo data.foo
     data.h: data.foo data.c
             foo data.foo
   therefore a parallel `make' will have to serialize the builds of
`data.c' and `data.h', and will detect that the second is no longer
needed once the first is over.

   Using this pattern is probably enough for most cases.  However it
does not scale easily to more output files (in this scheme all output
files must be totally ordered by the dependency relation), so we will
explore a more complicated solution.

   Another idea is to write the following:

     # There is still a problem with this one.
     data.c: data.foo
             foo data.foo
     data.h: data.c

The idea is that `foo data.foo' is run only when `data.c' needs to be
updated, but we further state that `data.h' depends upon `data.c'.
That way, if `data.h' is required and `data.foo' is out of date, the
dependency on `data.c' will trigger the build.

   This is almost perfect, but suppose we have built `data.h' and
`data.c', and then we erase `data.h'.  Then, running `make data.h' will
not rebuild `data.h'.  The above rules just state that `data.c' must be
up-to-date with respect to `data.foo', and this is already the case.

   What we need is a rule that forces a rebuild when `data.h' is
missing.  Here it is:

     data.c: data.foo
             foo data.foo
     data.h: data.c
             @if test -f $@; then :; else \
               rm -f data.c; \
               $(MAKE) $(AM_MAKEFLAGS) data.c; \
             fi

   The above scales easily to more outputs and more inputs.  One of the
output is picked up to serve as a witness of the run of the command, it
depends upon all inputs, and all other outputs depend upon it.  For
instance if `foo' should additionally read `data.bar' and also produce
`data.w' and `data.x', we would write:

     data.c: data.foo data.bar
             foo data.foo data.bar
     data.h data.w data.x: data.c
             @if test -f $@; then :; else \
               rm -f data.c; \
               $(MAKE) $(AM_MAKEFLAGS) data.c; \
             fi

   There is still a minor problem with this setup.  `foo' outputs four
files, but we do not know in which order these files are created.
Suppose that `data.h' is created before `data.c'.  Then we have a weird
situation.  The next time `make' is run, `data.h' will appear older
than `data.c', the second rule will be triggered, a shell will be
started to execute the `if...fi' command, but actually it will just
execute the `then' branch, that is: nothing.  In other words, because
the witness we selected is not the first file created by `foo', `make'
will start a shell to do nothing each time it is run.

   A simple riposte is to fix the timestamps when this happens.

     data.c: data.foo data.bar
             foo data.foo data.bar
     data.h data.w data.x: data.c
             @if test -f $@; then \
               touch $@; \
             else \
               rm -f data.c; \
               $(MAKE) $(AM_MAKEFLAGS) data.c; \
             fi

   Another solution, not incompatible with the previous one, is to use a
different and dedicated file as witness, rather than using any of
`foo''s outputs.

     data.stamp: data.foo data.bar
             @rm -f data.tmp
             @touch data.tmp
             foo data.foo data.bar
             @mv -f data.tmp $@
     data.c data.h data.w data.x: data.stamp
             @if test -f $@; then \
               touch $@; \
             else \
               rm -f data.stamp; \
               $(MAKE) $(AM_MAKEFLAGS) data.stamp; \
             fi

   `data.tmp' is created before `foo' is run, so it has a timestamp
older than output files output by `foo'.  It is then renamed to
`data.stamp' after `foo' has run, because we do not want to update
`data.stamp' if `foo' fails.

   Using a dedicated witness like this is very handy when the list of
output files is not known beforehand.  As an illustration, consider the
following rules to compile many `*.el' files into `*.elc' files in a
single command.  It does not matter how `ELFILES' is defined (as long
as it is not empty: empty targets are not accepted by POSIX).

     ELFILES = one.el two.el three.el ...
     ELCFILES = $(ELFILES:=c)

     elc-stamp: $(ELFILES)
             @rm -f elc-temp
             @touch elc-temp
             $(elisp_comp) $(ELFILES)
             @mv -f elc-temp $@

     $(ELCFILES): elc-stamp
             @if test -f $@; then \
               touch $@; \
             else \
               rm -f elc-stamp; \
               $(MAKE) $(AM_MAKEFLAGS) elc-stamp; \
             fi

   For completeness it should be noted that GNU `make' is able to
express rules with multiple output files using pattern rules (*note
Pattern Rule Examples: (make)Pattern Examples.).  We do not discuss
pattern rules here because they are not portable, but they can be
convenient in packages that assume GNU `make'.


File: automake.info,  Node: History,  Next: Copying This Manual,  Prev: FAQ,  Up: Top

27 History of Automake
**********************

This chapter presents various aspects of the history of Automake.  The
exhausted reader can safely skip it; this will be more of interest to
nostalgic people, or to those curious to learn about the evolution of
Automake.

* Menu:

* Timeline::                    The Automake story.
* Dependency Tracking Evolution::  Evolution of Automatic Dependency Tracking
* Releases::                    Statistics about Automake Releases

