%!PS-AdobeFont-1.0  -*- PostScript -*-
%%Copyright: (c) 1996 Johannes Goldynia <Johannes.Goldynia@pdts.at>

% pcfont.pfa - Type 3 font providing support for line drawing PC encoding
%
% Copyright (c) 1996 Johannes Goldynia <Johannes.Goldynia@pdts.at>
%
% This program is free software; you can redistribute it and/or modify
% it under the terms of the GNU General Public License as published by
% the Free Software Foundation; either version 3 of the License, or
% (at your option) any later version.
%
% This program is distributed in the hope that it will be useful, but
% WITHOUT ANY WARRANTY; without even the implied warranty of
% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
% General Public License for more details.
%
% You should have received a copy of the GNU General Public License
% along with this program; if not, write to the Free Software
% Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

23 dict dup begin
  /FontMatrix [.001 0 0 .00112 0 0] def
  /FontType 3 def
  /FontBBox [0 -200 600 800] def
  /Notice (PCfont 1991) def
  /FullName (PCfont) def
  /FontName /PCfont def
  /isFixedPitch true def
  /Encoding 
  [
    /null /Wsmiley /Bsmiley /heart /diamond /club /spade /Bbullet
    /Wbullet /Bcircle /Wcircle /male /female /quarternote /sixteenthnote
    /sun /pointerright /pointerleft /Varrowboth /exclamdbl /paragraph
    /section /cursorblock /floor /arrowup /arrowdown /arrowright
    /arrowleft /smallLLsingle /arrowboth /pointerup /pointerdown /blank
    /exclam /quotedbl /numbersign /dollar /percent /ampersand /quotesingle
    /parenleft /parenright /asterisk /plus /comma /hyphen /period /slash
    /zero /one /two /three /four /five /six /seven /eight /nine /colon
    /semicolon /less /equal /greater /question /at /A /B /C /D /E /F /G /H
    /I /J /K /L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft
    /backslash /bracketright /asciicircum /underscore /quoteleft /a /b /c
    /d /e /f /g /h /i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z
    /braceleft /brokenbar /braceright /asciitilde /Delta /Ccedilla
    /udieresis /eacute /acircumflex /adieresis /agrave /aring /ccedilla
    /ecircumflex /edieresis /egrave /idieresis /icircumflex /igrave
    /Adieresis /Aring /Eacute /ae /AE /ocircumflex /odieresis /ograve
    /ucircumflex /ugrave /ydieresis /Odieresis /Udieresis /cent /sterling
    /yen /point /integral /aacute /iacute /oacute /uacute /ntilde /Ntilde
    /aunder /ounder /questiondown /smallULsingle /smallURsingle /half
    /quarter /exclamdown /lessdbl /greaterdbl /lightbox /mediumbox
    /darkbox /Vsingle /VsingleTleftsingle /VsingleTleftdbl
    /VdblTleftsingle /VdblURsingle /VsingleURdbl /VdblTleftdbl /Vdbl
    /VdblURdbl /VdblLRdbl /VdblLRsingle /VsingleLRdbl /VsingleURsingle
    /VsingleLLsingle /HsingleTupsingle /HsingleTdownsingle
    /VsingleTrightsingle /Hsingle /VsingleXsingle /VsingleTrightdbl
    /VdblTrightsingle /VdblLLdbl /VdblULdbl /HdblTupdbl /HdblTdowndbl
    /VdblTrightdbl /Hdbl /VdblXdbl /HdblTupsingle /HsingleTupdbl
    /HdblTdownsingle /HsingleTdowndbl /VdblLLsingle /VsingleLLdbl
    /VsingleULdbl /VdblULsingle /VdblXsingle /VsingleXdbl /VsingleLRsingle
    /VsingleULsingle /allblack /botblack /leftblack /rightblack /topblack
    /alpha /beta /Gamma /pi /Sigma /sigma /mu /tau /Phi /theta /Omega
    /delta /infinity /phi /element /intersection /equivalence /plusminus
    /greaterequal /lessequal /integraltp /integralbt /divide /approxequal
    /degree /bullet /dotmath /radical /eta /squared /block /blank
  ]
  def % /Encoding
  /_uC { 0 0 moveto /Courier findfont 1000 scalefont setfont show } def
  /_uS { 0 0 moveto /Symbol findfont 1000 scalefont setfont show } def
  /dotless_i { newpath 110 20 moveto 490 20 lineto 300 20 moveto 300 400 lineto 150 400 lineto 22 setlinewidth 1 setlinecap stroke } def
  /squash { 1 dict begin /cr exch def save 1 .75 scale cr _uC restore end } def
  /lt {lineto} def
  /mt {moveto} def
  /a {arc} def
  /an {arcn} def
  /cp {closepath} def
  /slw {setlinewidth} def
  /slc {setlinecap} def
  /CharacterDefs 255 dict def
  CharacterDefs begin
    /null { 0 598 mt 230 598 lt 184 460 lt 0 460 lt cp 92 0 mt 92 184 lt 230 184 lt 368 598 lt 598 598 lt 598 460 lt 377.2 460 lt 230 0 lt cp fill } def
    /Wsmiley { 300 300 275 0 360 a 370 230 mt 300 300 100 315 225 an 20 slw 1 slc stroke 230 370 25 0 360 a fill 370 370 25 0 360 a fill } def
    /Bsmiley { 300 300 275 0 360 a 352.5 247.5 mt 370 230 25 135 315 an 300 300 125 315 225 an 230 230 25 225 45 an 300 300 75 225 315 a 230 335 mt 230 370 50 270 -90 an 370 370 50 270 -90 an eofill } def
    /heart {(\251) _uS} def
    /diamond {(\250) _uS} def
    /club {(\247) _uS} def
    /spade {(\252) _uS} def
    /Bbullet { (\267) _uC } def
    /Wbullet { 0 -200 mt 600 -200 lt 600 800 lt 0 800 lt 0 -200 lt 300 300 100 225 585 a eofill } def
    /Bcircle { 300 300 100 225 585 a 20 slw stroke } def
    /Wcircle { 0 -200 mt 600 -200 lt 600 800 lt 0 800 lt 0 -200 lt 300 300 125 225 585 a 300 300 75 225 585 a eofill } def
    /male { newpath 300 200 200 70 -290 arcn 575 625 lineto 575 500 moveto 575 625 lineto 450 625 lineto 20 slw 1 setlinecap stroke } def
    /female { newpath 300 400 200 270 -90 arcn 300 0 lineto 150 100 moveto 450 100 lineto 20 slw 1 setlinecap stroke } def
    /quarternote { save 1 .5 scale 200 400 100 0 360 arc fill restore 290 200 moveto 290 658 lineto 430 840 230 235 270 arc 20 slw 0 setlinecap 290 610 lineto gsave fill grestore stroke } def
    /sixteenthnote { save 1 .5 scale 200 400 100 0 360 arc 330 200 moveto 340 200 100 0 360 arc fill restore
      290 200 moveto 290 658 lineto 430 840 230 235 270 arc 430 610 moveto 430 790 230 270 235 arcn 430 610 moveto 430 100 lineto 20 slw 1 setlinecap stroke } def
    /sun { newpath 300 300 150 270 -90 arcn 300 0 lineto 180 180 moveto 100 100 lineto 150 300 moveto 25 300 lineto 180 420 moveto 100 500 lineto 300 450 moveto 300 600 lineto 420 420 moveto 500 500 lineto 450 300 moveto 575 300 lineto 420 180 moveto 500 100 lineto 20 slw 1 setlinecap stroke } def
    /pointerright { 600 750 450 270 210 an 600 -150 450 150 90 an fill } def
    /pointerleft { 150 750 450 330 270 an 150 -150 450 90 30 an fill } def
    /Varrowboth { 300 700 mt 550 500 lt 350 500 lt 350 200 lt 550 200 lt 300 0 lt 50 200 lt 250 200 lt 250 500 lt 50 500 lt cp fill } def
    /exclamdbl { save -100 0 translate (!) _uC 200 0 translate (!) _uC restore } def
    /paragraph { (\266) _uC }
    def
    /section { (\247) _uC } def
    /cursorblock { 50 -100 mt 550 -100 lt 550 200 lt 50 200 lt cp fill } def
    /floor { 300 700 mt 550 500 lt 350 500 lt 350 200 lt 550 200 lt 300 0 lt 50 200 lt 250 200 lt 250 500 lt 50 500 lt cp fill 0 0 mt 600 0 lt 20 slw stroke } def
    /arrowup { 300 700 mt 550 500 lt 350 500 lt 350 0 lt 250 0 lt 250 500 lt 50 500 lt cp fill } def
    /arrowdown { 300 0 mt 550 200 lt 350 200 lt 350 700 lt 250 700 lt 250 200 lt 50 200 lt cp fill } def
    /arrowright { 50 300 mt 550 300 lt 300 400 lt 550 300 mt 300 200 lt 1 slc 25 slw stroke } def
    /arrowleft { 550 300 mt 50 300 lt 300 400 lt 50 300 mt 300 200 lt 1 slc 25 slw stroke } def
    /smallLLsingle { 100 400 mt 100 275 lt 500 275 lt 20 slw stroke } def
    /arrowboth { 550 300 mt 50 300 lt 200 400 lt 50 300 mt 200 200 lt 550 300 mt 400 400 lt 550 300 mt 400 200 lt 1 slc 20 slw stroke } def
    /pointerup { 50 50 mt 300 600 lt 550 50 lt cp fill } def
    /pointerdown { 0 550 mt 300 50 lt 550 550 lt cp fill } def
    /blank {} def
    /exclam { (!) _uC } def
    /quotedbl { (") _uC } def
    /numbersign { (#) _uC } def
    /dollar { ($) _uC } def
    /percent { (%) _uC } def
    /ampersand {(&) _uC} def
    /quotesingle {(') _uC} def
    /parenleft { (\050) _uC } def
    /parenright { (\051) _uC } def
    /asterisk { (*) _uC } def
    /plus { (+) _uC } def
    /comma { (,) _uC } def
    /hyphen { (-) _uC } def
    /period { (.) _uC } def
    /slash { (/) _uC } def
    /zero { (0) _uC } def
    /one { (1) _uC } def
    /two { (2) _uC } def
    /three { (3) _uC } def
    /four { (4) _uC } def
    /five { (5) _uC } def
    /six { (6) _uC } def
    /seven { (7) _uC } def
    /eight { (8) _uC } def
    /nine { (9) _uC } def
    /colon { (:) _uC } def
    /semicolon { (;) _uC } def
    /less { (<) _uC } def
    /equal { (=) _uC } def
    /greater { (>) _uC } def
    /question { (?) _uC } def
    /at { (@) _uC } def
    /A { (A) _uC } def
    /B { (B) _uC } def
    /C { (C) _uC } def
    /D { (D) _uC } def
    /E { (E) _uC } def
    /F { (F) _uC } def
    /G { (G) _uC } def
    /H { (H) _uC } def
    /I { (I) _uC } def
    /J { (J) _uC } def
    /K { (K) _uC } def
    /L { (L) _uC } def
    /M { (M) _uC } def
    /N { (N) _uC } def
    /O { (O) _uC } def
    /P { (P) _uC } def
    /Q { (Q) _uC } def
    /R { (R) _uC } def
    /S { (S) _uC } def
    /T { (T) _uC } def
    /U { (U) _uC } def
    /V { (V) _uC } def
    /W { (W) _uC } def
    /X { (X) _uC } def
    /Y { (Y) _uC } def
    /Z { (Z) _uC } def
    /bracketleft { ([) _uC } def
    /backslash { (\\) _uC } def
    /bracketright { (]) _uC } def
    /asciicircum { (^) _uC } def
    /underscore { 0 -200 mt 600 -200 lt 20 slw stroke } def
    /quoteleft { (`) _uC } def
    /a { (a) _uC } def
    /b { (b) _uC } def
    /c { (c) _uC } def
    /d { (d) _uC } def
    /e { (e) _uC } def
    /f { (f) _uC } def
    /g { (g) _uC } def
    /h { (h) _uC } def
    /i { (i) _uC } def
    /j { (j) _uC } def
    /k { (k) _uC } def
    /l { (l) _uC } def
    /m { (m) _uC } def
    /n { (n) _uC } def
    /o { (o) _uC } def
    /p { (p) _uC } def
    /q { (q) _uC } def
    /r { (r) _uC } def
    /s { (s) _uC } def
    /t { (t) _uC } def
    /u { (u) _uC } def
    /v { (v) _uC } def
    /w { (w) _uC } def
    /x { (x) _uC } def
    /y { (y) _uC } def
    /z { (z) _uC } def
    /braceleft { ({) _uC } def
    /brokenbar { (|) _uC } def
    /braceright { (}) _uC } def
    /asciitilde { (~) _uC } def
    /Delta { 50 0 mt 50 200 lt 300 500 lt 550 200 lt 550 0 lt cp 0 setlinejoin 20 slw stroke } def
    /Ccedilla { (C) _uC (\313) _uC } def
    /udieresis { (u) _uC (\310) _uC } def
    /eacute { (e) _uC (\302) _uC } def
    /acircumflex { (a) _uC (\303) _uC } def
    /adieresis { (a) _uC (\310) _uC } def
    /agrave { (a) _uC (\301) _uC } def
    /aring { (a) _uC (\312) _uC } def
    /ccedilla { (c) _uC (\313) _uC } def
    /ecircumflex { (e) _uC (\303) _uC } def
    /edieresis { (e) _uC (\310) _uC } def
    /egrave { (e) _uC (\301) _uC } def
    /idieresis { dotless_i (\310) _uC } def
    /icircumflex { dotless_i (\303) _uC } def
    /igrave { dotless_i (\301) _uC } def
    /Adieresis { (A) squash (\310) _uC } def
    /Aring { (A) squash (\312) _uC } def
    /Eacute { (E) squash (\302) _uC } def
    /ae { save .6 1 scale -75 0 translate (a) _uC 360 0 translate (e) _uC restore } def
    /AE { 120 540 moveto 480 540 lineto 480 420 lineto 300 540 moveto 300 20 lineto 250 20 moveto 500 20 lineto 500 160 lineto 250 540 moveto 80 20 lineto 30 20 moveto 180 20 lineto 170 280 moveto 400 280 lineto 400 240 moveto 400 320 lineto 20 slw 1 setlinecap stroke } def
    /ocircumflex { (o) _uC (\303) _uC } def
    /odieresis { (o) _uC (\310) _uC } def
    /ograve { (o) _uC (\301) _uC } def
    /ucircumflex { (u) _uC (\303) _uC } def
    /ugrave { (u) _uC (\301) _uC } def
    /ydieresis { (y) _uC (\310) _uC } def
    /Odieresis { (O) squash (\310) _uC } def
    /Udieresis { (U) squash (\310) _uC } def
    /cent { (\242) _uC } def
    /sterling { (\243) _uC } def
    /yen { (\245) _uC } def
    /point { save .6 1 scale (P) _uC .5 .5 scale 1000 0 translate (t) _uC restore } def
    /integral { save 1 .75 scale (\362) _uS restore } def
    /aacute { (a) _uC (\302) _uC } def
    /iacute { dotless_i (\302) _uC } def
    /oacute { (o) _uC (\302) _uC } def
    /uacute { (u) _uC (\302) _uC } def
    /ntilde { (n) _uC (\304) _uC } def
    /Ntilde { (N) squash (\304) _uC } def
    /aunder { save 175 200 translate .6 .6 scale (a) _uC 100 -200 mt 500 -200 lt 20 slw stroke restore } def
    /ounder { save 175 200 translate .6 .6 scale (o) _uC 100 -200 mt 500 -200 lt 20 slw stroke restore } def
    /questiondown { (\277) _uC } def
    /smallULsingle { 25 100 mt 25 300 lt 575 300 lt 20 slw stroke } def
    /smallURsingle { 25 300 mt 575 300 lt 575 100 lt 20 slw stroke } def
    /half { save .5 .5 scale 0 600 translate (1) _uC
      500 -600 translate (2) _uC restore 50 0 moveto 500 600 lineto 10 slw 1 setlinecap stroke } def
    /quarter { save .5 .5 scale 0 600 translate (1) _uC 500 -600 translate (4) _uC restore 50 0 moveto 500 600 lineto
      10 slw 1 setlinecap stroke } def
    /exclamdown { (\241) _uC } def
    /lessdbl { (\253) _uC } def
    /greaterdbl { (\273) _uC } def
    /lightbox { 2 dict begin 50 85 600 { /col exch def -150 71 800 { /row exch def col row 5 0 360 arc fill } for } for end } def
    /mediumbox { 2 dict begin 50 85 600 { /col exch def -150 71 800 { /row exch def col row 15 0 360 arc fill } for } for end } def
    /darkbox { 2 dict begin 50 85 600 { /col exch def -150 71 800 { /row exch def col row 25 0 360 arc fill } for } for end } def
    /Vsingle { 300 -205 mt 300 805 lt 20 slw stroke } def
    /VsingleTleftsingle { 300 -205 mt 300 805 lt 0 300 mt 300 300 lt 20 slw stroke } def
    /VsingleTleftdbl { 300 -205 mt 300 805 lt 0 400 mt 300 400 lt 0 200 mt 300 200 lt 20 slw stroke } def
    /VdblTleftsingle { 200 -205 mt 200 805 lt 400 -205 mt 400 805 lt 0 300 mt 200 300 lt 20 slw stroke } def
    /VdblURsingle { 0 300 mt 400 300 lt 400 -205 lt 200 300 mt 200 -205 lt 20 slw stroke } def
    /VsingleURdbl { 300 -205 mt 300 400 lt 0 400 lt 0 200 mt 300 200 lt 20 slw stroke } def
    /VdblTleftdbl { 400 -205 mt 400 805 lt 200 -205 mt 200 200 lt 0 200 lt 0 400 mt 200 400 lt 200 805 lt 20 slw stroke } def
    /Vdbl { 400 -205 mt 400 805 lt 200 -205 mt 200 805 lt 20 slw stroke } def
    /VdblURdbl { 400 -205 mt 400 400 lt 0 400 lt 0 200 mt 200 200 lt 200 -205 lt 20 slw stroke } def
    /VdblLRdbl { 200 805 mt 200 400 lt 0 400 lt 400 805 mt 400 200 lt 0 200 lt 20 slw stroke } def
    /VdblLRsingle { 200 805 mt 200 300 lt 400 805 mt 400 300 lt 0 300 lt 20 slw stroke } def
    /VsingleLRdbl { 300 805 mt 300 200 lt 0 200 lt 0 400 mt 300 400 lt 20 slw stroke } def
    /VsingleURsingle { 300 -205 mt 300 300 lt 0 300 lt 20 slw stroke } def
    /VsingleLLsingle { 300 805 mt 300 300 lt 600 300 lt 20 slw stroke } def
    /HsingleTupsingle { 0 300 mt 600 300 lt 300 300 mt 300 805 lt 20 slw stroke } def
    /HsingleTdownsingle { 0 300 mt 600 300 lt 300 300 mt 300 -205 lt 20 slw stroke } def
    /VsingleTrightsingle { 300 -205 mt 300 805 lt 300 300 mt 600 300 lt 20 slw stroke } def
    /Hsingle { 0 300 mt 600 300 lt 20 slw stroke } def
    /VsingleXsingle { 300 -205 mt 300 805 lt 0 300 mt 600 300 lt 20 slw stroke } def
    /VsingleTrightdbl { 300 -205 mt 300 805 lt 300 200 mt 600 200 lt 300 400 mt 600 400 lt 20 slw stroke } def
    /VdblTrightsingle { 400 -205 mt 400 805 lt 200 -205 mt 200 805 lt 400 300 mt 600 300 lt 20 slw stroke } def
    /VdblLLdbl { 400 805 mt 400 400 lt 600 400 lt 200 805 mt 200 200 lt 600 200 lt 20 slw stroke } def
    /VdblULdbl { 400 -205 mt 400 200 lt 600 200 lt 200 -205 mt 200 400 lt 600 400 lt 20 slw stroke } def
    /HdblTupdbl { 0 200 mt 600 200 lt 0 400 mt 200 400 lt 200 805 lt 400 805 mt 400 400 lt 600 400 lt 20 slw stroke } def
    /HdblTdowndbl { 0 400 mt 600 400 lt 0 200 mt 200 200 lt 200 -205 lt 400 -205 mt 400 200 lt 600 200 lt 20 slw stroke } def
    /VdblTrightdbl { 200 -205 mt 200 805 lt 400 -205 mt 400 200 lt 600 200 lt 600 400 mt
      400 400 lt 400 805 lt 20 slw stroke } def
    /Hdbl { 0 200 mt 600 200 lt 0 400 mt 600 400 lt 20 slw stroke } def
    /VdblXdbl { 400 -205 mt 400 200 lt 600 200 lt 600 400 mt 400 400 lt 400 805 lt 200 -205 mt 200 200 lt 0 200 lt
      0 400 mt 200 400 lt 200 805 lt 20 slw stroke } def
    /HdblTupsingle { 0 200 mt 600 200 lt 0 400 mt 600 400 lt 300 400 mt 300 805 lt 20 slw stroke } def
    /HsingleTupdbl { 0 300 mt 600 300 lt 200 300 mt 200 805 lt
      400 300 mt 400 805 lt 20 slw stroke } def
    /HdblTdownsingle { 0 200 mt 600 200 lt 0 400 mt 600 400 lt 300 200 mt 300 -205 lt 20 slw stroke } def
    /HsingleTdowndbl { 0 300 mt 600 300 lt 200 300 mt 200 -205 lt
      400 300 mt 400 -205 lt 20 slw stroke } def
    /VdblLLsingle { 200 805 mt 200 300 lt 600 300 lt 400 805 mt 400 300 lt 20 slw stroke } def
    /VsingleLLdbl { 300 805 mt 300 200 lt 600 200 lt 300 400 mt 600 400 lt 20 slw stroke } def
    /VsingleULdbl { 300 -205 mt 300 400 lt 600 400 lt 300 200 mt 600 200 lt 20 slw stroke } def
    /VdblULsingle { 200 -205 mt 200 300 lt 600 300 lt 400 -205 mt 400 300 lt 20 slw stroke } def
    /VdblXsingle { 400 -205 mt 400 805 lt 200 -205 mt 200 805 lt 0 300 mt 600 300 lt 20 slw stroke } def
    /VsingleXdbl { 300 -205 mt 300 805 lt 0 200 mt 600 200 lt 0 400 mt 600 400 lt 20 slw stroke } def
    /VsingleLRsingle { 0 300 mt 300 300 lt 300 805 lt 20 slw stroke } def
    /VsingleULsingle { 300 -205 mt 300 300 lt 600 300 lt 20 slw stroke } def
    /allblack { 0 -205 mt 600 -205 lt 600 805 lt 0 805 lt cp fill } def
    /botblack { 0 -205 mt 600 -205 lt 600 300 lt 0 300 lt cp fill } def
    /leftblack { 0 -205 mt 300 -205 lt 300 805 lt 0 805 lt cp fill } def
    /rightblack { 300 -205 mt 600 -205 lt 600 805 lt 300 805 lt cp fill } def
    /topblack { 0 300 mt 600 300 lt 600 805 lt 0 805 lt cp fill } def
    /alpha { save .8 .8 scale (\141) _uS restore } def
    /beta { save .9 1 scale  (\373) _uC restore } def
    /Gamma { save .8 .8 scale (\107) _uS restore } def
    /pi { save .8 .8 scale (\160) _uS restore } def
    /Sigma { save .8 .8 scale (\123) _uS restore } def
    /sigma { save .8 .8 scale (\163) _uS restore } def
    /mu { save .8 .8 scale (\155) _uS restore } def
    /tau { save .8 .8 scale (\164) _uS restore } def
    /Phi { save .75 1 scale (\106) _uS restore } def
    /theta { save .8 .8 scale (\161) _uS restore } def
    /Omega { save .6 .9 scale (\127) _uS restore } def
    /delta { save .8 .8 scale (\144) _uS restore } def
    /infinity { save .75 1 scale (\245) _uS restore } def
    /phi { save .8 .7 scale (\146) _uS restore } def
    /element { save .8 .8 scale (\316) _uS restore } def
    /intersection { save .5 .8 scale (\307) _uS restore } def
    /equivalence {(\272) _uS} def
    /plusminus {(\261) _uS} def
    /greaterequal {(\263) _uS} def
    /lessequal {(\243) _uS} def
    /integraltp { save .75 .75 scale (\363) _uS restore } def
    /integralbt { save .75 .75 scale (\365) _uS restore } def
    /divide {(\270) _uS} def
    /approxequal {(\273) _uS} def
    /degree {(\260) _uS} def
    /bullet {(\267) _uS} def
    /dotmath {(\327) _uS} def
    /radical { 100 300 mt 150 350 lt 350 0 lt 550 600 lt 25 slw stroke } def
    /eta { save .8 .8 scale (\150) _uS restore } def
    /squared { save 100 350 translate
      .45 .45 scale (2) _uC restore } def
    /block { 50 0 mt 50 400 lt 550 400 lt 550 0 lt fill } def
    /blank {} def
  end 

  /BuildChar { 
    600 0 
    0 -200 600 800
    setcachedevice
    exch begin
      Encoding exch get
      CharacterDefs exch get
      exec 
    end
  } def

  /UniqueID 847667 def
end 
/PCFont exch definefont pop
