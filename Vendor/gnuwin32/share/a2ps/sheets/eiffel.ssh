# Style sheet for eiffel
# Copyright (c) 1988-1993 Miguel Santana
# Copyright (c) 1995-1999 Akim Demaille, Miguel Santana
# $Id: eiffel.ssh,v 1.1.1.1.2.1 2007/12/29 01:58:29 mhatta Exp $
#

#
# This file is part of a2ps.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3, or (at your option)
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; see the file COPYING.  If not, write to
# the Free Software Foundation, 59 Temple Place - Suite 330,
# Boston, MA 02111-1307, USA.
#

## 1.1 Akim Demaille
# Added doc.

style Eiffel is
written by "Akim Demaille <akim@freefriends.org>"
version is 1.1
requires a2ps version 4.9.5

documentation is
   "Eiffel is an object oriented language that also includes a"
   "comprehensive approach to software construction: a method."
   ""
   "The language itself is not just a programming language but also covers"
   "analysis, design and implementation."
   ""
   "Heavy highlight uses symbols to represent common math operators."
end documentation

first alphabet is
   "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz_"
second alphabet is
   "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz_"

keywords in Keyword_strong are
   all, alias, as, and, check, class, current, debug, deferred, do,
   else, elseif, "end", ensure, expanded, export, external, false,
   feature, from, if, implies, indexing, infix, inherit, inspect,
   invariant, "is", language, like, local, loop, none, not, creation,
   obsolete, old, once, or, prefix, redefine, require, rename, rescue,
   result, retry, select, separate, strip, then, true, undefine,
   unique, until, variant, void, when, xor
end keywords

keywords in Keyword are
   bit, boolean, character, double, integer, pointer, real, string
end keywords

optional keywords are
   "or else" "or else" Keyword_strong,
   "and then" "and then" Keyword_strong,
   not \not,
   or \vee,
   and \wedge,
   implies \Rightarrow
end keywords

optional operators are
   :=,
   = \equiv,
   "/=" \neq,
   <= \leq,
   >= \geq
end operators

sequences are
    -- Comment,
    "\"" Plain String "\"" Plain
       exceptions are
          %%, "%\"", "%\'"
       end exceptions,
    "\'" Plain String "\'" Plain
       exceptions are
          %%, "%\"", "%\'"
       end exceptions
end sequences
end style
