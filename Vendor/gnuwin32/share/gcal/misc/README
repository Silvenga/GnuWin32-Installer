README file for miscellaneous targets.

Please keep in mind that in case one or more of the scripts, which are
located in the appropriate subdirectories of this file directory, do
not work as expected, this can be possibly caused by reason you have
preset some Gcal options in the `GCAL' environment variable, which have
changed the default behavior of the script.  If so, try running the
script again by using an "empty" `GCAL' environment variable like this:

     for Bourne Shell:  GCAL= ./SCRIPTNAME
     
     or:                env GCAL= ./SCRIPTNAME

If this does not help, check whether you have set a reference to the
actual directory in the `GCALPATH' environment variable.  If not, try
running the script again by using a proper value for Gcal's search path
for files, like:

     for Bourne Shell:  GCALPATH=. ./SCRIPTNAME
     
     or:                env GCALPATH=. ./SCRIPTNAME




Here comes the short description of the miscellaneous files, inspect
them for more information:

   * Subdirectory `daily':
     The simple `daily' AWK and Perl scripts show how basic time
     management of fixed dates can be done by means of `gcal'.  It's a
     poor man's solution!  Any but default configuration might confuse
     these scripts.  They come along with a UN*X shell script `daily'
     and a MS-DOS batch file `daily.bat' which supports the correct
     usage.  Some examples of such time based fixed dates can be found
     in the `daily.rc' file.  Please inspect all above mentioned files
     for further information.

   * Subdirectory `ddiff':
     The simple `ddiffdrv' AWK and Perl scripts can be used to create a
     Gcal location pool resource file by processing the ZONE file
     `zone.tab'.  Any but default configuration might confuse these
     scripts.  They come along with a UN*X shell script `ddiffdrv' and
     a MS-DOS batch file `ddiffdrv.bat' which supports the correct
     usage.  These script respectively batch files create single Gcal
     location response files of any location found in the Gcal location
     pool resource file.  Then, these script respectively batch files
     automatically create all Gcal location resource files which
     contain the day/night lengths and differences for all days of the
     year for any location found --by means of the `ddiff' UN*X shell
     script respectively the MS-DOS batch file `ddiff.bat'--; and at
     last a Gcal include file `ddiff.rc' that contains include
     statements of all Gcal location resource files created, but only,
     if the `-create' option is given.  Please inspect all above
     mentioned files for further information.  *Caution*: It can take
     some time to create all Gcal location response respectively
     resource files if you run the UN*X shell script `ddiffdrv'
     respectively the MS-DOS batch file `ddiffdrv.bat'.  So maybe you
     want to remove some entries in the ZONE file `zone.tab' first?

     The simple `ddiff1' and `ddiff2' AWK and Perl scripts can be used
     to create Gcal location resource files which contain the day/night
     lengths and differences for all days of the year for any location
     around the world.  Any but default configuration might confuse
     these scripts.  They come along with a UN*X shell script `ddiff'
     and a MS-DOS batch file `ddiff.bat' together with the necessary
     Gcal response file `ddiff.@' which supports the correct usage.

   * Subdirectory `dst':
     The simple `dst' AWK and Perl scripts process ZONEINFO files and
     convert any dates to the Gcal fixed date format, at which Daylight
     Saving Times take place.  Any but default configuration might
     confuse these scripts.  They come along with a UN*X shell script
     `dst' which supports the correct usage.  Please inspect all above
     mentioned files for further information.

   * Subdirectory `gcalltx':
     The simple SED script `gcalltx.sed' converts `gcal -n -u %0001
     year' output to LaTeX tabular output for `gcal'.  Any but default
     configuration might confuse this script.  It comes along with a
     UN*X script `gcalltx' and a MS-DOS batch `gcalltx.bat' which
     supports the correct usage.  The program has been tested with the
     German, English and French catalogs of `gcal' under IBM/AIX,
     SUN/Solaris and MS-DOS.  It should accept all country codes `gcal'
     uses.  The Perl script `gcalltx.pl' superseeds previous versions.
     Please inspect all above mentioned files for further information.

   * Subdirectory `moon':
     The UN*X shell script `moon' displays the dates at which the next
     Full Moon and New Moon phases take place, plus some additionally
     information about today's date.  The MS-DOS batch file `moon.bat'
     along with the simple `moon1.awk' and `moon2.awk' AWK scripts
     displays the dates at which the next Full Moon and New Moon phases
     take place, plus some additionally information about today's date.
     Any but default configuration might confuse these scripts.
     Please inspect all above mentioned files for further information.

   * Subdirectory `mrms':
     The simple `mrms' AWK and Perl scripts show how to display the
     times at which moonrise/moonset have happened in the past
     respectively will happen in the future --based on the actual local
     time for several geographic locations around the world-- by means
     of `gcal'.  It's a poor man's solution!  Any but default
     configuration might confuse these scripts.  They come along with a
     UN*X shell script `mrms' and a MS-DOS batch file `mrms.bat' which
     supports the correct usage.  Some examples of fixed dates which
     represent different geographic locations around the world can be
     found in the `mrms.rc' file.  Keep in mind that all rise/set times
     computed are approximate times only, because the location's
     altitude is not set in `mrms.rc' and therefore taken as zero.
     Please inspect all above mentioned files for further information.

   * Subdirectory `srss':
     The simple `srss' AWK and Perl scripts show how to display the
     times at which sunrise/sunset have happened in the past
     respectively will happen in the future --based on the actual local
     time for several geographic locations around the world-- by means
     of `gcal'.  It's a poor man's solution!  Any but default
     configuration might confuse these scripts.  They come along with a
     UN*X shell script `srss' and a MS-DOS batch file `srss.bat' which
     supports the correct usage.  Some examples of fixed dates which
     represent different geographic locations around the world can be
     found in the `srss.rc' file.  Keep in mind that all rise/set times
     computed are approximate times only, because the location's
     altitude is not set in `srss.rc' and therefore taken as zero.
     Please inspect all above mentioned files for further information.

   * Subdirectory `wloc':
     The simple `wlocdrv1' AWK and Perl scripts process the ZONE file
     `zone.tab' and generate the UN*X shell script `wloc' respectively
     the MS-DOS batch file `wloc.bat', which is necessary to create all
     location files that contain air line distances and course angles
     between several geographic locations around the world.  The simple
     `wlocdrv2' AWK and Perl scripts process the ZONE file `zone.tab'
     and generate the Gcal resource file `wlocdrv.rc', which is
     necessary to create all location files that contain air line
     distances and course angles between several geographic locations
     around the world.  Any but default configuration might confuse
     these scripts.  They come along with a UN*X shell script `wlocdrv'
     and a MS-DOS batch file `wlocdrv.bat' which supports the correct
     usage.  Please inspect all above mentioned files for further
     information.  *Caution*: It can take some time to create all
     location files if you run the generated UN*X shell script `wloc'
     respectively the MS-DOS batch file `wloc.bat'.  So maybe you want
     to remove some entries in the ZONE file `zone.tab' first?

   * The `wdays.*' files of previous Gcal versions --which converted
     Gcal output in the way that only all working days of the complete
     week, except holidays, and the succeeding Monday are displayed for
     the Anglo-American version of Gcal-- are no longer shipped
     anymore, because using Gcal like:

          gcal %monday --filter-day=Vr -Cdl7+ ...

     results the same and is independent of the language and the kind of
     highlighting used.

   * This file directory contains a file `gcalmagic.add'.  It is
     intended to be added to your `/etc/magic' file.  After adding this
     the `file' command will recognize `gcal' shell script files,
     response and resource files.

   * This file directory contains a file `magic.add'.  It is intended
     to be added to your `/etc/magic' file.  After adding this the
     `file' command will recognize GNU message catalog files (`.mo'
     files).

   * The locale name alias scheme implemented here is in a similar form
     implemented in the X Windows Systems.  Especially the alias data
     base file can be shared.  Normally this file is found at something
     like `/usr/lib/X11/locale/locale.alias'.

