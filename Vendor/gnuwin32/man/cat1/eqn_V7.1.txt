EQN(1)                                                   EQN(1)




NAME
       eqn, neqn, checkeq  -  typeset mathematics

SYNOPSIS
       eqn [ -dxy ] [ -pn ] [ -sn ] [ -fn ] [ file ] ...
       checkeq [ file ] ...

DESCRIPTION
       Eqn is a troff(1) preprocessor for typesetting mathemat-
       ics on a Graphic Systems phototypesetter, neqn on termi-
       nals.  Usage is almost always

            eqn file ... | troff
            neqn file ... | nroff

       If no files are specified, these programs reads from the
       standard input.  A line beginning with `.EQ'  marks  the
       start  of  an equation; the end of an equation is marked
       by a line beginning with `.EN'.  Neither of these  lines
       is  altered, so they may be defined in macro packages to
       get centering, numbering, etc.  It is also  possible  to
       set  two  characters  as  `delimiters';  subsequent text
       between delimiters is also treated as eqn input.  Delim-
       iters may be set to characters x and y with the command-
       line argument -dxy or (more commonly)  with  `delim  xy'
       between  .EQ and .EN.  The left and right delimiters may
       be identical.  Delimiters are turned off by `delim off'.
       All  text that is neither between delimiters nor between
       .EQ and .EN is passed through untouched.

       The program checkeq reports missing or unbalanced delim-
       iters and .EQ/.EN pairs.

       Tokens  within  eqn  are separated by spaces, tabs, new-
       lines, braces, double quotes,  tildes  or  circumflexes.
       Braces  {}  are  used  for grouping; generally speaking,
       anywhere a single character like x could appear, a  com-
       plicated  construction  enclosed  in  braces may be used
       instead.  Tilde ~ represents a full space in the output,
       circumflex ^ half as much.

       Subscripts  and  superscripts are produced with the key-
       words sub and sup.  Thus x sub i makes xi, a sub i sup 2
       produces ai, and e sup {x sup 2 + y sup 2} gives ex2+y2.

       Fractions are made with over: a over b yields _.

       sqrt makes square roots: 1 over sqrt {ax  sup  2  +bx+c}
       results in _________ .

       The  keywords from and to introduce lower and upper lim-
       its on arbitrary things: lim0xi is made  with  lim  from
       {n-> inf } sum from 0 to n x sub i.

       Left  and  right  brackets,  braces,  etc., of the right
       height are made with left and right: left [ x sup 2 +  y
       sup  2  over alpha right ] ~=~1 produces [x2+__]=1.  The
       right clause is optional.  Legal characters  after  left
       and  right are braces, brackets, bars, c and f for ceil-
       ing and floor, and "" for nothing at all (useful  for  a
       right-side-only bracket).

       Vertical  piles  of  things  are  made with pile, lpila,



















       cpile, and rpile: pile {a above b above c}  produces  b.



















                                                             c
       There  can be an arbitrary number of elements in a pile.
       lpile left-justifies, pile and cpile center,  with  dif-
       ferent vertical spacing, and rpile right justifies.

       Matrices  are  made with matrix: matrix { lcolxi 1 sub i









       above y sub 2 } ccol { 1 above 2 } } produces     .   In









                                                     y2 2
       addition, there is rcol for a right-justified column.

       Diacritical marks are made with dot, dotdot, hat, tilde,
       bar, vec, dyad, and under: x dot = f(t) bar is x=f(t), y
       dotdot  bar  ~=~ n under is y=n, and x vec ~=~ y dyad is
       x>=<y>.

       Sizes and font can be changed with size n or  size  +-n,
       roman,  italic, bold, and font n.  Size and fonts can be
       changed globally in a document by gsize n and  gfont  n,
       or by the command-line arguments -sn and -fn.

       Normally  subscripts  and  superscripts are reduced by 3
       point sizes from the previous size; this may be  changed
       by the command-line argument -pn.

       Successive  display  arguments  can  be lined up.  Place
       mark before the desired lineup point in the first  equa-
       tion;  place lineup at the place that is to line up ver-
       tically in subsequent equations.

       Shorthands may be defined or existing keywords redefined
       with  define: define thing % replacement % defines a new
       token called thing which will be replaced by replacement
       whenever  it appears thereafter.  The % may be any char-
       acter that does not occur in replacement.

       Keywords like sum () int () inf () and  shorthands  like
       >= (>=) -> (->), and != (!=) are recognized.  Greek let-
       ters are spelled out in the desired case, as in alpha or
       GAMMA.   Mathematical  words like sin, cos, log are made
       Roman automatically.   Troff(1)  four-character  escapes
       like  \(bs () can be used anywhere.  Strings enclosed in
       double quotes "..."  are passed through untouched;  this
       permits  keywords to be entered as text, and can be used
       to communicate with troff when all else fails.

SEE ALSO
       troff(1), tbl(1), ms(7), eqnchar(7)
       B. W. Kernighan and L. L. Cherry, Typesetting  Mathemat-
       ics--User's Guide
       J. F. Ossanna, NROFF/TROFF User's Manual

BUGS
       To  embolden  digits,  parens,  etc., it is necessary to
       quote them, as in `bold "12.3"'.



                            2/22/74                      EQN(1)
