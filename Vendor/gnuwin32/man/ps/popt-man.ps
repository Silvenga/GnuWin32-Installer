%!PS-Adobe-3.0
%%Creator: groff version 1.19
%%CreationDate: Sat Oct 04 13:32:20 2003
%%DocumentNeededResources: font Times-Roman
%%+ font Times-Bold
%%+ font Times-Italic
%%+ font Courier
%%DocumentSuppliedResources: procset grops 1.19 0
%%Pages: 10
%%PageOrder: Ascend
%%DocumentMedia: Default 595 842 0 () ()
%%Orientation: Portrait
%%EndComments
%%BeginDefaults
%%PageMedia: Default
%%EndDefaults
%%BeginProlog
%%BeginResource: procset grops 1.19 0
%!PS-Adobe-3.0 Resource-ProcSet
/setpacking where{
pop
currentpacking
true setpacking
}if
/grops 120 dict dup begin
/SC 32 def
/A/show load def
/B{0 SC 3 -1 roll widthshow}bind def
/C{0 exch ashow}bind def
/D{0 exch 0 SC 5 2 roll awidthshow}bind def
/E{0 rmoveto show}bind def
/F{0 rmoveto 0 SC 3 -1 roll widthshow}bind def
/G{0 rmoveto 0 exch ashow}bind def
/H{0 rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/I{0 exch rmoveto show}bind def
/J{0 exch rmoveto 0 SC 3 -1 roll widthshow}bind def
/K{0 exch rmoveto 0 exch ashow}bind def
/L{0 exch rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/M{rmoveto show}bind def
/N{rmoveto 0 SC 3 -1 roll widthshow}bind def
/O{rmoveto 0 exch ashow}bind def
/P{rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/Q{moveto show}bind def
/R{moveto 0 SC 3 -1 roll widthshow}bind def
/S{moveto 0 exch ashow}bind def
/T{moveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/SF{
findfont exch
[exch dup 0 exch 0 exch neg 0 0]makefont
dup setfont
[exch/setfont cvx]cvx bind def
}bind def
/MF{
findfont
[5 2 roll
0 3 1 roll
neg 0 0]makefont
dup setfont
[exch/setfont cvx]cvx bind def
}bind def
/level0 0 def
/RES 0 def
/PL 0 def
/LS 0 def
/MANUAL{
statusdict begin/manualfeed true store end
}bind def
/PLG{
gsave newpath clippath pathbbox grestore
exch pop add exch pop
}bind def
/BP{
/level0 save def
1 setlinecap
1 setlinejoin
72 RES div dup scale
LS{
90 rotate
}{
0 PL translate
}ifelse
1 -1 scale
}bind def
/EP{
level0 restore
showpage
}bind def
/DA{
newpath arcn stroke
}bind def
/SN{
transform
.25 sub exch .25 sub exch
round .25 add exch round .25 add exch
itransform
}bind def
/DL{
SN
moveto
SN
lineto stroke
}bind def
/DC{
newpath 0 360 arc closepath
}bind def
/TM matrix def
/DE{
TM currentmatrix pop
translate scale newpath 0 0 .5 0 360 arc closepath
TM setmatrix
}bind def
/RC/rcurveto load def
/RL/rlineto load def
/ST/stroke load def
/MT/moveto load def
/CL/closepath load def
/Fr{
setrgbcolor fill
}bind def
/setcmykcolor where{
pop
/Fk{
setcmykcolor fill
}bind def
}if
/Fg{
setgray fill
}bind def
/FL/fill load def
/LW/setlinewidth load def
/Cr/setrgbcolor load def
/setcmykcolor where{
pop
/Ck/setcmykcolor load def
}if
/Cg/setgray load def
/RE{
findfont
dup maxlength 1 index/FontName known not{1 add}if dict begin
{
1 index/FID ne{def}{pop pop}ifelse
}forall
/Encoding exch def
dup/FontName exch def
currentdict end definefont pop
}bind def
/DEFS 0 def
/EBEGIN{
moveto
DEFS begin
}bind def
/EEND/end load def
/CNT 0 def
/level1 0 def
/PBEGIN{
/level1 save def
translate
div 3 1 roll div exch scale
neg exch neg exch translate
0 setgray
0 setlinecap
1 setlinewidth
0 setlinejoin
10 setmiterlimit
[]0 setdash
/setstrokeadjust where{
pop
false setstrokeadjust
}if
/setoverprint where{
pop
false setoverprint
}if
newpath
/CNT countdictstack def
userdict begin
/showpage{}def
/setpagedevice{}def
}bind def
/PEND{
clear
countdictstack CNT sub{end}repeat
level1 restore
}bind def
end def
/setpacking where{
pop
setpacking
}if
%%EndResource
%%EndProlog
%%BeginSetup
%%BeginFeature: *PageSize Default
<< /PageSize [ 595 842 ] /ImagingBBox null >> setpagedevice
%%EndFeature
%%IncludeResource: font Times-Roman
%%IncludeResource: font Times-Bold
%%IncludeResource: font Times-Italic
%%IncludeResource: font Courier
grops begin/DEFS 52 dict def DEFS begin/u{.001 mul}bind def end/RES 72
def/PL 841.89 def/LS false def/ENC0[/asciicircum/asciitilde/Scaron
/Zcaron/scaron/zcaron/Ydieresis/trademark/quotesingle/Euro/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/space/exclam/quotedbl/numbersign/dollar/percent
/ampersand/quoteright/parenleft/parenright/asterisk/plus/comma/hyphen
/period/slash/zero/one/two/three/four/five/six/seven/eight/nine/colon
/semicolon/less/equal/greater/question/at/A/B/C/D/E/F/G/H/I/J/K/L/M/N/O
/P/Q/R/S/T/U/V/W/X/Y/Z/bracketleft/backslash/bracketright/circumflex
/underscore/quoteleft/a/b/c/d/e/f/g/h/i/j/k/l/m/n/o/p/q/r/s/t/u/v/w/x/y
/z/braceleft/bar/braceright/tilde/.notdef/quotesinglbase/guillemotleft
/guillemotright/bullet/florin/fraction/perthousand/dagger/daggerdbl
/endash/emdash/ff/fi/fl/ffi/ffl/dotlessi/dotlessj/grave/hungarumlaut
/dotaccent/breve/caron/ring/ogonek/quotedblleft/quotedblright/oe/lslash
/quotedblbase/OE/Lslash/.notdef/exclamdown/cent/sterling/currency/yen
/brokenbar/section/dieresis/copyright/ordfeminine/guilsinglleft
/logicalnot/minus/registered/macron/degree/plusminus/twosuperior
/threesuperior/acute/mu/paragraph/periodcentered/cedilla/onesuperior
/ordmasculine/guilsinglright/onequarter/onehalf/threequarters
/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE
/Ccedilla/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex
/Idieresis/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis
/multiply/Oslash/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn
/germandbls/agrave/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla
/egrave/eacute/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis
/eth/ntilde/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash
/ugrave/uacute/ucircumflex/udieresis/yacute/thorn/ydieresis]def
/Courier@0 ENC0/Courier RE/Times-Italic@0 ENC0/Times-Italic RE
/Times-Bold@0 ENC0/Times-Bold RE/Times-Roman@0 ENC0/Times-Roman RE
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 128.978(POPT\(3\) Linux)72 48 R(Programmer')2.5
E 2.5(sM)-.55 G 128.977(anual POPT\(3\))-2.5 F 72 84 EBEGIN
[/Creator (Groff 1.19.0 with Pdfref macros) /DOCINFO pdfmark
EEND 72 84 EBEGIN
[/CreationDate (D:20031004133219-02'00') /DOCINFO pdfmark
EEND 72 84 EBEGIN
[/ModDate (D:20031004133219-02'00') /DOCINFO pdfmark
EEND 72 84 EBEGIN
[/PageMode /UseOutlines /View [/XYZ 0 PL 0] /DOCVIEW pdfmark
EEND 72 84 EBEGIN
[/Count 0 /Dest /section.POPT.3.1 /Title (POPT (3)) /OUT pdfmark
EEND 72 84 EBEGIN
[/Dest /section.POPT.3.1 /View [/XYZ -5 PL null] /DEST pdfmark
EEND/F0 10.95/Times-Bold@0 SF -.219(NA)72 100.8 S(ME).219 E/F1 10
/Times-Roman@0 SF(popt \255 P)108 112.8 Q(arse command line options)-.15
E F0(SYNOPSIS)72 129.6 Q/F2 10/Times-Bold@0 SF(#include <popt.h>)108
141.6 Q(poptContext poptGetContext\(const char *)108 165.6 Q/F3 10
/Times-Italic@0 SF(name)2.86 E F2 2.5(,i).18 G(nt)-2.5 E F3(ar)2.83 E
(gc)-.37 E F2(,).31 E(const char **)175.5 177.6 Q F3(ar)2.83 E(gv)-.37 E
F2(,).32 E(const struct poptOption *)175.5 189.6 Q F3(options)2.73 E F2
(,).27 E(int)175.5 201.6 Q F3<8d61>4.41 E(gs)-.1 E F2(\);).27 E -.1(vo)
108 225.6 S(id poptFr).1 E(eeContext\(poptContext)-.18 E F3(con)2.7 E F2
(\);).24 E -.1(vo)108 249.6 S(id poptResetContext\(poptContext).1 E F3
(con)2.7 E F2(\);).24 E(int poptGetNextOpt\(poptContext)108 273.6 Q F3
(con)2.7 E F2(\);).24 E(const char * poptGetOptAr)108 297.6 Q
(g\(poptContext)-.1 E F3(con)2.7 E F2(\);).24 E(const char * poptGetAr)
108 321.6 Q(g\(poptContext)-.1 E F3(con)2.7 E F2(\);).24 E
(const char * poptP)108 345.6 Q(eekAr)-.2 E(g\(poptContext)-.1 E F3(con)
2.7 E F2(\);).24 E(const char ** poptGetAr)108 369.6 Q(gs\(poptContext)
-.1 E F3(con)2.7 E F2(\);).24 E(const char *const poptStr)108 393.6 Q
(err)-.18 E(or\(const int)-.18 E F3(err)2.69 E(or)-.45 E F2(\);).73 E
(const char * poptBadOption\(poptContext)108 417.6 Q F3(con)2.7 E F2 2.5
(,i).24 G(nt)-2.5 E F3<8d61>4.41 E(gs)-.1 E F2(\);).27 E
(int poptReadDefaultCon\214g\(poptContext)108 441.6 Q F3(con)2.7 E F2
2.5(,i).24 G(nt)-2.5 E F3<8d61>4.41 E(gs)-.1 E F2(\);).27 E
(int poptReadCon\214gFile\(poptContext)108 465.6 Q F3(con)2.7 E F2 2.5
(,c).24 G(har *)-2.5 E F3(fn)4.47 E F2(\);).24 E
(int poptAddAlias\(poptContext)108 489.6 Q F3(con)2.7 E F2 2.5(,s).24 G
(truct poptAlias)-2.5 E F3(alias)2.83 E F2(,).27 E(int)150.5 501.6 Q F3
<8d61>4.41 E(gs)-.1 E F2(\);).27 E(int poptP)108 525.6 Q(arseAr)-.1 E
(gvString\(char *)-.1 E F3(s)2.84 E F2 2.5(,i).27 G(nt *)-2.5 E F3(ar)
5.33 E(gcPtr)-.37 E F2(,).73 E(const char ***)168 537.6 Q F3(ar)2.83 E
(gvPtr)-.37 E F2(\);).73 E(int poptDupAr)108 561.6 Q(gv\(int)-.1 E F3
(ar)2.83 E(gc)-.37 E F2 2.5(,c).31 G(onst char **)-2.5 E F3(ar)2.83 E
(gv)-.37 E F2 2.5(,i).32 G(nt *)-2.5 E F3(ar)2.83 E(gcPtr)-.37 E F2(,)
.73 E(const char ***)168 573.6 Q F3(ar)2.83 E(gvPtr)-.37 E F2(\);).73 E
(int poptStuffAr)108 597.6 Q(gs\(poptContext)-.1 E F3(con)2.7 E F2 2.5
(,c).24 G(onst char **)-2.5 E F3(ar)2.83 E(gv)-.37 E F2(\);).32 E F0
(DESCRIPTION)72 626.4 Q F1 .196(The popt library e)108 638.4 R .196(xis\
ts essentially for parsing command-line options. It is found superior i\
n man)-.15 F 2.695(yw)-.15 G(ays)-2.795 E 3.165
(when compared to parsing the ar)108 650.4 R 3.165
(gv array by hand or using the getopt functions)-.18 F F2(getopt\(\))
5.665 E F1(and)5.665 E F2(getopt_long\(\))108 662.4 Q F1([see)3.712 E F2
(getopt)3.711 E F1 3.711(\(3\)]. Some)B 1.211(speci\214c adv)3.711 F
1.211(antages of popt are: it does not utilize global v)-.25 F(ari-)-.25
E .725(ables, thus enabling multiple passes in parsing)108 674.4 R F3
(ar)3.555 E(gv)-.37 E F1 3.226(;i)3.226 G 3.226(tc)-3.226 G .726
(an parse an arbitrary array of)-3.226 F F3(ar)3.556 E(gv)-.37 E F1 .726
(-style ele-).32 F 1.307(ments, allo)108 686.4 R 1.307
(wing parsing of command-line-strings from an)-.25 F 3.807(ys)-.15 G
1.306(ource; it pro)-3.807 F 1.306(vides a standard method of)-.15 F
.495(option aliasing \(to be discussed at length belo)108 698.4 R -.65
(w.)-.25 G .496(\); it can e).65 F -.15(xe)-.15 G 2.996(ce).15 G .496
(xternal option \214lters; and, \214nally)-3.146 F 2.996(,i)-.65 G 2.996
(tc)-2.996 G(an)-2.996 E
(automatically generate help and usage messages for the application.)108
710.4 Q(Lik)108 734.4 Q(e)-.1 E F2(getopt_long\(\))3.156 E F1 3.156(,t)C
.656(he popt library supports short and long style options.)-3.156 F
.655(Recall that a)5.655 F F2 .655(short option)3.155 F F1 .124
(consists of a - character follo)108 746.4 R .124
(wed by a single alphanumeric character)-.25 F 5.124(.A)-.55 G F2 .124
(long option)-2.5 F F1 2.624(,c)C .124(ommon in GNU)-2.624 F 1.244
(utilities, consists of tw)108 758.4 R 3.744(o-c)-.1 G 1.244
(haracters follo)-3.744 F 1.243
(wed by a string made up of letters, numbers and h)-.25 F(yphens.)-.05 E
2.786(Long options are optionally allo)108 770.4 R 2.786(wed to be)-.25
F 2.786(gin with a single -, primarily to allo)-.15 F 5.287(wc)-.25 G
(ommand-line)-5.287 E(June 30, 1998)269.723 817.889 Q(1)192.722 E 0 Cg
EP
%%Page: 2 2
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 128.978(POPT\(3\) Linux)72 48 R(Programmer')2.5
E 2.5(sM)-.55 G 128.977(anual POPT\(3\))-2.5 F .696
(compatibility between popt applications and X toolkit applications.)108
84 R .696(Either type of option may be fol-)5.696 F(lo)108 96 Q .149
(wed by an ar)-.25 F 2.649(gument. A)-.18 F .149
(space separates a short option from its ar)2.649 F .15
(guments; either a space or an = sep-)-.18 F
(arates a long option from an ar)108 108 Q(gument.)-.18 E .352
(The popt library is highly portable and should w)108 132 R .352
(ork on an)-.1 F 2.852(yP)-.15 G .352(OSIX platform.)-2.852 F .352
(The latest v)5.352 F .352(ersion is dis-)-.15 F(trib)108 144 Q
(uted with rpm and is al)-.2 E -.1(wa)-.1 G(ys a).1 E -.25(va)-.2 G
(ilable from: ftp://ftp.rpm.or).25 E(g/pub/rpm/dist.)-.18 E .129
(It may be redistrib)108 168 R .129(uted under the X consortium license\
, see the \214le COPYING in the popt source distri-)-.2 F -.2(bu)108 180
S(tion for details.).2 E/F1 10.95/Times-Bold@0 SF -.329(BA)72 196.8 S
(SIC POPT USA).329 E(GE)-.602 E/F2 10/Times-Bold@0 SF(1. THE OPTION T)87
208.8 Q(ABLE)-.9 E F0 .495(Applications pro)108 220.8 R .495(vide popt \
with information on their command-line options by means of an "option t\
a-)-.15 F(ble," i.e., an array of)108 232.8 Q F2(struct poptOption)2.5 E
F0(structures:)2.5 E(#include <popt.h>)108 256.8 Q(struct poptOption {)
108 280.8 Q(const char * longName; /* may be NULL */)118 292.8 Q
(char shortName;)118 304.8 Q(/* may be '\\0' */)20 E(int ar)118 316.8 Q
(gInfo;)-.18 E -.2(vo)118 328.8 S(id * ar).2 E 27.5(g; /*)-.18 F
(depends on ar)2.5 E(gInfo */)-.18 E(int v)118 340.8 Q 35(al; /*)-.25 F
2.5(0m)2.5 G(eans don')-2.5 E 2.5(tr)-.18 G
(eturn, just update \215ag */)-2.5 E(char * descrip;)118 352.8 Q
(/* description for autohelp -- may be NULL */)20 E(char * ar)118 364.8
Q 10(gDescrip; /*)-.18 F(ar)2.5 E(gument description for autohelp */)
-.18 E(};)108 376.8 Q .697(Each member of the table de\214nes a single \
option that may be passed to the program.)108 400.8 R .698
(Long and short)5.698 F .726
(options are considered a single option that may occur in tw)108 412.8 R
3.226(od)-.1 G(if)-3.226 E .726(ferent forms.)-.25 F .726
(The \214rst tw)5.726 F 3.225(om)-.1 G(embers,)-3.225 E/F3 10
/Times-Italic@0 SF(longName)108 424.8 Q F0(and)3.053 E F3(shortName)
3.214 E F0 2.874(,d).18 G .374(e\214ne the names of the option; the \
\214rst is a long name, while the latter is a)-2.874 F(single character)
108 436.8 Q(.)-.55 E(The)108 460.8 Q F3(ar)3.297 E(gInfo)-.37 E F0 .796
(member tells popt what type of ar)3.477 F .796(gument is e)-.18 F .796
(xpected after the ar)-.15 F 3.296(gument. If)-.18 F .796(no option is)
3.296 F -.15(ex)108 472.8 S(pected,).15 E F2(POPT_ARG_NONE)2.524 E F0
.024(should be used.)2.524 F .024(The rest of the v)5.024 F .024(alid v)
-.25 F .025(alues are sho)-.25 F .025(wn in the follo)-.25 F(wing)-.25 E
(table:)108 484.8 Q F2 -.92(Va)108 508.8 S 89.54(lue Description).92 F
(ar)102.47 E 2.5(gT)-.1 G(ype)-3.24 E(POPT_ARG_NONE)108 520.8 Q F0
(No ar)28.34 E(gument e)-.18 E 59.21(xpected int)-.15 F F2
(POPT_ARG_STRING)108 532.8 Q F0(No type checking to be performed)18.89 E
(char *)15 E F2(POPT_ARG_INT)108 544.8 Q F0(An inte)39.45 E(ger ar)-.15
E(gument is e)-.18 E 19.92(xpected int)-.15 F F2(POPT_ARG_LONG)108 556.8
Q F0 2.5(Al)27.78 G(ong inte)-2.5 E(ger is e)-.15 E 44.73(xpected long)
-.15 F F2(POPT_ARG_V)108 568.8 Q(AL)-1.35 E F0(Inte)37.47 E(ger v)-.15 E
(alue tak)-.25 E(en from)-.1 E/F4 10/Courier@0 SF(val)2.5 E F0(int)33.33
E F2(POPT_ARG_FLO)108 580.8 Q -.95(AT)-.4 G F0(An \215oat ar)25.08 E
(gument is e)-.18 E 29.76(xpected \215oat)-.15 F F2(POPT_ARG_DOUBLE)108
592.8 Q F0 2.5(Ad)15 G(ouble ar)-2.5 E(gument is e)-.18 E 25.32
(xpected double)-.15 F -.15(Fo)108 616.8 S 5.824(rn).15 G 3.324
(umeric v)-5.824 F 3.324(alues, if the)-.25 F F3(ar)5.824 E(gInfo)-.37 E
F0 -.25(va)5.824 G 3.323(lue is bitwise or').25 F 5.823(dw)-.5 G 3.323
(ith one of)-5.823 F F2(POPT_ARGFLA)5.823 E(G_OR)-.55 E F0(,)A F2
(POPT_ARGFLA)108 628.8 Q(G_AND)-.55 E F0 4.228(,o)C(r)-4.228 E F2
(POPT_ARGFLA)4.228 E(G_XOR)-.55 E F0 4.228(,t)C 1.728(he v)-4.228 F
1.728(alue is sa)-.25 F -.15(ve)-.2 G 4.229(db).15 G 4.229(yp)-4.229 G
1.729(erforming an OR,)-4.229 F .749(AND, or XOR.)108 640.8 R .749
(If the)5.749 F F3(ar)3.249 E(gInfo)-.37 E F0 -.25(va)3.249 G .749
(lue is bitwise or').25 F 3.249(dw)-.5 G(ith)-3.249 E F2(POPT_ARGFLA)
3.249 E(G_NO)-.55 E(T)-.4 E F0 3.249(,t)C .749(he v)-3.249 F .749
(alue will be)-.25 F(ne)108 652.8 Q -.05(ga)-.15 G 1.274(ted before sa)
.05 F 1.274(ving. F)-.2 F 1.275
(or the common operations of setting and/or clearing bits,)-.15 F F2
(POPT_BIT_SET)3.775 E F0(and)108 664.8 Q F2(POPT_BIT_CLR)2.5 E F0(ha)2.5
E .3 -.15(ve t)-.2 H
(he appropriate \215ags set to perform bit operations.).15 E .876
(If the)108 688.8 R F3(ar)3.376 E(gInfo)-.37 E F0 -.25(va)3.376 G .876
(lue is bitwise or').25 F 3.376(dw)-.5 G(ith)-3.376 E F2(POPT_ARGFLA)
3.376 E(G_ONED)-.55 E(ASH)-.35 E F0 3.376(,t)C .876(he long ar)-3.376 F
.875(gument may be)-.18 F(gi)108 700.8 Q -.15(ve)-.25 G 9.035(nw).15 G
6.535(ith a single - instead of tw)-9.035 F 6.536(o. F)-.1 F 6.536(or e)
-.15 F 6.536(xample, if)-.15 F F2(--longopt)9.036 E F0 6.536
(is an option with)9.036 F F2(POPT_ARGFLA)108 712.8 Q(G_ONED)-.55 E(ASH)
-.35 E F0 2.5(,i)C 2.5(ss)-2.5 G(peci\214ed,)-2.5 E F2(-longopt)2.5 E F0
(is accepted as well.)2.5 E .349(The ne)108 736.8 R .349(xt element,)
-.15 F F3(ar)3.179 E(g)-.37 E F0 2.849(,a).22 G(llo)-2.849 E .349
(ws popt to automatically update program v)-.25 F .349
(ariables when the option is used.)-.25 F(If)108 748.8 Q F3(ar)3.322 E
(g)-.37 E F0(is)3.212 E F2(NULL)2.993 E F0 2.993(,i)C 2.993(ti)-2.993 G
2.993(si)-2.993 G .493(gnored and popt tak)-2.993 F .493
(es no special action.)-.1 F .493(Otherwise it should point to a v)5.493
F(ariable)-.25 E
(of the type indicated in the right-most column of the table abo)108
760.8 Q -.15(ve)-.15 G(.).15 E 192.723(2J)72 817.889 S(une 30, 1998)
-192.723 E 0 Cg EP
%%Page: 3 3
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 128.978(POPT\(3\) Linux)72 48 R(Programmer')2.5
E 2.5(sM)-.55 G 128.977(anual POPT\(3\))-2.5 F .348(If the option tak)
108 84 R .348(es no ar)-.1 F .348(gument \()-.18 F/F1 10/Times-Italic@0
SF(ar).33 E(gInfo)-.37 E F0(is)3.028 E/F2 10/Times-Bold@0 SF
(POPT_ARG_NONE)2.848 E F0 .348(\), the v)B .348(ariable pointed to by)
-.25 F F1(ar)2.847 E(g)-.37 E F0 .347(is set)3.067 F .946
(to 1 when the option is used.)108 96 R(\(Incidentally)5.946 E 3.447(,i)
-.65 G 3.447(tw)-3.447 G .947
(ill perhaps not escape the attention of hunt-and-peck)-3.447 F .711
(typists that the v)108 108 R .711(alue of)-.25 F F2(POPT_ARG_NONE)3.211
E F0 .711(is 0.\))3.211 F .711(If the option does tak)5.711 F 3.211(ea)
-.1 G 3.211(na)-3.211 G -.18(rg)-3.211 G .711(ument, the v).18 F
(ariable)-.25 E(that)108 120 Q F1(ar)5.062 E(g)-.37 E F0 2.562
(points to is updated to re\215ect the v)5.282 F 2.562(alue of the ar)
-.25 F 5.062(gument. An)-.18 F 5.062(ys)-.15 G 2.562
(tring is acceptable for)-5.062 F F2(POPT_ARG_STRING)108 132 Q F0(ar)
22.869 E 20.369(guments, b)-.18 F(ut)-.2 E F2(POPT_ARG_INT)22.869 E F0
(,)A F2(POPT_ARG_LONG)22.868 E F0(,)A F2(POPT_ARG_FLO)108 144 Q -.95(AT)
-.4 G F0 4.499(,a).95 G(nd)-4.499 E F2(POPT_ARG_DOUBLE)4.499 E F0 1.999
(are con)4.499 F -.15(ve)-.4 G 2(rted to the appropriate type, and an)
.15 F(error returned if the con)108 156 Q -.15(ve)-.4 G(rsion f).15 E
(ails.)-.1 E F2(POPT_ARG_V)108 180 Q(AL)-1.35 E F0(causes)2.835 E F1(ar)
2.835 E(g)-.37 E F0 .335(to be set to the \(inte)2.835 F .334(ger\) v)
-.15 F .334(alue of)-.25 F F1(val)2.834 E F0 .334(when the ar)2.834 F
.334(gument is found.)-.18 F(This)5.334 E 1.42
(is most often useful for mutually-e)108 192 R(xclusi)-.15 E 1.72 -.15
(ve a)-.25 H -.18(rg).15 G 1.42
(uments in cases where it is not an error for multiple).18 F(ar)108 204
Q 1.227(guments to occur and where you w)-.18 F 1.227(ant the last ar)
-.1 F 1.227(gument speci\214ed to win; for e)-.18 F 1.226
(xample, "rm -i -f".)-.15 F F2(POPT_ARG_V)108 216 Q(AL)-1.35 E F0 .328
(causes the parsing function not to return a v)2.828 F .329
(alue, since the v)-.25 F .329(alue of)-.25 F F1(val)2.829 E F0 .329
(has already)2.829 F(been used.)108 228 Q 1.078(If the)108 252 R F1(ar)
3.578 E(gInfo)-.37 E F0 -.25(va)3.578 G 1.077(lue is bitwise or').25 F
3.577(dw)-.5 G(ith)-3.577 E F2(POPT_ARGFLA)3.577 E(G_OPTION)-.55 E(AL)
-.2 E F0 3.577(,t)C 1.077(he ar)-3.577 F 1.077(gument to the long)-.18 F
.06(option may be omitted. If the long option is used without an ar)108
264 R .06(gument, a def)-.18 F .06(ault v)-.1 F .06
(alue of zero or NULL)-.25 F .692(will be sa)108 276 R -.15(ve)-.2 G
3.192(d\().15 G .692(if the ar)-3.192 F 3.192(gp)-.18 G .691
(ointer is present\), otherwise beha)-3.192 F .691
(vior will be identical to a long option with)-.2 F(ar)108 288 Q
(gument.)-.18 E .22(The ne)108 312 R .22(xt option,)-.15 F F1(val)3.01 E
F0 2.72(,i).51 G 2.72(st)-2.72 G .22(he v)-2.72 F .22(alue popt')-.25 F
2.72(sp)-.55 G .221
(arsing function should return when the option is encountered.)-2.72 F
.185(If it is 0, the parsing function does not return a v)108 324 R .184
(alue, instead parsing the ne)-.25 F .184(xt command-line ar)-.15 F
(gument.)-.18 E .428(The last tw)108 348 R 2.928(oo)-.1 G(ptions,)-2.928
E F1(descrip)3.278 E F0(and)3.118 E F1(ar)3.258 E(gDescrip)-.37 E F0
.429(are only required if automatic help messages are desired)3.118 F
.936(\(automatic usage messages can be generated without them\).)108 360
R F1(descrip)3.786 E F0 .936(is a te)3.626 F .935
(xt description of the ar)-.15 F(gu-)-.18 E .722(ment and)108 372 R F1
(ar)3.552 E(gdescrip)-.37 E F0 .722
(is a short summary of the type of ar)3.412 F .723(guments the option e)
-.18 F .723(xpects, or NULL if the)-.15 F(option doesn')108 384 Q 2.5
(tr)-.18 G(equire an)-2.5 E 2.5(ya)-.15 G -.18(rg)-2.5 G(uments.).18 E
.011(If popt should automatically pro)108 408 R(vide)-.15 E F2(--usage)
2.511 E F0(and)2.511 E F2(--help)2.511 E F0(\()2.511 E F2(-?)A F0 5.011
(\)o)C .011(ptions, one line in the table should be the)-5.011 F(macro)
108 420 Q F2(POPT_A)16.441 E(UT)-.5 E(OHELP)-.18 E F0 18.942(.T)C 13.942
(his macro includes another option table \(via)-18.942 F F2
(POPT_ARG_INCLUDE_T)108 432 Q(ABLE;)-.9 E F0 1.292(see belo)3.793 F
1.292(w\) in the main one which pro)-.25 F 1.292
(vides the table entries for)-.15 F 1.068(these ar)108 444 R 1.069
(guments. When)-.18 F F2(--usage)3.569 E F0(or)3.569 E F2(--help)3.569 E
F0 1.069(are passed to programs which use popt')3.569 F 3.569(sa)-.55 G
1.069(utomatical help,)-3.569 F 1.04(popt displays the appropriate mess\
age on stderr as soon as it \214nds the option, and e)108 456 R 1.04
(xits the program)-.15 F .017(with a return code of 0. If you w)108 468
R .017(ant to use popt')-.1 F 2.517(sa)-.55 G .017
(utomatic help generation in a dif)-2.517 F .018(ferent w)-.25 F(ay)-.1
E 2.518(,y)-.65 G .018(ou need)-2.518 F 1.827(to e)108 480 R 1.826(xpli\
citly add the option entries to your programs option table instead of u\
sing)-.15 F F2(POPT_A)4.326 E(UT)-.5 E(O-)-.18 E(HELP)108 492 Q F0(.)A
.988(If the)108 516 R F1(ar)3.488 E(gInfo)-.37 E F0 -.25(va)3.488 G .989
(lue is bitwise or').25 F 3.489(dw)-.5 G(ith)-3.489 E F2(POPT_ARGFLA)
3.489 E(G_DOC_HIDDEN)-.55 E F0 3.489(,t)C .989(he ar)-3.489 F .989
(gument will not)-.18 F(be sho)108 528 Q(wn in help output.)-.25 E 1.137
(If the)108 552 R F1(ar)3.637 E(gInfo)-.37 E F0 -.25(va)3.637 G 1.136
(lue is bitwise or').25 F 3.636(dw)-.5 G(ith)-3.636 E F2(POPT_ARGFLA)
3.636 E(G_SHO)-.55 E(W_DEF)-.5 E -.5(AU)-.9 G -.92(LT).5 G F0 3.636(,t)
.92 G 1.136(he inital v)-3.636 F 1.136(alue of)-.25 F(the ar)108 564 Q
2.5(gw)-.18 G(ill be sho)-2.5 E(wn in help output.)-.25 E .977
(The \214nal structure in the table should ha)108 588 R 1.277 -.15(ve a)
-.2 H .977(ll the pointer v).15 F .977(alues set to)-.25 F F2(NULL)3.477
E F0 .977(and all the arithmetic)3.477 F -.25(va)108 600 S
(lues set to 0, marking the end of the table. The macro).25 E F2(POPT_T)
2.5 E(ABLEEND)-.9 E F0(is pro)2.5 E(vided to do that.)-.15 E .223
(There are tw)108 624 R 2.722(ot)-.1 G .222(ypes of option table entrie\
s which do not specify command line options. When either of)-2.722 F
1.393(these types of entries are used, the)108 636 R F1(longName)3.893 E
F0 1.393(element must be)3.893 F F2(NULL)3.893 E F0 1.393(and the)3.893
F F2(shortName)3.893 E F0(element)3.893 E(must be)108 648 Q F2('\\0')2.5
E F0(.)A .802(The \214rst of these special entry types allo)108 672 R
.802(ws the application to nest another option table in the current)-.25
F .359(one; such nesting may e)108 684 R .36
(xtend quite deeply \(the actual depth is limited by the program')-.15 F
2.86(ss)-.55 G .36(tack\). Includ-)-2.86 F .247
(ing other option tables allo)108 696 R .246(ws a library to pro)-.25 F
.246(vide a standard set of command-line options to e)-.15 F -.15(ve)
-.25 G .246(ry pro-).15 F .531(gram which uses it \(this is often done \
in graphical programming toolkits, for e)108 708 R .532(xample\). T)-.15
F 3.032(od)-.8 G 3.032(ot)-3.032 G .532(his, set)-3.032 F(the)108 720 Q
F1(ar)3.263 E(gInfo)-.37 E F0 .763(\214eld to)3.263 F F2
(POPT_ARG_INCLUDE_T)3.263 E(ABLE)-.9 E F0 .763(and the ar)3.263 F 3.263
<678c>-.18 G .763(eld to point to the table which is)-3.263 F 1.06
(being included. If automatic help generation is being used, the)108 732
R F1(descrip)3.56 E F0 1.061(\214eld should contain a o)3.561 F -.15(ve)
-.15 G(rall).15 E(description of the option table being included.)108
744 Q .86(The other special option table entry type tells popt to call \
a function \(a callback\) when an)108 768 R 3.36(yo)-.15 G .86(ption in)
-3.36 F 2.242(that table is found. This is especially usefull when incl\
uded option tables are being used, as the)108 780 R(June 30, 1998)
269.723 817.889 Q(3)192.722 E 0 Cg EP
%%Page: 4 4
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 128.978(POPT\(3\) Linux)72 48 R(Programmer')2.5
E 2.5(sM)-.55 G 128.977(anual POPT\(3\))-2.5 F .396(program which pro)
108 84 R .396(vides the top-le)-.15 F -.15(ve)-.25 G 2.896(lo).15 G .395
(ption table doesn')-2.896 F 2.895(tn)-.18 G .395(eed to be a)-2.895 F
-.1(wa)-.15 G .395(re of the other options which).1 F .113(are pro)108
96 R .113(vided by the included table. When a callback is set for a tab\
le, the parsing function ne)-.15 F -.15(ve)-.25 G 2.614(rr).15 G(eturns)
-2.614 E .367(information on an option in the table. Instead, options i\
nformation must be retained via the callback or)108 108 R .224(by ha)108
120 R .224(ving popt set a v)-.2 F .225(ariable through the option')-.25
F(s)-.55 E/F1 10/Times-Italic@0 SF(ar)2.725 E(g)-.37 E F0 2.725
(\214eld. Option)2.725 F .225(callbacks should match the follo)2.725 F
(w-)-.25 E(ing prototype:)108 132 Q/F2 10/Times-Bold@0 SF -.1(vo)108 156
S(id poptCallbackT).1 E(ype\(poptContext con,)-.74 E
(const struct poptOption * opt,)163 168 Q(const char * ar)163 180 Q
(g, v)-.1 E(oid * data\);)-.1 E F0 .807
(The \214rst parameter is the conte)108 204 R .806
(xt which is being parsed \(see the ne)-.15 F .806
(xt section for information on con-)-.15 F(te)108 216 Q(xts\),)-.15 E F1
(opt)3.326 E F0 .827
(points to the option which triggered this callback, and)3.326 F F1(ar)
3.327 E(g)-.37 E F0 .827(is the option')3.327 F 3.327(sa)-.55 G -.18(rg)
-3.327 G 3.327(ument. If).18 F(the)3.327 E .855(option does not tak)108
228 R 3.355(ea)-.1 G 3.355(na)-3.355 G -.18(rg)-3.355 G(ument,).18 E F1
(ar)3.355 E(g)-.37 E F0(is)3.355 E F2(NULL)3.354 E F0 5.854(.T)C .854
(he \214nal parameter)-5.854 F(,)-.4 E F1(data)3.354 E F0 .854(is tak)
3.354 F .854(en from the)-.1 F F1(descrip)3.354 E F0 .662
(\214eld of the option table entry which de\214ned the callback. As)108
240 R F1(descrip)3.162 E F0 .662(is a pointer)3.162 F 3.162(,t)-.4 G
.662(his allo)-3.162 F .663(ws callback)-.25 F(functions to be passed a\
n arbitrary set of data \(though a typecast will ha)108 252 Q .3 -.15
(ve t)-.2 H 2.5(ob).15 G 2.5(eu)-2.5 G(sed\).)-2.5 E .553
(The option table entry which de\214nes a callback has an)108 276 R F1
(ar)3.053 E(gInfo)-.37 E F0(of)3.053 E F2(POPT_ARG_CALLB)3.053 E -.55
(AC)-.3 G(K).55 E F0 3.053(,a)C(n)-3.053 E F1(ar)3.053 E(g)-.37 E F0
1.427(which points to the callback function, and a)108 288 R F1(descrip)
3.927 E F0 1.427(\214eld which speci\214es an arbitrary pointer to be)
3.927 F(passed to the callback.)108 300 Q F2(2. CREA)87 316.8 Q
(TING A CONTEXT)-.95 E F0 1.088(popt can interlea)108 328.8 R 1.388 -.15
(ve t)-.2 H 1.088(he parsing of multiple command-line sets. It allo).15
F 1.088(ws this by k)-.25 F 1.087(eeping all the state)-.1 F .137
(information for a particular set of command-line ar)108 340.8 R .138
(guments in a)-.18 F F2(poptContext)2.638 E F0 .138
(data structure, an opaque)2.638 F
(type that should not be modi\214ed outside the popt library)108 352.8 Q
(.)-.65 E(Ne)108 376.8 Q 2.5(wp)-.25 G(opt conte)-2.5 E
(xts are created by)-.15 E F2(poptGetContext\(\))2.5 E F0(:)A F2
(poptContext poptGetContext\(const char *)108 400.8 Q F1(name)2.86 E F2
2.5(,i).18 G(nt)-2.5 E F1(ar)2.83 E(gc)-.37 E F2(,).31 E(const char **)
175.5 412.8 Q F1(ar)2.83 E(gv)-.37 E F2(,).32 E
(const struct poptOption *)175.5 424.8 Q F1(options)2.73 E F2(,).27 E
(int)175.5 436.8 Q F1<8d61>4.41 E(gs)-.1 E F2(\);).27 E F0 .171
(The \214rst parameter)108 460.8 R(,)-.4 E F1(name)2.671 E F0 2.671(,i)
.18 G 2.671(su)-2.671 G .17(sed only for alias handling \(discussed lat\
er\). It should be the name of the)-2.671 F .888
(application whose options are being parsed, or should be)108 472.8 R F2
(NULL)3.388 E F0 .888(if no option aliasing is desired. The)3.388 F(ne)
108 484.8 Q .327(xt tw)-.15 F 2.827(oa)-.1 G -.18(rg)-2.827 G .327
(uments specify the command-line ar).18 F .327
(guments to parse. These are generally passed to)-.18 F F2(popt-)2.826 E
(GetContext\(\))108 496.8 Q F0 -.15(ex)3.769 G 1.269(actly as the).15 F
3.769(yw)-.15 G 1.27(ere passed to the program')-3.769 F(s)-.55 E F2
(main\(\))3.77 E F0 1.27(function. The)3.77 F F1(options)3.77 E F0
(parameter)4.04 E 1.285
(points to the table of command-line options, which w)108 508.8 R 1.285
(as described in the pre)-.1 F 1.285(vious section. The \214nal)-.25 F
(parameter)108 520.8 Q(,)-.4 E F1<8d61>2.5 E(gs)-.1 E F0 2.5(,c).27 G
(an tak)-2.5 E 2.5(eo)-.1 G(ne of three v)-2.5 E(alues:)-.25 E F2 -.92
(Va)108 532.8 S 164.54(lue Description).92 F(POPT_CONTEXT_NO_EXEC)108
544.8 Q F0(Ignore e)57.22 E -.15(xe)-.15 G 2.5(ce).15 G(xpansions)-2.65
E F2(POPT_CONTEXT_KEEP_FIRST)108 556.8 Q F0(Do not ignore ar)43.32 E
(gv[0])-.18 E F2(POPT_CONTEXT_POSIXMEHARDER)108 568.8 Q F0
(Options cannot follo)15 E 2.5(wa)-.25 G -.18(rg)-2.5 G(uments).18 E(A)
108 592.8 Q F2(poptContext)2.665 E F0 -.1(ke)2.665 G .165
(eps track of which options ha).1 F .466 -.15(ve a)-.2 H .166
(lready been parsed and which remain, among other).15 F .152(things. If\
 a program wishes to restart option processing of a set of ar)108 604.8
R .152(guments, it can reset the)-.18 F F2(poptCon-)2.651 E(text)108
616.8 Q F0(by passing the conte)2.5 E(xt as the sole ar)-.15 E
(gument to)-.18 E F2(poptResetContext\(\))2.5 E F0(.)A .176(When ar)108
640.8 R .176(gument processing is complete, the process should free the)
-.18 F F2(poptContext)2.676 E F0 .176(as it contains dynam-)2.676 F
1.248(ically allocated components. The)108 652.8 R F2(poptFr)3.748 E
(eeContext\(\))-.18 E F0 1.248(function tak)3.748 F 1.248(es a)-.1 F F2
(poptContext)3.748 E F0 1.248(as its sole ar)3.748 F(gu-)-.18 E
(ment and frees the resources the conte)108 664.8 Q(xt is using.)-.15 E
(Here are the prototypes of both)108 688.8 Q F2(poptResetContext\(\))2.5
E F0(and)2.5 E F2(poptFr)2.5 E(eeContext\(\))-.18 E F0(:)A F2
(#include <popt.h>)108 712.8 Q -.1(vo)108 724.8 S(id poptFr).1 E
(eeContext\(poptContext)-.18 E F1(con)2.7 E F2(\);).24 E -.1(vo)108
736.8 S(id poptResetContext\(poptContext).1 E F1(con)2.7 E F2(\);).24 E
F0 192.723(4J)72 817.889 S(une 30, 1998)-192.723 E 0 Cg EP
%%Page: 5 5
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 128.978(POPT\(3\) Linux)72 48 R(Programmer')2.5
E 2.5(sM)-.55 G 128.977(anual POPT\(3\))-2.5 F/F1 10/Times-Bold@0 SF
(3. P)87 84 Q(ARSING THE COMMAND LINE)-.74 E F0 .936
(After an application has created a)108 96 R F1(poptContext)3.436 E F0
3.436(,i)C 3.436(tm)-3.436 G .936(ay be)-3.436 F .937(gin parsing ar)
-.15 F(guments.)-.18 E F1(poptGetNextOpt\(\))3.437 E F0
(performs the actual ar)108 108 Q(gument parsing.)-.18 E F1
(#include <popt.h>)108 132 Q(int poptGetNextOpt\(poptContext)108 144 Q
/F2 10/Times-Italic@0 SF(con)2.7 E F1(\);).24 E F0 -.8(Ta)108 168 S
1.001(king the conte).8 F 1.001(xt as its sole ar)-.15 F 1
(gument, this function parses the ne)-.18 F 1(xt command-line ar)-.15 F
1(gument found.)-.18 F 1.192(After \214nding the ne)108 180 R 1.192
(xt ar)-.15 F 1.192(gument in the option table, the function \214lls in\
 the object pointed to by the)-.18 F .53(option table entry')108 192 R
(s)-.55 E F2(ar)3.36 E(g)-.37 E F0 .529(pointer if it is not)3.03 F F1
(NULL)3.029 E F0 3.029(.I)C 3.029(ft)-3.029 G .529(he v)-3.029 F .529
(al entry for the option is non-0, the function)-.25 F
(then returns that v)108 204 Q(alue. Otherwise,)-.25 E F1
(poptGetNextOpt\(\))2.5 E F0(continues on to the ne)2.5 E(xt ar)-.15 E
(gument.)-.18 E F1(poptGetNextOpt\(\))108 228 Q F0 .04
(returns -1 when the \214nal ar)2.54 F .04
(gument has been parsed, and other ne)-.18 F -.05(ga)-.15 G(ti).05 E
.341 -.15(ve v)-.25 H .041(alues when)-.1 F(errors occur)108 240 Q 2.5
(.T)-.55 G(his mak)-2.5 E(es it a good idea to k)-.1 E(eep the)-.1 E F2
(val)2.79 E F0(elements in the options table greater than 0.)3.01 E .483
(If all of the command-line options are handled through)108 264 R F2(ar)
3.313 E(g)-.37 E F0 .483(pointers, command-line parsing is reduced)2.983
F(to the follo)108 276 Q(wing line of code:)-.25 E(rc = poptGetNe)108
300 Q(xtOpt\(poptcon\);)-.15 E(Man)108 324 Q 2.628(ya)-.15 G .128
(pplications require more comple)-2.628 F 2.628(xc)-.15 G .128
(ommand-line parsing than this, ho)-2.628 F(we)-.25 E -.15(ve)-.25 G
.928 -.4(r, a).15 H .128(nd use the follo).4 F(w-)-.25 E(ing structure:)
108 336 Q(while \(\(rc = poptGetNe)108 360 Q(xtOpt\(poptcon\)\) > 0\) {)
-.15 E(switch \(rc\) {)120.5 372 Q(/* speci\214c ar)133 384 Q
(guments are handled here */)-.18 E(})120.5 396 Q(})108 408 Q .057
(When returned options are handled, the application needs to kno)108 432
R 2.557(wt)-.25 G .057(he v)-2.557 F .057(alue of an)-.25 F 2.557(ya)
-.15 G -.18(rg)-2.557 G .057(uments that were).18 F .554
(speci\214ed after the option. There are tw)108 444 R 3.054(ow)-.1 G
.554(ays to disco)-3.154 F -.15(ve)-.15 G 3.054(rt).15 G .554
(hem. One is to ask popt to \214ll in a v)-3.054 F(ariable)-.25 E .741
(with the v)108 456 R .74(alue of the option through the option table')
-.25 F(s)-.55 E F2(ar)3.57 E(g)-.37 E F0 .74
(elements. The other is to use)3.46 F F1(poptGetOp-)3.24 E(tAr)108 468 Q
(g\(\))-.1 E F0(:)A F1(#include <popt.h>)108 492 Q
(const char * poptGetOptAr)108 504 Q(g\(poptContext)-.1 E F2(con)2.7 E
F1(\);).24 E F0 1.751(This function returns the ar)108 528 R 1.751
(gument gi)-.18 F -.15(ve)-.25 G 4.251(nf).15 G 1.751
(or the \214nal option returned by)-4.251 F F1(poptGetNextOpt\(\))4.251
E F0 4.251(,o)C 4.252(ri)-4.251 G(t)-4.252 E(returns)108 540 Q F1(NULL)
2.5 E F0(if no ar)2.5 E(gument w)-.18 E(as speci\214ed.)-.1 E F1
(4. LEFT)87 568.8 Q -.5(OV)-.18 G(ER ARGUMENTS).5 E F0(Man)108 580.8 Q
3.348(ya)-.15 G .848(pplications tak)-3.348 F 3.348(ea)-.1 G 3.348(na)
-3.348 G .848(rbitrary number of command-line ar)-3.348 F .847
(guments, such as a list of \214le names.)-.18 F .453
(When popt encounters an ar)108 592.8 R .453(gument that does not be)
-.18 F .454(gin with a -, it assumes it is such an ar)-.15 F .454
(gument and)-.18 F(adds it to a list of lefto)108 604.8 Q -.15(ve)-.15 G
2.5(ra).15 G -.18(rg)-2.5 G(uments. Three functions allo).18 E 2.5(wa)
-.25 G(pplications to access such ar)-2.5 E(guments:)-.18 E F1
(const char * poptGetAr)108 621.6 Q(g\(poptContext)-.1 E F2(con)2.7 E F1
(\);).24 E F0(This function returns the ne)144 633.6 Q(xt lefto)-.15 E
-.15(ve)-.15 G 2.5(ra).15 G -.18(rg)-2.5 G
(ument and marks it as processed.).18 E F1(const char * poptP)108 655.2
Q(eekAr)-.2 E(g\(poptContext)-.1 E F2(con)2.7 E F1(\);).24 E F0 .713
(The ne)144 667.2 R .713(xt lefto)-.15 F -.15(ve)-.15 G 3.213(ra).15 G
-.18(rg)-3.213 G .713(ument is returned b).18 F .713(ut not mark)-.2 F
.712(ed as processed.)-.1 F .712(This allo)5.712 F .712(ws an applica-)
-.25 F(tion to look ahead into the ar)144 679.2 Q
(gument list, without modifying the list.)-.18 E F1
(const char ** poptGetAr)108 700.8 Q(gs\(poptContext)-.1 E F2(con)2.7 E
F1(\);).24 E F0 .235(All the lefto)144 712.8 R -.15(ve)-.15 G 2.735(ra)
.15 G -.18(rg)-2.735 G .235
(uments are returned in a manner identical to).18 F F2(ar)2.735 E(gv)
-.37 E F0 5.236(.T).32 G .236(he \214nal element in the)-5.236 F
(returned array points to)144 724.8 Q F1(NULL)2.5 E F0 2.5(,i)C
(ndicating the end of the ar)-2.5 E(guments.)-.18 E F1(5. A)87 753.6 Q
(UT)-.5 E(OMA)-.18 E(TIC HELP MESSA)-.95 E(GES)-.55 E F0(The)108 765.6 Q
F1(popt)4.515 E F0 2.014(library can automatically generate help messag\
es which describe the options a program)4.515 F 1.246
(accepts. There are tw)108 777.6 R 3.746(ot)-.1 G 1.247(ypes of help me\
ssages which can be generated. Usage messages are a short)-3.746 F
(June 30, 1998)269.723 817.889 Q(5)192.722 E 0 Cg EP
%%Page: 6 6
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 128.978(POPT\(3\) Linux)72 48 R(Programmer')2.5
E 2.5(sM)-.55 G 128.977(anual POPT\(3\))-2.5 F .255
(messages which lists v)108 84 R .255(alid options, b)-.25 F .255
(ut does not describe them. Help messages describe each option on)-.2 F
1.219(one \(or more\) lines, resulting in a longer)108 96 R 3.72(,b)-.4
G 1.22(ut more useful, message. Whene)-3.92 F -.15(ve)-.25 G 3.72(ra).15
G 1.22(utomatic help mes-)-3.72 F .621(sages are used, the)108 108 R/F1
10/Times-Bold@0 SF(descrip)3.121 E F0(and)3.121 E F1(ar)3.12 E(gDescrip)
-.1 E F0(\214elds)3.12 E F1 .62(struct poptOption)3.12 F F0 .62
(members should be \214lled in for)3.12 F(each option.)108 120 Q(The)108
144 Q F1(POPT_A)3.312 E(UT)-.5 E(OHELP)-.18 E F0 .812(macro mak)3.312 F
.812(es it easy to add)-.1 F F1(--usage)3.313 E F0(and)3.313 E F1
(--help)3.313 E F0 .813(messages to your program,)3.313 F .283(and is d\
escribed in part 1 of this man page. If more control is needed o)108 156
R -.15(ve)-.15 G 2.782(ry).15 G .282(our help messages, the fol-)-2.782
F(lo)108 168 Q(wing tw)-.25 E 2.5(of)-.1 G(unctions are a)-2.5 E -.25
(va)-.2 G(ilable:).25 E F1(#include <popt.h>)108 192 Q -.1(vo)108 204 S
(id poptPrintHelp\(poptContext).1 E/F2 10/Times-Italic@0 SF(con)2.7 E F1
2.5(,F).24 G(ILE *)-2.5 E F2(f)4.47 E F1 2.5(,i)1.96 G(nt)-2.5 E F2
<8d61>4.41 E(gs)-.1 E F1(\);).27 E -.1(vo)108 216 S
(id poptPrintUsage\(poptContext).1 E F2(con)2.7 E F1 2.5(,F).24 G(ILE *)
-2.5 E F2(f)4.47 E F1 2.5(,i)1.96 G(nt)-2.5 E F2<8d61>4.41 E(gs)-.1 E F1
(\);).27 E(poptPrintHelp\(\))108 240 Q F0 1.433(displays the standard h\
elp message to the stdio \214le descriptor f, while)3.933 F F1
(poptPrint-)3.934 E(Usage\(\))108 252 Q F0 .968(displays the shorter us\
age message. Both functions currently ignore the)3.469 F F1(\215ags)
3.468 E F0(ar)3.468 E .968(gument; it is)-.18 F(there to allo)108 264 Q
2.5(wf)-.25 G(uture changes.)-2.5 E/F3 10.95/Times-Bold@0 SF(ERR)72
292.8 Q(OR HANDLING)-.329 E F0 .557
(All of the popt functions that can return errors return inte)108 304.8
R 3.057(gers. When)-.15 F .558(an error occurs, a ne)3.058 F -.05(ga)
-.15 G(ti).05 E .858 -.15(ve e)-.25 H(rror).15 E
(code is returned. The follo)108 316.8 Q
(wing table summarizes the error codes that occur:)-.25 E F1(Err)120.5
340.8 Q 52.5(or Description)-.18 F(POPT_ERR)108 352.8 Q(OR_NO)-.3 E(ARG)
-.4 E F0(Ar)17.5 E(gument missing for an option.)-.18 E F1(POPT_ERR)108
364.8 Q(OR_B)-.3 E(ADOPT)-.3 E F0(Option')15 E 2.5(sa)-.55 G -.18(rg)
-2.5 G(ument couldn').18 E 2.5(tb)-.18 G 2.5(ep)-2.5 G(arsed.)-2.5 E F1
(POPT_ERR)108 376.8 Q(OR_OPTST)-.3 E(OODEEP)-.18 E F0
(Option aliasing nested too deeply)2.5 E(.)-.65 E F1(POPT_ERR)108 388.8
Q(OR_B)-.3 E(ADQ)-.3 E(UO)-.1 E(TE)-.4 E F0(Quotations do not match.)10
E F1(POPT_ERR)108 400.8 Q(OR_B)-.3 E(ADNUMBER)-.3 E F0(Option couldn')
7.5 E 2.5(tb)-.18 G 2.5(ec)-2.5 G(on)-2.5 E -.15(ve)-.4 G
(rted to number).15 E(.)-.55 E F1(POPT_ERR)108 412.8 Q(OR_O)-.3 E
(VERFLO)-.5 E(W)-.5 E F0 2.5(Ag)10 G -2.15 -.25(iv e)-2.5 H 2.5(nn).25 G
(umber w)-2.5 E(as too big or small.)-.1 E
(Here is a more detailed discussion of each error:)108 436.8 Q F1
(POPT_ERR)108 465.6 Q(OR_NO)-.3 E(ARG)-.4 E F0 .265
(An option that requires an ar)144 477.6 R .265(gument w)-.18 F .265
(as speci\214ed on the command line, b)-.1 F .265(ut no ar)-.2 F .265
(gument w)-.18 F(as)-.1 E(gi)144 489.6 Q -.15(ve)-.25 G
(n. This can be returned only by).15 E F1(poptGetNextOpt\(\))2.5 E F0(.)
A F1(POPT_ERR)108 518.4 Q(OR_B)-.3 E(ADOPT)-.3 E F0 .441(An option w)144
530.4 R .441(as speci\214ed in)-.1 F F2(ar)3.271 E(gv)-.37 E F0 -.2(bu)
3.261 G 2.941(ti).2 G 2.941(sn)-2.941 G .442
(ot in the option table. This error can be returned only)-2.941 F(from)
144 542.4 Q F1(poptGetNextOpt\(\))2.5 E F0(.)A F1(POPT_ERR)108 571.2 Q
(OR_OPTST)-.3 E(OODEEP)-.18 E F0 3.203(As)144 583.2 S .702
(et of option aliases is nested too deeply)-3.203 F 3.202(.C)-.65 G
(urrently)-3.202 E 3.202(,p)-.65 G .702(opt follo)-3.202 F .702
(ws options only 10 le)-.25 F -.15(ve)-.25 G .702(ls to).15 F(pre)144
595.2 Q -.15(ve)-.25 G(nt in\214nite recursion. Only).15 E F1
(poptGetNextOpt\(\))2.5 E F0(can return this error)2.5 E(.)-.55 E F1
(POPT_ERR)108 624 Q(OR_B)-.3 E(ADQ)-.3 E(UO)-.1 E(TE)-.4 E F0 6.421(Ap)
144 636 S 3.921(arsed string has a quotation mismatch \(such as a singl\
e quotation mark\).)-6.421 F F1(popt-)6.422 E -.1(Pa)144 648 S(rseAr).1
E(gvString\(\))-.1 E F0(,)A F1(poptReadCon\214gFile\(\))5.66 E F0 5.659
(,o)C(r)-5.659 E F1(poptReadDefaultCon\214g\(\))5.659 E F0 3.159
(can return this)5.659 F(error)144 660 Q(.)-.55 E F1(POPT_ERR)108 688.8
Q(OR_B)-.3 E(ADNUMBER)-.3 E F0 2.677(Ac)144 700.8 S(on)-2.677 E -.15(ve)
-.4 G .178(rsion from a string to a number \(int or long\) f).15 F .178
(ailed due to the string containing nonnu-)-.1 F 1.827
(meric characters. This occurs when)144 712.8 R F1(poptGetNextOpt\(\))
4.327 E F0 1.827(is processing an ar)4.327 F 1.826(gument of type)-.18 F
F1(POPT_ARG_INT)144 724.8 Q F0(,)A F1(POPT_ARG_LONG)3.098 E F0 3.099(,P)
C(OPT_ARG_FLO)-3.099 E -1.11(AT)-.35 G F1 3.099(,o)1.11 G(r)-3.099 E F0
(POPT_ARG_DOUBLE)3.099 E F1(.)A(POPT_ERR)108 753.6 Q(OR_O)-.3 E(VERFLO)
-.5 E(W)-.5 E F0 4.025(As)144 765.6 S 1.525(tring-to-number con)-4.025 F
-.15(ve)-.4 G 1.525(rsion f).15 F 1.524(ailed because the number w)-.1 F
1.524(as too lar)-.1 F 1.524(ge or too small. Lik)-.18 F(e)-.1 E F1
(POPT_ERR)144 777.6 Q(OR_B)-.3 E(ADNUMBER)-.3 E F0 5.58(,t)C 3.081
(his error can occur only when)-5.58 F F1(poptGetNextOpt\(\))5.581 E F0
(is)5.581 E 192.723(6J)72 817.889 S(une 30, 1998)-192.723 E 0 Cg EP
%%Page: 7 7
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 128.978(POPT\(3\) Linux)72 48 R(Programmer')2.5
E 2.5(sM)-.55 G 128.977(anual POPT\(3\))-2.5 F 13.153(processing an ar)
144 84 R 13.153(gument of type)-.18 F/F1 10/Times-Bold@0 SF
(POPT_ARG_INT)15.652 E F0(,)A F1(POPT_ARG_LONG)15.652 E F0(,)A
(POPT_ARG_FLO)144 96 Q -1.11(AT)-.35 G F1 2.5(,o)1.11 G(r)-2.5 E F0
(POPT_ARG_DOUBLE)2.5 E F1(.)A(POPT_ERR)108 124.8 Q(OR_ERRNO)-.3 E F0
3.397(As)144 136.8 S .898(ystem call returned with an error)-3.397 F
3.398(,a)-.4 G(nd)-3.398 E/F2 10/Times-Italic@0 SF(errno)3.588 E F0 .898
(still contains the error from the system call.)3.578 F(Both)144 148.8 Q
F1(poptReadCon\214gFile\(\))2.5 E F0(and)2.5 E F1
(poptReadDefaultCon\214g\(\))2.5 E F0(can return this error)2.5 E(.)-.55
E -1 -.8(Tw o)108 177.6 T(functions are a)3.3 E -.25(va)-.2 G
(ilable to mak).25 E 2.5(ei)-.1 G 2.5(te)-2.5 G
(asy for applications to pro)-2.5 E(vide good error messages.)-.15 E F1
(const char *const poptStr)108 194.4 Q(err)-.18 E(or\(const int)-.18 E
F2(err)2.69 E(or)-.45 E F1(\);).73 E F0 .416(This function tak)144 206.4
R .416(es a popt error code and returns a string describing the error)
-.1 F 2.915(,j)-.4 G .415(ust as with the)-2.915 F(standard)144 218.4 Q
F1(str)2.5 E(err)-.18 E(or\(\))-.18 E F0(function.)2.5 E F1
(const char * poptBadOption\(poptContext)108 240 Q F2(con)2.7 E F1 2.5
(,i).24 G(nt)-2.5 E F2<8d61>4.41 E(gs)-.1 E F1(\);).27 E F0 .121
(If an error occurred during)144 252 R F1(poptGetNextOpt\(\))2.621 E F0
2.621(,t)C .121(his function returns the option that caused the)-2.621 F
(error)144 264 Q 2.957(.I)-.55 G 2.957(ft)-2.957 G(he)-2.957 E F2<8d61>
4.867 E(gs)-.1 E F0(ar)3.227 E .457(gument is set to)-.18 F F1(POPT_B)
2.957 E(ADOPTION_NO)-.3 E(ALIAS)-.4 E F0 2.957(,t)C .456
(he outermost option)-2.957 F .18(is returned. Otherwise,)144 276 R F2
<8d61>4.59 E(gs)-.1 E F0 .18
(should be 0, and the option that is returned may ha)2.95 F .481 -.15
(ve b)-.2 H .181(een speci-).15 F(\214ed through an alias.)144 288 Q
.646(These tw)108 304.8 R 3.146(of)-.1 G .646(unctions mak)-3.146 F
3.146(ep)-.1 G .646(opt error handling tri)-3.146 F .645
(vial for most applications. When an error is detected)-.25 F .01(from \
most of the functions, an error message is printed along with the error\
 string from)108 316.8 R F1(poptStr)2.51 E(err)-.18 E(or\(\))-.18 E F0
(.)A .941(When an error occurs during ar)108 328.8 R .941
(gument parsing, code similiar to the follo)-.18 F .941
(wing displays a useful error)-.25 F(message:)108 340.8 Q
(fprintf\(stderr)108 364.8 Q 2.5(,")-.4 G(%s: %s\\n",)-2.5 E
(poptBadOption\(optCon, POPT_B)128 376.8 Q(ADOPTION_NO)-.35 E(ALIAS\),)
-.35 E(poptStrerror\(rc\)\);)128 388.8 Q/F3 10.95/Times-Bold@0 SF
(OPTION ALIASING)72 417.6 Q F0 .032
(One of the primary bene\214ts of using popt o)108 429.6 R -.15(ve)-.15
G(r).15 E F1(getopt\(\))2.532 E F0 .032
(is the ability to use option aliasing. This lets the)2.532 F .613
(user specify options that popt e)108 441.6 R .613
(xpands into other options when the)-.15 F 3.113(ya)-.15 G .612
(re speci\214ed. If the standard grep)-3.113 F .129
(program made use of popt, users could add a)108 453.6 R F1(--text)2.629
E F0 .129(option that e)2.629 F .129(xpanded to)-.15 F F1 .13
(-i -n -E -2)2.629 F F0 .13(to let them more)2.63 F
(easily \214nd information in te)108 465.6 Q(xt \214les.)-.15 E F1
(1. SPECIFYING ALIASES)87 494.4 Q F0 .771
(Aliases are normally speci\214ed in tw)108 506.4 R 3.27(op)-.1 G
(laces:)-3.27 E F2(/etc/popt)4.42 E F0 .77(and the)3.27 F F1(.popt)3.27
E F0 .77(\214le in the user')3.27 F 3.27(sh)-.55 G .77(ome directory)
-3.27 F .651(\(found through the)108 518.4 R F1(HOME)3.151 E F0(en)3.151
E .651(vironment v)-.4 F .651(ariable\). Both \214les ha)-.25 F .951
-.15(ve t)-.2 H .651(he same format, an arbitrary num-).15 F
(ber of lines formatted lik)108 530.4 Q 2.5(et)-.1 G(his:)-2.5 E F2
(appname)108 554.4 Q F1(alias)2.68 E F2(ne)2.86 E .24(woption e)-.15 F
(xpansion)-.2 E F0(The)108 578.4 Q F2(appname)3.177 E F0 .347
(is the name of the application, which must be the same as the)3.027 F
F2(name)3.207 E F0 .347(parameter passed to)3.027 F F1
(poptGetContext\(\))108 590.4 Q F0 3.405(.T)C .905(his allo)-3.405 F
.905(ws each \214le to specify aliases for multiple programs. The)-.25 F
F1(alias)3.405 E F0 -.1(ke)3.405 G(yw)-.05 E(ord)-.1 E .367(speci\214es\
 that an alias is being de\214ned; currently popt con\214guration \214l\
es support only aliases, b)108 602.4 R .367(ut other)-.2 F .3
(abilities may be added in the future. The ne)108 614.4 R .301
(xt option is the option that should be aliased, and it may be)-.15 F
.01(either a short or a long option. The rest of the line speci\214es t\
he e)108 626.4 R .009(xpansion for the alias. It is parsed simi-)-.15 F
.077(larly to a shell command, which allo)108 638.4 R .078(ws \\, ", an\
d ' to be used for quoting. If a backslash is the \214nal char)-.25 F(-)
-.2 E .208(acter on a line, the ne)108 650.4 R .207(xt line in the \214\
le is assumed to be a logical continuation of the line containing the)
-.15 F(backslash, just as in shell.)108 662.4 Q .637(The follo)108 686.4
R .637(wing entry w)-.25 F .637(ould add a)-.1 F F1(--text)3.137 E F0
.638(option to the grep command, as suggested at the be)3.137 F .638
(ginning of)-.15 F(this section.)108 698.4 Q F1(gr)108 722.4 Q
(ep alias --text -i -n -E -2)-.18 E(2. EN)87 739.2 Q(ABLING ALIASES)-.2
E F0 1.023(An application must enable alias e)108 751.2 R 1.023
(xpansion for a)-.15 F F1(poptContext)3.523 E F0 1.023(before calling)
3.523 F F1(poptGetNextAr)3.523 E(g\(\))-.1 E F0(for)3.522 E(the \214rst\
 time. There are three functions that de\214ne aliases for a conte)108
763.2 Q(xt:)-.15 E(June 30, 1998)269.723 817.889 Q(7)192.722 E 0 Cg EP
%%Page: 8 8
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 128.978(POPT\(3\) Linux)72 48 R(Programmer')2.5
E 2.5(sM)-.55 G 128.977(anual POPT\(3\))-2.5 F/F1 10/Times-Bold@0 SF
(int poptReadDefaultCon\214g\(poptContext)108 84 Q/F2 10/Times-Italic@0
SF(con)2.7 E F1 2.5(,i).24 G(nt)-2.5 E F2<8d61>4.41 E(gs)-.1 E F1(\);)
.27 E F0 .241(This function reads aliases from)144 96 R F2(/etc/popt)
3.891 E F0 .241(and the)3.421 F F1(.popt)2.741 E F0 .241
(\214le in the user')2.741 F 2.741(sh)-.55 G .241(ome directory)-2.741 F
2.741(.C)-.65 G(ur)-2.741 E(-)-.2 E(rently)144 108 Q(,)-.65 E F2<8d61>
2.5 E(gs)-.1 E F0(should be)2.77 E F1(NULL)2.5 E F0 2.5(,a)C 2.5(si)-2.5
G 2.5(ti)-2.5 G 2.5(sp)-2.5 G(ro)-2.5 E(vided only for future e)-.15 E
(xpansion.)-.15 E F1(int poptReadCon\214gFile\(poptContext)108 129.6 Q
F2(con)2.7 E F1 2.5(,c).24 G(har *)-2.5 E F2(fn)4.47 E F1(\);).24 E F0
1.241(The \214le speci\214ed by)144 141.6 R F2(fn)5.711 E F0 1.241
(is opened and parsed as a popt con\214guration \214le. This allo)3.981
F 1.24(ws pro-)-.25 F
(grams to use program-speci\214c con\214guration \214les.)144 153.6 Q F1
(int poptAddAlias\(poptContext)108 175.2 Q F2(con)2.7 E F1 2.5(,s).24 G
(truct poptAlias)-2.5 E F2(alias)2.83 E F1(,).27 E(int)186.5 187.2 Q F2
<8d61>4.41 E(gs)-.1 E F1(\);).27 E F0(Occasionally)144 199.2 Q 2.821(,p)
-.65 G .322(rocesses w)-2.821 F .322(ant to specify aliases without ha)
-.1 F .322(ving to read them from a con\214gura-)-.2 F .528
(tion \214le. This function adds a ne)144 211.2 R 3.028(wa)-.25 G .528
(lias to a conte)-3.028 F .528(xt. The)-.15 F F2<8d61>4.938 E(gs)-.1 E
F0(ar)3.297 E .527(gument should be 0, as it is)-.18 F 1.894
(currently reserv)144 223.2 R 1.894(ed for future e)-.15 F 1.894
(xpansion. The ne)-.15 F 4.394(wa)-.25 G 1.894(lias is speci\214ed as a)
-4.394 F F1 1.895(struct poptAlias)4.395 F F0(,)A
(which is de\214ned as:)144 235.2 Q(struct poptAlias {)144 259.2 Q
(const char * longName; /* may be NULL */)156.5 271.2 Q
(char shortName; /* may be '\\0' */)156.5 283.2 Q(int ar)156.5 295.2 Q
(gc;)-.18 E(const char ** ar)156.5 307.2 Q
(gv; /* must be free\(\)able */)-.18 E(};)144 319.2 Q .397
(The \214rst tw)144 343.2 R 2.897(oe)-.1 G(lements,)-2.897 E F2
(longName)2.987 E F0(and)3.077 E F2(shortName)3.237 E F0 2.897(,s).18 G
.397(pecify the option that is aliased. The \214nal)-2.897 F(tw)144
355.2 Q(o,)-.1 E F2(ar)2.83 E(gc)-.37 E F0(and)2.81 E F2(ar)2.83 E(gv)
-.37 E F0 2.5(,d).32 G(e\214ne the e)-2.5 E
(xpansion to use when the aliases option is encountered.)-.15 E/F3 10.95
/Times-Bold@0 SF -.81(PA)72 376.8 S(RSING ARGUMENT STRINGS).81 E F0 .038
(Although popt is usually used for parsing ar)108 388.8 R .038
(guments already di)-.18 F .038(vided into an)-.25 F F2(ar)2.869 E(gv)
-.37 E F0 .039(-style array).32 F 2.539(,s)-.65 G .039(ome pro-)-2.539 F
.181(grams need to parse strings that are formatted identically to comm\
and lines. T)108 400.8 R 2.681(of)-.8 G .181(acilitate this, popt pro-)
-2.781 F .141(vides a function that parses a string into an array of st\
rings, using rules similiar to normal shell parsing.)108 412.8 R F1
(#include <popt.h>)108 436.8 Q(int poptP)108 448.8 Q(arseAr)-.1 E
(gvString\(char *)-.1 E F2(s)2.84 E F1 2.5(,i).27 G(nt *)-2.5 E F2(ar)
2.83 E(gcPtr)-.37 E F1(,).73 E(char ***)168 460.8 Q F2(ar)2.83 E(gvPtr)
-.37 E F1(\);).73 E(int poptDupAr)108 472.8 Q(gv\(int)-.1 E F2(ar)2.83 E
(gc)-.37 E F1 2.5(,c).31 G(onst char **)-2.5 E F2(ar)2.83 E(gv)-.37 E F1
2.5(,i).32 G(nt *)-2.5 E F2(ar)2.83 E(gcPtr)-.37 E F1(,).73 E
(const char ***)168 484.8 Q F2(ar)2.83 E(gvPtr)-.37 E F1(\);).73 E F0
.076(The string s is parsed into an)108 508.8 R F2(ar)2.906 E(gv)-.37 E
F0 .076(-style array).32 F 2.576(.T)-.65 G .076(he inte)-2.576 F .075
(ger pointed to by the)-.15 F F2(ar)2.905 E(gcPtr)-.37 E F0 .075
(parameter contains)3.305 F .499
(the number of elements parsed, and the \214nal)108 520.8 R F2(ar)3.329
E(gvPtr)-.37 E F0 .499(parameter contains the address of the ne)3.729 F
.5(wly cre-)-.25 F(ated array)108 532.8 Q 5(.T)-.65 G(he routine)-5 E F1
(poptDupAr)2.5 E(gv\(\))-.1 E F0(can be used to mak)2.5 E 2.5(eac)-.1 G
(op)-2.5 E 2.5(yo)-.1 G 2.5(fa)-2.5 G 2.5(ne)-2.5 G(xisting ar)-2.65 E
(gument array)-.18 E(.)-.65 E(The)108 556.8 Q F2(ar)2.902 E(gvPtr)-.37 E
F0 .072(created by)2.572 F F1(poptP)2.572 E(arseAr)-.1 E(gvString\(\))
-.1 E F0(or)2.572 E F1(poptDupAr)2.572 E(gv\(\))-.1 E F0 .072
(is suitable to pass directly to)2.572 F F1(popt-)2.571 E
(GetContext\(\))108 568.8 Q F0 6.417(.B)C 1.417(oth routines return a s\
ingle dynamically allocated contiguous block of storage and)-6.417 F
(should be)108 580.8 Q F1(fr)2.5 E(ee\(\))-.18 E F0
(ed when the application is \214nished with the storage.)A F3
(HANDLING EXTRA ARGUMENTS)72 597.6 Q F0 .4
(Some applications implement the equi)108 609.6 R -.25(va)-.25 G .4
(lent of option aliasing b).25 F .399
(ut need to do so through special logic.)-.2 F(The)108 621.6 Q F1
(poptStuffAr)2.648 E(gs\(\))-.1 E F0 .149(function allo)2.648 F .149
(ws an application to insert ne)-.25 F 2.649(wa)-.25 G -.18(rg)-2.649 G
.149(uments into the current).18 F F1(poptCon-)2.649 E(text)108 633.6 Q
F0(.)A F1(#include <popt.h>)108 657.6 Q(int poptStuffAr)108 669.6 Q
(gs\(poptContext)-.1 E F2(con)2.7 E F1 2.5(,c).24 G(onst char **)-2.5 E
F2(ar)2.83 E(gv)-.37 E F1(\);).32 E F0 1.539(The passed)108 693.6 R F2
(ar)4.369 E(gv)-.37 E F0 1.539(must ha)4.039 F 1.839 -.15(ve a)-.2 H F1
(NULL)4.189 E F0 1.539(pointer as its \214nal element. When)4.039 F F1
(poptGetNextOpt\(\))4.039 E F0 1.539(is ne)4.039 F(xt)-.15 E .409
(called, the "stuf)108 705.6 R .409(fed" ar)-.25 F .41
(guments are the \214rst to be parsed. popt returns to the normal ar)
-.18 F .41(guments once all)-.18 F(the stuf)108 717.6 Q(fed ar)-.25 E
(guments ha)-.18 E .3 -.15(ve b)-.2 H(een e).15 E(xhausted.)-.15 E F3
(EXAMPLE)72 734.4 Q F0 .656(The follo)108 746.4 R .656(wing e)-.25 F
.656(xample is a simpli\214ed v)-.15 F .656
(ersion of the program "robin" which appears in Chapter 15 of)-.15 F
1.481(the te)108 758.4 R 1.481(xt cited belo)-.15 F 5.282 -.65(w. R)-.25
H 1.482(obin has been stripped of e).65 F -.15(ve)-.25 G 1.482
(rything b).15 F 1.482(ut its ar)-.2 F 1.482
(gument-parsing logic, slightly)-.18 F(re)108 770.4 Q -.1(wo)-.25 G(rk)
.1 E .681(ed, and renamed "parse." It may pro)-.1 F .98 -.15(ve u)-.15 H
.68(seful in illustrating at least some of the features of the).15 F
192.723(8J)72 817.889 S(une 30, 1998)-192.723 E 0 Cg EP
%%Page: 9 9
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 128.978(POPT\(3\) Linux)72 48 R(Programmer')2.5
E 2.5(sM)-.55 G 128.977(anual POPT\(3\))-2.5 F -.15(ex)108 84 S
(tremely rich popt library).15 E(.)-.65 E(#include <popt.h>)108 108 Q
(#include <stdio.h>)108 120 Q -.2(vo)108 144 S(id usage\(poptConte).2 E
(xt optCon, int e)-.15 E(xitcode, char *error)-.15 E 2.5(,c)-.4 G
(har *addl\) {)-2.5 E(poptPrintUsage\(optCon, stderr)118 156 Q 2.5(,0)
-.4 G(\);)-2.5 E(if \(error\) fprintf\(stderr)118 168 Q 2.5(,")-.4 G
(%s: %s0, error)-2.5 E 2.5(,a)-.4 G(ddl\);)-2.5 E -.15(ex)118 180 S
(it\(e).15 E(xitcode\);)-.15 E(})108 192 Q(int main\(int ar)108 216 Q
(gc, char *ar)-.18 E(gv[]\) {)-.18 E 7.5(char c;)115.5 228 R
(/* used for ar)30 E(gument parsing */)-.18 E 10(int i)115.5 240 R 2.5
(=0)2.5 G 20(;/)-2.5 G 2.5(*u)-20 G(sed for tracking options */)-2.5 E
7.5(char *portname;)115.5 252 R 10(int speed)115.5 264 R 2.5(=0)2.5 G 10
(;/)-2.5 G 2.5(*u)-10 G(sed in ar)-2.5 E(gument parsing to set speed */)
-.18 E 10(int ra)115.5 276 R 2.5(w=0)-.15 G 15(;/)-2.5 G 2.5(*r)-15 G .3
-.15(aw m)-2.5 H(ode? */).15 E 10(int j;)115.5 288 R 7.5(char b)115.5
300 R(uf[B)-.2 E(UFSIZ+1];)-.1 E(poptConte)115.5 312 Q(xt optCon;)-.15 E
(/* conte)7.5 E(xt for parsing command-line options */)-.15 E
(struct poptOption optionsT)115.5 336 Q(able[] = {)-.8 E 2.5({")294.12
348 S(bps", 'b', POPT_ARG_INT)-2.5 E 2.5(,&)-.74 G(speed, 0,)-2.5 E
("signaling rate in bits-per)432.29 360 Q(-second", "BPS" },)-.2 E 2.5
({")294.12 372 S(crnl", 'c', 0, 0, 'c',)-2.5 E("e)432.29 384 Q
(xpand cr characters to cr/lf sequences" },)-.15 E 2.5({")294.12 396 S
(hw\215o)-2.5 E(w", 'h', 0, 0, 'h',)-.25 E("use hardw)432.29 408 Q
(are \(R)-.1 E(TS/CTS\) \215o)-.6 E 2.5(wc)-.25 G(ontrol" },)-2.5 E 2.5
({")294.12 420 S(no\215o)-2.5 E(w", 'n', 0, 0, 'n',)-.25 E
("use no \215o)432.29 432 Q 2.5(wc)-.25 G(ontrol" },)-2.5 E 2.5({")
294.12 444 S(ra)-2.5 E(w", ')-.15 E(r', 0, &ra)-.5 E 1.3 -.65(w, 0)-.15
H(,).65 E("don')432.29 456 Q 2.5(tp)-.18 G(erform an)-2.5 E 2.5(yc)-.15
G(haracter con)-2.5 E -.15(ve)-.4 G(rsions" },).15 E 2.5({")294.12 468 S
(sw\215o)-2.5 E(w", ')-.25 E(s', 0, 0, ')-.55 E(s',)-.55 E("use softw)
432.29 480 Q(are \(XON/XOF\) \215o)-.1 E 2.5(wc)-.25 G(ontrol" } ,)-2.5
E(POPT_A)294.12 492 Q(UT)-.55 E(OHELP)-.18 E 2.5({N)294.12 504 S
(ULL, 0, 0, NULL, 0 })-2.5 E(};)115.5 516 Q(optCon = poptGetConte)115.5
540 Q(xt\(NULL, ar)-.15 E(gc, ar)-.18 E(gv)-.18 E 2.5(,o)-.65 G(ptionsT)
-2.5 E(able, 0\);)-.8 E
(poptSetOtherOptionHelp\(optCon, "[OPTIONS]* <port>"\);)115.5 552 Q
(if \(ar)115.5 576 Q(gc < 2\) {)-.18 E(poptPrintUsage\(optCon, stderr)
284.12 588 Q 2.5(,0)-.4 G(\);)-2.5 E -.15(ex)284.12 600 S(it\(1\);).15 E
(})115.5 612 Q(/* No)115.5 636 Q 2.5(wd)-.25 G 2.5(oo)-2.5 G
(ptions processing, get portname */)-2.5 E(while \(\(c = poptGetNe)115.5
648 Q(xtOpt\(optCon\)\) >= 0\) {)-.15 E(switch \(c\) {)123 660 Q
(case 'c':)130.5 672 Q -.2(bu)138 684 S(f[i++] = 'c';).2 E(break;)138
696 Q(case 'h':)130.5 708 Q -.2(bu)138 720 S(f[i++] = 'h';).2 E(break;)
138 732 Q(case ')130.5 744 Q(s':)-.55 E -.2(bu)138 756 S(f[i++] = ').2 E
(s';)-.55 E(break;)138 768 Q(case 'n':)130.5 780 Q(June 30, 1998)269.723
817.889 Q(9)192.722 E 0 Cg EP
%%Page: 10 10
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 128.978(POPT\(3\) Linux)72 48 R(Programmer')2.5
E 2.5(sM)-.55 G 128.977(anual POPT\(3\))-2.5 F -.2(bu)138 84 S
(f[i++] = 'n';).2 E(break;)138 96 Q(})123 108 Q(})115.5 120 Q
(portname = poptGetAr)115.5 132 Q(g\(optCon\);)-.18 E
(if\(\(portname == NULL\) || !\(poptPeekAr)115.5 144 Q
(g\(optCon\) == NULL\)\))-.18 E
(usage\(optCon, 1, "Specify a single port", ".e.g., /de)123 156 Q
(v/cua0"\);)-.25 E(if \(c < -1\) {)115.5 180 Q
(/* an error occurred during option processing */)123 192 Q
(fprintf\(stderr)123 204 Q 2.5(,")-.4 G(%s: %s\\n",)-2.5 E
(poptBadOption\(optCon, POPT_B)143 216 Q(ADOPTION_NO)-.35 E(ALIAS\),)
-.35 E(poptStrerror\(c\)\);)143 228 Q(return 1;)123 240 Q(})115.5 252 Q
(/* Print out options, portname chosen */)115.5 276 Q 2.5
(printf\("Options chosen:)115.5 288 R("\);)2.5 E
(for\(j = 0; j < i ; j++\))115.5 300 Q(printf\("-%c ", b)123 312 Q
(uf[j]\);)-.2 E(if\(ra)115.5 324 Q(w\) printf\("-r "\);)-.15 E
(if\(speed\) printf\("-b %d ", speed\);)115.5 336 Q
(printf\("\\nPortname chosen: %s\\n", portname\);)115.5 348 Q
(poptFreeConte)115.5 372 Q(xt\(optCon\);)-.15 E -.15(ex)115.5 384 S
(it\(0\);).15 E(})108 396 Q .312
(RPM, a popular Linux package management program, mak)108 420 R .312
(es hea)-.1 F .312(vy use of popt')-.2 F 2.813(sf)-.55 G .313
(eatures. Man)-2.813 F 2.813(yo)-.15 G 2.813(fi)-2.813 G(ts)-2.813 E
.193(command-line ar)108 432 R .192
(guments are implemented through popt aliases, which mak)-.18 F .192
(es RPM an e)-.1 F .192(xcellent e)-.15 F(xam-)-.15 E 5.392(ple of ho)
108 444 R 7.892(wt)-.25 G 7.892(ot)-7.892 G(ak)-7.892 E 7.892(ea)-.1 G
(dv)-7.892 E 5.392(antage of the popt library)-.25 F 7.892(.F)-.65 G
5.393(or more information on RPM, see)-8.042 F(http://www)108 456 Q
(.rpm.or)-.65 E 1.301(g. The popt source code distrib)-.18 F 1.3
(ution includes test program\(s\) which use all of the)-.2 F .104
(features of the popt libraries in v)108 468 R .105(arious w)-.25 F .105
(ays. If a feature isn')-.1 F 2.605(tw)-.18 G .105
(orking for you, the popt test code is the)-2.705 F
(\214rst place to look.)108 480 Q/F1 10.95/Times-Bold@0 SF -.11(BU)72
496.8 S(GS).11 E F0(None presently kno)108 508.8 Q(wn.)-.25 E F1 -.548
(AU)72 525.6 S(THOR).548 E F0(Erik W)108 537.6 Q 2.5(.T)-.92 G(roan <e)
-2.85 E(wt@redhat.com>)-.25 E .211(This man page is deri)108 554.4 R
-.15(ve)-.25 G 2.711(di).15 G 2.711(np)-2.711 G .211(art from)-2.711 F
/F2 10/Times-Italic@0 SF .211(Linux Application De)2.711 F(velopment)
-.15 E F0 .211(by Michael K. Johnson and Erik)2.711 F 2.091 -.92(W. T)
108 566.4 T .251(roan, Cop).57 F .251(yright \(c\) 1998 by Addison W)-.1
F(esle)-.8 E 2.751(yL)-.15 G .251
(ongman, Inc., and included in the popt documenta-)-2.751 F(tion with t\
he permission of the Publisher and the appreciation of the Authors.)108
578.4 Q(Thanks to Robert L)108 595.2 Q(ynch for his e)-.55 E(xtensi)-.15
E .3 -.15(ve w)-.25 H(ork on this man page.).05 E F1(SEE ALSO)72 612 Q
/F3 10/Times-Bold@0 SF(getopt)108 624 Q F0(\(3\))A F2 1.195
(Linux Application De)108 648 R(velopment)-.15 E F0 3.695(,b).68 G 3.695
(yM)-3.695 G 1.195(ichael K. Johnson and Erik W)-3.695 F 3.694(.T)-.92 G
1.194(roan \(Addison-W)-4.044 F(esle)-.8 E 2.494 -.65(y, 1)-.15 H(998;)
.65 E(ISBN 0-201-30821-5\), Chapter 24.)108 660 Q F3(popt.ps)108 684 Q
F0 .106(is a Postscript v)2.606 F .106(ersion of the abo)-.15 F .406
-.15(ve c)-.15 H .107(ited book chapter).15 F 2.607(.I)-.55 G 2.607(tc)
-2.607 G .107(an be found in the source archi)-2.607 F .407 -.15(ve f)
-.25 H(or).15 E(popt a)108 696 Q -.25(va)-.2 G
(ilable at: ftp://ftp.rpm.or).25 E(g/pub/rpm.)-.18 E 185.223(10 June)72
817.889 R(30, 1998)2.5 E 0 Cg EP
%%Trailer
end
%%EOF
