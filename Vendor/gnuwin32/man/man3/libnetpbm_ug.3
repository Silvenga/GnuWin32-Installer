." This man page was generated by the Netpbm tool 'makeman' from HTML source.
." Do not hand-hack it!  If you have bug fixes or improvements, please find
." the corresponding HTML page on the Netpbm website, generate a patch
." against that, and send it to the Netpbm maintainer.
.TH "Libnetpbm Image Processing Manual" 3 "" "netpbm documentation"


.SH NAME
libnetpbm_ug \- netpbm sample code
.PP
The Libnetpbm programming library is part of
.BR Netpbm (1).

.SH Example
.PP
Here is an example of a C program that uses \fBlibnetpbm\fP to read a
Netpbm image input and produce a Netpbm image output.

.nf
   /* Example program fragment to read a PAM or PNM image
      from stdin, add up the values of every sample in it
      (I don't know why), and write the image unchanged to
      stdout. */

   #include <pam.h>

   struct pam inpam, outpam;
   unsigned int row;

   pnm_init(&argc, argv);

   pnm_readpaminit(stdin, &inpam, PAM_STRUCT_SIZE(tuple_type));

   outpam = inpam; outpam.file = stdout;

   pnm_writepaminit(&outpam);

   tuplerow = pnm_allocpamrow(&inpam);

   for (row = 0; row < inpam.height; row++) {
       unsigned int column;
       pnm_readpamrow(&inpam, tuplerow);
       for (column = 0; column < inpam.width; ++column) {
           unsigned int plane;
           for (plane = 0; plane < inpam.depth; ++plane) {
               grand_total += tuplerow[column][plane];
           }
       }
       pnm_writepamrow(&outpam, tuplerow); }

   pnm_freepamrow(tuplerow);

.fi

.SH Guide To Using Libnetpbm

.SS \fBlibnetpbm classes\fP
.PP
In this section, we cover only the PAM functions in
\fBlibnetpbm\fP.  As described in
.BR the
introduction to \fBlibnetpbm\fP (1), there are four other classes of
image processing functions (PBM, PGM, PPM, PNM).  They are less
important, since you can do everything more easily with the PAM
functions, but if you're working on old programs or need the extra
efficiency those older functions can sometimes provide, you can find
them documented as here:
.BR PBM Function Manual (1),
.BR PGM Function Manual (1),
.BR PPM Function Manual (1), and
.BR PNM Function Manual (1).
.PP
In case you're wondering, what makes the PAM functions easier to use
is:

.IP \(bu
Each function handles all the formats.  It does so without converting
to a common format, so your program can treat the different formats 
differently if it wants.  However, the interface makes it easy for your
program to ignore the differences between the formats if that's what you
want.

.IP \(bu
The PAM function parameter lists convey most information about the
image with which you're working with a single \fBpam\fP structure,
which you can build once and use over and over, whereas the older
functions require you to pass up to 5 pieces of image information
(height, width, etc.) as separate arguments to every function.


.UN pamstruct
.SS THE pam STRUCTURE
.PP
The PAM functions take most of their arguments in the form of a
single \fBpam\fP structure.  This is not an opaque object, but just a
convenient way to organize the information upon which most the
functions depend.  So you are free to access or set the elements of
the structure however you want.  But you will find in most cases it is
most convenient to call \fBpnm_readpaminit()\fP or
\fBpnm_writepaminit()\fP to set the fields in the \fBpam\fP
structure before calling any other pam functions, and then just to
pass the structure unchanged in all future calls to pam functions.
.PP
The fields are:


.TP
\fBsize\fP
The storage size in bytes of this entire structure.

.TP
\fBlen\fP
The length, in bytes, of the information in this structure.  The
information starts in the first byte and is contiguous.  This cannot
be greater than \fBsize\fP.  \fBsize\fP and \fBlen\fP can be used
to make programs compatible with newer and older versions of the
Netpbm libraries.

.TP
\fBfile\fP
The file.

.TP
\fBformat\fP
The format code of the raw image.  This is \fBPAM_FORMAT \fP
unless the PAM image is really a view of a PBM, PGM, or PPM image.
Then it's \fBPBM_FORMAT\fP, \fBRPBM_FORMAT\fP, etc.

.TP
\fBplainformat\fP
This is a boolean value and means: The format above is a plain
(text) format as opposed to a raw (binary) format.  This is entirely
redundant with the \fBformat\fP member and exists as a separate
member only for computational speed.  

.TP
\fBheight\fP
The height of the image in rows.

.TP
\fBwidth\fP
The width of the image in number of columns (tuples per row).

.TP
\fBdepth\fP
The depth of the image (degree of or number of samples in each tuple).

.TP
\fBmaxval\fP
The maxval of the image.  See definitions in
.BR pam (1).

.TP
\fBbytes_per_sample\fP
The number of bytes used to represent each sample in the image
file.  See the format definition in
.BR pam (1).  This
is entirely redundant with \fBmaxval\fP.  It exists as a separate
member for computational speed.

.TP
\fBtuple_type\fP
The tuple type of the image.  See definitions in
.BR pam (1).  Netpbm does not define any values for this
except the following, which are used for a PAM image which is really a
view of a PBM, PGM, or PPM image: \fBPAM_PBM_TUPLETYPE\fP,
\fBPAM_PGM_TUPLETYPE\fP, \fBPAM_PPM_TUPLETYPE\fP.

.TP
\fBallocation_depth\fP
The number of samples for which memory is allocated for any tuple
associated with this PAM structure.  This must be at least as great as
\&'depth'.  Only the first 'depth' of the samples of a tuple are
meaningful.
.sp
The purpose of this is to make it possible for a program to change
the type of a tuple to one with more or fewer planes.
.sp
0 means the allocation depth is the same as the image depth.





.UN lbAH
.SS PLAIN VERSUS RAW FORMAT
.PP
The PNM formats each come in two varieties: the older plain (text)
format and the newer raw (binary) format.  There are different format
codes for the plain and raw formats, but which of the two formats the
pnm and pam functions write is independent of the format code you pass
to them.
.PP
The pam functions always write raw formats.  If you specify the format
code for a plain format, a pam function assumes instead the raw
version of that format.
.PP
The pnm functions choose between plain and raw based on the
\fIforceplain\fP parameter that every write-type pnm function has.
If this boolean value is true, the function writes the plain version
of the format specified by the format code.  If it is false, the
function writes the raw version of the format specified by the format
code.
.PP
We are trying to stamp out the older plain formats, so it would be
a wise choice not to write a program that sets \fIforceplain\fP true
under any circumstance.  A user who needs a plain format can use the
\fBpnmtoplainpnm\fP program to convert the output of your program to
plain format.

.SS Reference
.PP
The
.BR Libnetpbm Netpbm Image
Processing Manual (1) describes the the \fBlibnetpbm\fP functions for
processing image data.
.PP
The
.BR Libnetpbm Utility Manual (1)
describes the functions that are not specifically related to the Netpbm
image formats.
